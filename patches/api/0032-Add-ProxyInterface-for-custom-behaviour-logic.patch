From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Thu, 18 Jan 2024 16:18:57 +0100
Subject: [PATCH] Add ProxyInterface for custom behaviour logic


diff --git a/src/main/java/de/verdox/mccreativelab/CustomBehaviour.java b/src/main/java/de/verdox/mccreativelab/CustomBehaviour.java
index f0b10dfe4653a14a6d3cc20077ce886e8e9d1083..8aed45049b4219b46abee2a8d573f9ba1000d91c 100644
--- a/src/main/java/de/verdox/mccreativelab/CustomBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/CustomBehaviour.java
@@ -13,9 +13,10 @@ import java.util.Objects;
  * @param <T>
  */
 public class CustomBehaviour<T> {
-    private T behaviour;
     private final String key;
-    public CustomBehaviour(String key){
+    private final ProxyInterface<T> proxyInterface;
+    public CustomBehaviour(Class<? extends T> type, T defaultImplementation, String key){
+        this.proxyInterface = new ProxyInterface<>(type, defaultImplementation);
         this.key = key;
     }
 
@@ -29,13 +30,13 @@ public class CustomBehaviour<T> {
      */
     public void setBehaviour(@NotNull T behaviour) {
         Objects.requireNonNull(behaviour);
-        this.behaviour = behaviour;
+        this.proxyInterface.addImplementation(behaviour);
     }
 
     @Nullable
     @ApiStatus.Internal
     public T getBehaviour() {
-        return behaviour;
+        return proxyInterface.getImplementation();
     }
 
     /**
@@ -43,6 +44,6 @@ public class CustomBehaviour<T> {
      * @return true if a custom implementation exists
      */
     public boolean isImplemented(){
-        return behaviour != null;
+        return proxyInterface.isImplemented();
     }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/MultiCustomBehaviour.java b/src/main/java/de/verdox/mccreativelab/MultiCustomBehaviour.java
index 58b9f986c0097848d2708cc6d69500ebd85c6efd..e912659924aef74d1f4fbeaf155c2fc3ae1f4e20 100644
--- a/src/main/java/de/verdox/mccreativelab/MultiCustomBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/MultiCustomBehaviour.java
@@ -1,6 +1,5 @@
 package de.verdox.mccreativelab;
 
-import org.bukkit.Bukkit;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -11,9 +10,12 @@ import java.util.Objects;
 
 public class MultiCustomBehaviour<K, T> {
     private final String key;
-    private final Map<K, T> storedBehaviour = new HashMap<>();
-
-    public MultiCustomBehaviour(String key) {
+    private final Class<? extends T> type;
+    private final T defaultImplementation;
+    private final Map<K, ProxyInterface<T>> storedBehaviour = new HashMap<>();
+    public MultiCustomBehaviour(Class<T> type, T defaultImplementation, String key) {
+        this.type = type;
+        this.defaultImplementation = defaultImplementation;
         this.key = key;
     }
 
@@ -29,14 +31,14 @@ public class MultiCustomBehaviour<K, T> {
     public void setBehaviour(@NotNull K key, @NotNull T behaviour) {
         Objects.requireNonNull(key);
         Objects.requireNonNull(behaviour);
-        storedBehaviour.put(key, behaviour);
+        storedBehaviour.computeIfAbsent(key, k -> new ProxyInterface<>(type, defaultImplementation)).addImplementation(behaviour);
     }
 
     @Nullable
     @ApiStatus.Internal
     public T getBehaviour(@NotNull K key) {
         Objects.requireNonNull(key);
-        return storedBehaviour.get(key);
+        return storedBehaviour.computeIfAbsent(key, k -> new ProxyInterface<>(type, defaultImplementation)).getImplementation();
     }
 
     /**
diff --git a/src/main/java/de/verdox/mccreativelab/ProxyInterface.java b/src/main/java/de/verdox/mccreativelab/ProxyInterface.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfd8c904e47b8c8739abebce431c7f8934367797
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ProxyInterface.java
@@ -0,0 +1,84 @@
+package de.verdox.mccreativelab;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiFunction;
+
+/**
+ * A proxy interface provider that merges various implementations of the same interface to one proxy instance.
+ * @param <T>
+ */
+public class ProxyInterface<T> {
+    private final Map<Method, T> methodToImplementationCache = new HashMap<>();
+    private final Class<? extends T> type;
+    private final T defaultImplementation;
+    private final T proxy;
+
+    public ProxyInterface(Class<? extends T> type, T defaultImplementation){
+        this.type = type;
+        this.defaultImplementation = defaultImplementation;
+        this.proxy = createProxy();
+    }
+
+    public T getImplementation(){
+        return this.proxy;
+    }
+
+    public void addImplementation(T implementation, BiFunction<T,Method,Boolean> replaceExistingMethodImplementation){
+        for (Method declaredMethod : implementation.getClass().getMethods()) {
+            Method overridenMethod = getOverriddenMethod(declaredMethod);
+            if(overridenMethod == null)
+                continue;
+            if(methodToImplementationCache.containsKey(overridenMethod) && (replaceExistingMethodImplementation == null || !replaceExistingMethodImplementation.apply(methodToImplementationCache.get(overridenMethod), overridenMethod))){
+                System.err.println("Method "+overridenMethod+" already implemented");
+                continue;
+            }
+            methodToImplementationCache.put(overridenMethod, implementation);
+        }
+    }
+
+    public boolean isImplemented(){
+        return !methodToImplementationCache.isEmpty();
+    }
+
+    public void addImplementation(T implementation){
+        addImplementation(implementation, null);
+    }
+
+    private T createProxy(){
+        return type.cast(Proxy.newProxyInstance(
+            type.getClassLoader(),
+            new Class<?>[]{type},
+            (proxy, method, args) -> {
+
+                T implementation = defaultImplementation;
+
+                if(methodToImplementationCache.containsKey(method))
+                    implementation = methodToImplementationCache.get(method);
+
+                return method.invoke(implementation, args);
+            }
+        ));
+    }
+
+    private Method getOverriddenMethod(final Method myMethod) {
+        Class<?> declaringClass = myMethod.getDeclaringClass();
+        if (declaringClass.equals(Object.class) || declaringClass.getSuperclass() == null) {
+            return null;
+        }
+        try {
+            return declaringClass.getSuperclass().getMethod(myMethod.getName(), myMethod.getParameterTypes());
+        } catch (NoSuchMethodException e) {
+            for (Class<?> iface : declaringClass.getInterfaces()) {
+                try {
+                    return iface.getMethod(myMethod.getName(), myMethod.getParameterTypes());
+                } catch (NoSuchMethodException ignored) {
+
+                }
+            }
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java
index adfef7680d03193d829e8aedf17a97e2d66b56e1..21e354fd7cc2b0f6591d228c6bbf9f60b2b1f50d 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java
@@ -15,11 +15,11 @@ public abstract class BehaviourResult<T, R extends Enum<?>> {
         this.result = result;
     }
 
-    protected T getValue() {
+    public T getValue() {
         return value;
     }
 
-    protected R getResult() {
+    public R getResult() {
         return result;
     }
 
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviour.java
index 9f82fed2bfdc992f4793934622e1f4784af5f886..eb91d9b63eeef61143fbe4a95420204d00324837 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviour.java
@@ -15,7 +15,8 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.util.RayTraceResult;
 
 public interface BlockBehaviour {
-    MultiCustomBehaviour<Material, BlockBehaviour> BLOCK_BEHAVIOUR = new MultiCustomBehaviour<>("MCCLab - BlockBehaviour");
+    MultiCustomBehaviour<Material, BlockBehaviour> BLOCK_BEHAVIOUR = new MultiCustomBehaviour<>(BlockBehaviour.class, new BlockBehaviour() {
+    }, "MCCLab - BlockBehaviour");
 
     /**
      * This method is called to get the explosion resistance of a block
@@ -47,9 +48,9 @@ public interface BlockBehaviour {
      * This method is called everytime the block recognizes a neighbour block update
      * Normally this happens when a block next to this block was changed. If you want to implement any custom behaviour on environmental changes use this method.
      *
-     * @param block           The block recognizing the neighbour update
-     * @param sourceBlock     The neighbour block receiving the block update
-     * @param notify          The Notify flag
+     * @param block       The block recognizing the neighbour update
+     * @param sourceBlock The neighbour block receiving the block update
+     * @param notify      The Notify flag
      */
     default BehaviourResult.Void onNeighbourBlockUpdate(Block block, Block sourceBlock, boolean notify) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
@@ -182,7 +183,7 @@ public interface BlockBehaviour {
      * @param rayTraceResult The interaction info
      * @return The result of this interaction
      */
-    default BehaviourResult.Object<InteractionResult> use(Block block, Player player, EquipmentSlot hand, RayTraceResult rayTraceResult){
+    default BehaviourResult.Object<InteractionResult> use(Block block, Player player, EquipmentSlot hand, RayTraceResult rayTraceResult) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java
index de2cb5e6bb1993f81e2c8ae6cb9e871fade83525..40a740f11d5b120d1f0f9a9e1835b981faaee1d1 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java
@@ -10,54 +10,68 @@ public interface FoodBehaviour {
      * This interface is solely used to manipulate the vanilla variables that are not yet changeable by the API.
      * Implement your own version of the FoodBehaviour Interface and make FOOD_BEHAVIOUR use your implementation.
      */
-    CustomBehaviour<FoodBehaviour> FOOD_BEHAVIOUR = new CustomBehaviour<>("MCCLab - FoodBehaviour");
+    CustomBehaviour<FoodBehaviour> FOOD_BEHAVIOUR = new CustomBehaviour<>(FoodBehaviour.class, new FoodBehaviour() {},"MCCLab - FoodBehaviour");
     /**
      * Gets the regeneration rate per tick when a player is saturated.
      * Defaults to 10 in vanilla.
      * @param player The player
      * @return the regeneration rate per tick
      */
-    int getSaturatedRegenRate(Player player);
+    default int getSaturatedRegenRate(Player player){
+        return 10;
+    }
     /**
      * Gets the regeneration rate per tick when a player is unsaturated.
      * Defaults to 80 in vanilla.
      * @param player The player
      * @return the regeneration rate per tick
      */
-    int getUnsaturatedRegenRate(Player player);
+    default int getUnsaturatedRegenRate(Player player){
+        return 80;
+    }
     /**
      * Gets the starvation rate per tick when a player is starving.
      * Defaults to 80 in vanilla.
      * @param player The player
      * @return the regeneration rate per tick
      */
-    int getStarvationRate(Player player);
+    default int getStarvationRate(Player player){
+        return 80;
+    }
     /**
      * Gets the food level when a player starts starving
      * Defaults to 0 in vanilla.
      * @param player The player
      * @return the starvation food limit
      */
-    int getStarvationFoodLimit(Player player);
+    default int getStarvationFoodLimit(Player player){
+        return 0;
+    }
     /**
      * Gets the food level a player needs at minimum to start regenerating health
      * Defaults to 18 in vanilla.
      * @param player The player
      * @return the food level
      */
-    int getMinimumFoodToRegenerate(Player player);
+    default int getMinimumFoodToRegenerate(Player player){
+        return 18;
+    }
     /**
      * Gets the exhaustion over time rate in ticks
      * This is a custom feature. If the method returns an integer less or equal then -1 the feature won't be used.
      * @param player The player
      * @return the food level
      */
-    int getExhaustionOverTimeRateInTicks(Player player);
+    default int getExhaustionOverTimeRateInTicks(Player player){
+        return 0;
+    }
     /**
      * Gets the exhaustion amount over time
      * * This is a custom feature. If the method returns an integer less or equal then 0 the feature won't be used.
      * @param player The player
      * @return the food level
      */
-    int getExhaustionOverTimeAmount(Player player);
+    default int getExhaustionOverTimeAmount(Player player){
+        return 0;
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
index 7309db3192d3cacafdacef126215037129fa91aa..8c71fb63eb79cfb5dc8fc74e50cec253b2f4f80b 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
@@ -13,61 +13,61 @@ import org.bukkit.inventory.FoodProperties;
 import org.bukkit.inventory.ItemStack;
 
 public interface ItemBehaviour {
-    MultiCustomBehaviour<CustomItemData, ItemBehaviour> ITEM_BEHAVIOUR = new MultiCustomBehaviour<>("MCCLab - ItemBehaviour");
+    MultiCustomBehaviour<CustomItemData, ItemBehaviour> ITEM_BEHAVIOUR = new MultiCustomBehaviour<>(ItemBehaviour.class, new ItemBehaviour() {}, "MCCLab - ItemBehaviour");
 
-    default BehaviourResult.Object<ItemStack> finishUsingItem(LivingEntity livingEntity, ItemStack usedItem){
+    default BehaviourResult.Object<ItemStack> finishUsingItem(LivingEntity livingEntity, ItemStack usedItem) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Object<Integer> getMaxStackSize(ItemStack stack){
+    default BehaviourResult.Object<Integer> getMaxStackSize(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Object<Integer> getMaxDamage(ItemStack stack){
+    default BehaviourResult.Object<Integer> getMaxDamage(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool mineBlock(ItemStack stack, Block block, Player miner){
+    default BehaviourResult.Bool mineBlock(ItemStack stack, Block block, Player miner) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool isCorrectToolForDrops(ItemStack stack, BlockData blockData){
+    default BehaviourResult.Bool isCorrectToolForDrops(ItemStack stack, BlockData blockData) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Void onCraftedBy(ItemStack stack, Player player, int amount){
+    default BehaviourResult.Void onCraftedBy(ItemStack stack, Player player, int amount) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Void onDestroyed(ItemStack stack, Item item){
+    default BehaviourResult.Void onDestroyed(ItemStack stack, Item item) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool isEdible(ItemStack stack){
+    default BehaviourResult.Bool isEdible(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Object<InteractionResult> interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, EquipmentSlot equipmentSlot){
+    default BehaviourResult.Object<InteractionResult> interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, EquipmentSlot equipmentSlot) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Object<FoodProperties> getFoodProperties(ItemStack stack){
+    default BehaviourResult.Object<FoodProperties> getFoodProperties(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Object<ItemStack> getCraftRemainingItem(ItemStack stack){
+    default BehaviourResult.Object<ItemStack> getCraftRemainingItem(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool isFireResistant(ItemStack stack){
+    default BehaviourResult.Bool isFireResistant(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool canFitInsideContainerItems(ItemStack stack){
+    default BehaviourResult.Bool canFitInsideContainerItems(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
-    default BehaviourResult.Bool isEnchantable(ItemStack stack){
+    default BehaviourResult.Bool isEnchantable(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java
index 28db22a347fdccbfb23aefd8696cd187a9e68c02..c5a58ee0bf3de06faa66b56c706014b31e1a8756 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java
@@ -8,7 +8,7 @@ import org.bukkit.block.data.BlockData;
 
 @Deprecated
 public interface RandomTickBehaviour {
-    MultiCustomBehaviour<Material, RandomTickBehaviour> RANDOM_TICK_BEHAVIOUR = new MultiCustomBehaviour<>("MCCLab - RandomTickBehaviour");
+    //MultiCustomBehaviour<Material, RandomTickBehaviour> RANDOM_TICK_BEHAVIOUR = new MultiCustomBehaviour<>("MCCLab - RandomTickBehaviour");
     /**
      * This method is called every time the server software checks whether a particular blockdata is randomly ticking.
      * @param blockData The Blockdata
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/WorldGenerationBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/WorldGenerationBehaviour.java
index 9faa684aab24020b3017adeb98fd04251c0e777f..7893ba20ae63f3137c2b95e1b5b0eadcff5e2e73 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/WorldGenerationBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/WorldGenerationBehaviour.java
@@ -7,7 +7,12 @@ import org.bukkit.block.data.BlockData;
 import org.bukkit.util.BlockVector;
 
 public interface WorldGenerationBehaviour {
-    CustomBehaviour<WorldGenerationBehaviour> WORLD_GENERATION_BEHAVIOUR = new CustomBehaviour<>("MCCLab - WorldGenerationBehaviour");
+    CustomBehaviour<WorldGenerationBehaviour> WORLD_GENERATION_BEHAVIOUR = new CustomBehaviour<>(WorldGenerationBehaviour.class, new WorldGenerationBehaviour() {
+        @Override
+        public void featureBlockGenerationCallback(FeatureType featureType, BlockVector blockPosition, WorldGenChunk worldGenChunk, BlockData generatedBlockData) {
+
+        }
+    },"MCCLab - WorldGenerationBehaviour");
 
     /**
      * This callback method is called everytime a block is placed due to chunk generation.
@@ -18,7 +23,9 @@ public interface WorldGenerationBehaviour {
      * @param worldGenChunk The WorldGenChunk of the block
      * @param generatedBlockData The BlockData that was generated
      */
-    void featureBlockGenerationCallback(FeatureType featureType, BlockVector blockPosition, WorldGenChunk worldGenChunk, BlockData generatedBlockData);
+    default void featureBlockGenerationCallback(FeatureType featureType, BlockVector blockPosition, WorldGenChunk worldGenChunk, BlockData generatedBlockData){
+
+    }
     record FeatureType(NamespacedKey namespacedKey){
         public static final FeatureType TREE_FEATURE = new FeatureType(NamespacedKey.minecraft("tree_feature"));
         public static final FeatureType ORE_FEATURE = new FeatureType(NamespacedKey.minecraft("ore_feature"));
