From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Fri, 26 Jan 2024 15:18:39 +0100
Subject: [PATCH] Finalizing EntityBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/entity/AnimalEntityBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/entity/AnimalEntityBehaviour.java
index d7c3b0bb550247b558d2c39e388bde8e7b5319e3..f86f6b5102aec88ffff986f4000ef0d8e77c2a34 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/entity/AnimalEntityBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/entity/AnimalEntityBehaviour.java
@@ -1,14 +1,41 @@
 package de.verdox.mccreativelab.behaviour.entity;
 
 import de.verdox.mccreativelab.behaviour.BehaviourResult;
+import org.bukkit.entity.Ageable;
 import org.bukkit.entity.Animals;
+import org.bukkit.entity.Mob;
 import org.bukkit.inventory.ItemStack;
 
 public interface AnimalEntityBehaviour<T extends Animals> extends AgeableEntityBehaviour<T> {
+
+    /**
+     * Gets if an {@link Animals} can mate with another {@link Animals}
+     * @param entity - The first animal
+     * @param other - The other animal
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canMate(T entity, Animals other) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
+
+    /**
+     * Gets if an {@link org.bukkit.entity.Entity} would eat an {@link ItemStack}
+     * @param entity - The Entity
+     * @param stack - The ItemStack
+     * @return - True if it can
+     */
     default BehaviourResult.Bool isFood(T entity, ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
+
+    /**
+     * Called when an {@link Animals} breeds with another {@link Animals}
+     * @param entity - The first animal
+     * @param other - The second animal
+     * @param child - The child
+     * @return - nothing
+     */
+    default BehaviourResult.Callback onBreed(T entity, Animals other, Ageable child) {
+        return BehaviourResult.Callback.DEFAULT_INSTANCE;
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/entity/EntityBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/entity/EntityBehaviour.java
index 1003724e799f5ad676e9a003579915b12bc99e3d..2203da4ffa6c1cb438502d7b8e971c0020fca697 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/entity/EntityBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/entity/EntityBehaviour.java
@@ -1,29 +1,70 @@
 package de.verdox.mccreativelab.behaviour.entity;
 
+import de.verdox.mccreativelab.behaviour.Behaviour;
 import de.verdox.mccreativelab.behaviour.BehaviourResult;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
+import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 import java.util.Map;
 
-public interface EntityBehaviour<T extends Entity> {
+public interface EntityBehaviour<T extends Entity> extends Behaviour {
+    /**
+     * Gets if an {@link Entity} is fire immune
+     * @param entity - The entity
+     * @return - true if it is fire immune
+     */
     default BehaviourResult.Bool fireImmune(T entity) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
+
+    /**
+     * Gets if an {@link Entity} ignores a particular explosion
+     * @param entity - The entity
+     * @return - true if it ignores the explosion
+     */
     default BehaviourResult.Bool ignoreExplosion(T entity, Location explosionLocation, float radius, @Nullable Entity source, boolean explosionHasFire, Map<Player, Vector> hitPlayers, List<Location> hitBlocks) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called on every tick of an {@link Entity}
+     * @param entity - The entity
+     * @return - nothing
+     */
     default BehaviourResult.Callback onTick(T entity){
         return BehaviourResult.Callback.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if an {@link Entity} can change dimensions
+     * @param entity - The entity
+     * @return - true if it can change dimensions
+     */
     default BehaviourResult.Bool canChangeDimensions(T entity) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
+
+    /**
+     * Is called when an {@link Entity} is loaded
+     * @param entity - The entity
+     * @return - nothing
+     */
+    default BehaviourResult.Callback readAdditionalSaveData(T entity, PersistentDataContainer persistentDataContainer){
+        return done();
+    }
+
+    /**
+     * Is called when an {@link Entity} is saved
+     * @param entity - The entity
+     * @return - nothing
+     */
+    default BehaviourResult.Callback addAdditionalSaveData(T entity, PersistentDataContainer persistentDataContainer){
+        return done();
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/entity/LivingEntityBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/entity/LivingEntityBehaviour.java
index b1dbe8fcd678a24bbd0e802405d8163ed185e7ac..fd940bf18d0e45f637c0cf89a478db2bda1a0683 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/entity/LivingEntityBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/entity/LivingEntityBehaviour.java
@@ -1,33 +1,54 @@
 package de.verdox.mccreativelab.behaviour.entity;
 
 import de.verdox.mccreativelab.behaviour.BehaviourResult;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.LivingEntity;
 
 public interface LivingEntityBehaviour<T extends LivingEntity> extends EntityBehaviour<T> {
     /**
-     * This method is called to check if an entity is sensitive to water.
-     * If true the entity will receive damage
-     *
-     * @return A boolean result
+     * Gets if an {@link LivingEntity} is sensitive to water
+     * @param entity - The entity
+     * @return - true if it is
      */
     default BehaviourResult.Bool isSensitiveToWater(T entity) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets the water-damage of an {@link LivingEntity} applied when it is sensitive to water
+     * @param entity - The entity
+     * @return - The water damage
+     */
     default BehaviourResult.Object<Float> waterDamage(T entity) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Is called when an {@link LivingEntity} picks up an {@link Item}
+     * @param entity - The Entity
+     * @param item - The picked up Item
+     * @return - nothing
+     */
     default BehaviourResult.Void onItemPickup(T entity, Item item){
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if an {@link LivingEntity} can disable shields
+     * @param entity - The entity
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canDisableShield(T entity) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if an {@link LivingEntity} can attack an {@link Entity} with a particular {@link EntityType}
+     * @param entity - The entity
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canAttackType(T entity, EntityType entityType) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/entity/MobBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/entity/MobBehaviour.java
index 0c126914a09492f89b6830b25e8a0af39ddbe684..c95ab713512b39b50542fb49579d2bb054225aaf 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/entity/MobBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/entity/MobBehaviour.java
@@ -3,38 +3,77 @@ package de.verdox.mccreativelab.behaviour.entity;
 import de.verdox.mccreativelab.InteractionResult;
 import de.verdox.mccreativelab.behaviour.BehaviourResult;
 import org.bukkit.Material;
-import org.bukkit.entity.Cow;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Mob;
-import org.bukkit.entity.Player;
+import org.bukkit.entity.*;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 
 public interface MobBehaviour <T extends Mob> extends LivingEntityBehaviour<T> {
+    /**
+     * Is called when a {@link Player} interacts with a {@link Mob}
+     * @param entity - The Entity
+     * @param player - The Player
+     * @param hand - The Interaction Hand
+     * @return - An Interaction result
+     */
     default BehaviourResult.Object<InteractionResult> mobInteract(T entity, Player player, EquipmentSlot hand){
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if a {@link Mob} can fire projectile weapons
+     * @param entity - The entity
+     * @param weapon - The weapon material
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canFireProjectileWeapon(T entity, Material weapon) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when an entity ate something
+     * @param entity - The Entity
+     * @return - nothing
+     */
     default BehaviourResult.Void ate(T entity) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if a {@link Mob} can hold an {@link ItemStack}
+     * @param entity - The entity
+     * @param stack - The ItemStack
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canHoldItem(T entity, ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if a {@link Mob} can pickup an {@link ItemStack}
+     * @param entity - The entity
+     * @param stack - The ItemStack
+     * @return - true if it can
+     */
     default BehaviourResult.Bool wantsToPickUp(T entity, ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if a {@link Mob} should be removed when away a particular distance from players
+     * @param entity - The entity
+     * @param distanceSquared - The distance
+     * @return - true if it should be removed
+     */
     default BehaviourResult.Bool removeWhenFarAway(T entity, double distanceSquared) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if a {@link Mob} can be leashed by a {@link Player}
+     * @param entity - The entity
+     * @param player - The Player
+     * @return - true if it can
+     */
     default BehaviourResult.Bool canBeLeashed(T entity, Player player) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 7bc661ecfbea7951f27bc8749461a91b9da4e387..18c1bf4b0eda7292d6d574ce0d7ef618621f370b 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1073,6 +1073,23 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param <B> - The EntityBehaviour Type
      */
     <T extends Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> void setCustomEntityBehaviour(Class<? extends T> entityTypeClass, B behaviour);
+
+    /**
+     * Gets the custom behaviour for this entity
+     * @param behaviourType - The type of behaviour
+     * @param <T> - The Bukkit Entity Type
+     * @param <B> - The EntityBehaviour Type
+     */
+    @Nullable
+    <T extends Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviour(Class<? extends B> behaviourType);
+    /**
+     * Gets the custom behaviour for this entity if it is available and has the provided type
+     * @param behaviourType - The type of behaviour
+     * @param <T> - The Bukkit Entity Type
+     * @param <B> - The EntityBehaviour Type
+     */
+    <T extends Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviourIfAvailable(Class<? extends B> behaviourType);
+
     boolean hasCustomEntityBehaviour();
     // MCCreativeLab end - Add EntityBehaviour
     // Paper Start - Collision API
