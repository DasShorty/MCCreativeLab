From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <lukasjonsson@outlook.de>
Date: Fri, 17 Nov 2023 20:36:42 +0100
Subject: [PATCH] Adding CustomModelChoice to crafting system. All Recipes
 compare for customModels by default


diff --git a/src/main/java/de/verdox/mccreativelab/recipe/CustomModelChoice.java b/src/main/java/de/verdox/mccreativelab/recipe/CustomModelChoice.java
new file mode 100644
index 0000000000000000000000000000000000000000..710b2b88d77f4b6052b5a17848d6d2997418ab24
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/recipe/CustomModelChoice.java
@@ -0,0 +1,70 @@
+package de.verdox.mccreativelab.recipe;
+
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+
+public class CustomModelChoice implements RecipeChoice {
+    private final List<CustomItemData> choices;
+
+    public CustomModelChoice(List<CustomItemData> customItemDataList) {
+        this.choices = Collections.unmodifiableList(customItemDataList);
+    }
+
+    public CustomModelChoice(CustomItemData customItemData) {
+        this.choices = Collections.unmodifiableList(List.of(customItemData));
+    }
+
+    public CustomModelChoice(Material material, int customModelData) {
+        this.choices = Collections.unmodifiableList(List.of(new CustomItemData(material, customModelData)));
+    }
+
+    @Override
+    public @NotNull ItemStack getItemStack() {
+        var choice = choices.get(0);
+        return choice.createStack();
+    }
+
+    @Override
+    public @NotNull RecipeChoice clone() {
+        return new CustomModelChoice(this.choices);
+    }
+
+    @Override
+    public boolean test(@NotNull ItemStack stackToCheck) {
+        for (CustomItemData choice : choices) {
+            if(choice.isSame(stackToCheck))
+                return true;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        CustomModelChoice that = (CustomModelChoice) o;
+        return Objects.equals(choices, that.choices);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(choices);
+    }
+
+    @Override
+    public String toString() {
+        return "CustomModelChoice{" +
+            "choices=" + choices +
+            '}';
+    }
+
+    public List<CustomItemData> getChoices() {
+        return this.choices;
+    }
+}
