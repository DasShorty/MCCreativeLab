From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Fri, 26 Jan 2024 15:22:21 +0100
Subject: [PATCH] Finalizing ItemBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
index 8cfce517d0ab69899d75e95d64a8bed91c2258af..e77664719f66cab501c81257bb3b8d8c0654298d 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviour.java
@@ -2,6 +2,7 @@ package de.verdox.mccreativelab.behaviour;
 
 import de.verdox.mccreativelab.InteractionResult;
 import de.verdox.mccreativelab.MultiCustomBehaviour;
+import de.verdox.mccreativelab.behaviour.interaction.ItemStackInteraction;
 import de.verdox.mccreativelab.recipe.CustomItemData;
 import org.bukkit.block.Block;
 import org.bukkit.block.data.BlockData;
@@ -11,63 +12,188 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.FoodProperties;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.RayTraceResult;
 
 public interface ItemBehaviour extends Behaviour {
-    MultiCustomBehaviour<CustomItemData, ItemBehaviour> ITEM_BEHAVIOUR = new MultiCustomBehaviour<>(ItemBehaviour.class, new ItemBehaviour() {}, "MCCLab - ItemBehaviour");
-
+    MultiCustomBehaviour<CustomItemData, ItemBehaviour> ITEM_BEHAVIOUR = new MultiCustomBehaviour<>(ItemBehaviour.class, new ItemBehaviour() {
+    }, "MCCLab - ItemBehaviour");
+
+    /**
+     * Called after an {@link ItemStack} was used by a {@link LivingEntity}
+     * @param livingEntity - The LivingEntity
+     * @param usedItem - The ItemStack
+     * @return - The ItemStack that is left after using it
+     */
     default BehaviourResult.Object<ItemStack> finishUsingItem(LivingEntity livingEntity, ItemStack usedItem) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets the max stack size of an {@link ItemStack}
+     * @param stack - The ItemStack
+     * @return - The max stack size.
+     */
     default BehaviourResult.Object<Integer> getMaxStackSize(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets the max durability of an {@link ItemStack}
+     * @param stack - The ItemStack
+     * @return - The max durability
+     */
     default BehaviourResult.Object<Integer> getMaxDamage(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when an {@link ItemStack} is used to mine a {@link Block} by a {@link Player}
+     * @param stack - The ItemStack
+     * @param block - The block
+     * @param miner - The miner
+     * @return - If the block was mined successfully
+     */
     default BehaviourResult.Bool mineBlock(ItemStack stack, Block block, Player miner) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Is called to determine if an {@link ItemStack} is the correct tool to drop loot from {@link BlockData}
+     * @param stack - The item stack
+     * @param blockData - The block data
+     * @return - True when it is the correct tool
+     */
     default BehaviourResult.Bool isCorrectToolForDrops(ItemStack stack, BlockData blockData) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when an amount of {@link ItemStack} is crafted by a {@link Player}
+     * @param stack - The ItemStack
+     * @param player - The crafter
+     * @param amount - The amount crafted
+     * @return - Nothing
+     */
     default BehaviourResult.Void onCraftedBy(ItemStack stack, Player player, int amount) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when an {@link Item} is destroyed in the world
+     * @param stack - The ItemStack of the item
+     * @param item - The Item entity
+     * @return - nothing
+     */
     default BehaviourResult.Void onDestroyed(ItemStack stack, Item item) {
         return BehaviourResult.Void.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Is called to check if an {@link ItemStack} is edible.
+     *
+     * This might result in strange client side behaviour since the value is not synced with the client.
+     * @param stack - The ItemStack
+     * @return - True if it is edible
+     */
     default BehaviourResult.Bool isEdible(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when a {@link Player} interacts with a {@link LivingEntity} with an {@link ItemStack}
+     * @param stack - The ItemStack
+     * @param player - The Player
+     * @param livingEntity - The LivingEntity
+     * @param equipmentSlot - The hand in which the item is carried
+     * @return - An InteractionResult
+     */
     default BehaviourResult.Object<InteractionResult> interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, EquipmentSlot equipmentSlot) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Called when a {@link Player} uses an {@link ItemStack}
+     * @param stack - The ItemStack
+     * @param player - The Player
+     * @param equipmentSlot - The hand in which the item is carried
+     * @return - An InteractionResult
+     */
+    default BehaviourResult.Object<ItemStackInteraction> use(ItemStack stack, Player player, EquipmentSlot equipmentSlot) {
+        return BehaviourResult.Object.DEFAULT_INSTANCE;
+    }
+
+    /**
+     * Called when a {@link Player} uses an {@link ItemStack} on a {@link Block}
+     * @param stack - The ItemStack
+     * @param player - The Player
+     * @param rayTraceResult - The hit block information
+     * @param equipmentSlot - The hand in which the item is carried
+     * @return - An InteractionResult
+     */
+    default BehaviourResult.Object<InteractionResult> useOn(ItemStack stack, Player player, EquipmentSlot equipmentSlot, RayTraceResult rayTraceResult) {
+        return BehaviourResult.Object.DEFAULT_INSTANCE;
+    }
+
+    /**
+     *Gets the {@link FoodProperties} of an {@link ItemStack}
+     * @param stack - The ItemStack
+     * @return - The FoodProperties
+     */
     default BehaviourResult.Object<FoodProperties> getFoodProperties(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets the {@link ItemStack} that remains when {@link ItemStack} are crafted.
+     * @param stack - The ItemStack that was crafted
+     * @return - The ItemStack that remains in the crafting matrix
+     */
     default BehaviourResult.Object<ItemStack> getCraftRemainingItem(ItemStack stack) {
         return BehaviourResult.Object.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if the {@link ItemStack} is fire-resistant
+     * @param stack - The ItemStack
+     * @return - true if it is fire-resistant
+     */
     default BehaviourResult.Bool isFireResistant(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if the {@link ItemStack} fits inside container items like Shulker Boxes or Bundles
+     * @param stack - The ItemStack
+     * @return - true if it fits
+     */
     default BehaviourResult.Bool canFitInsideContainerItems(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
 
+    /**
+     * Gets if the {@link ItemStack} is enchantable
+     * @param stack - The ItemStack
+     * @return - true if it is enchantable
+     */
     default BehaviourResult.Bool isEnchantable(ItemStack stack) {
         return BehaviourResult.Bool.DEFAULT_INSTANCE;
     }
+
+    /**
+     * Called when the {@link ItemStack} nbt is loaded
+     * @param stack - The ItemStack
+     * @return - nothing
+     */
+    default BehaviourResult.Callback onNbtLoad(ItemStack stack) {
+        return BehaviourResult.Callback.DEFAULT_INSTANCE;
+    }
+
+    /**
+     * Called when the {@link ItemStack} nbt is saved
+     * @param stack - The ItemStack
+     * @return - nothing
+     */
+    default BehaviourResult.Callback onNbtSave(ItemStack stack) {
+        return BehaviourResult.Callback.DEFAULT_INSTANCE;
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/interaction/ItemStackInteraction.java b/src/main/java/de/verdox/mccreativelab/behaviour/interaction/ItemStackInteraction.java
new file mode 100644
index 0000000000000000000000000000000000000000..dfb16c46da5cf505f3a82b08879429cd475e749f
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/interaction/ItemStackInteraction.java
@@ -0,0 +1,7 @@
+package de.verdox.mccreativelab.behaviour.interaction;
+
+import de.verdox.mccreativelab.InteractionResult;
+import org.bukkit.inventory.ItemStack;
+
+public record ItemStackInteraction(InteractionResult interactionResult, ItemStack stack){
+}
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 9b23c9a77b445e40307107d8e9b51256c22f0499..a707378dffe9639a4e7c8dde755d6e085c911440 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -854,7 +854,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     }
 
     public @Nullable de.verdox.mccreativelab.behaviour.ItemBehaviour getItemBehaviour(){
-        return this.itemBehaviour;
+        if(this.itemBehaviour != null)
+            return this.itemBehaviour;
+        else
+            return de.verdox.mccreativelab.behaviour.ItemBehaviour.ITEM_BEHAVIOUR.getBehaviour(de.verdox.mccreativelab.recipe.CustomItemData.fromItemStack(this));
     }
     // MCCLab end - Add ItemBehaviour as instance to this specific Item Stack
 
