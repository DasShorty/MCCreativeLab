From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Thu, 11 Jan 2024 17:27:20 +0100
Subject: [PATCH] Temp patch 2


diff --git a/src/main/java/de/verdox/mccreativelab/ai/CraftAIBehaviour.java b/src/main/java/de/verdox/mccreativelab/ai/CraftAIBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..d620f4f72dce3287d8a497d02e31f96bc9af3cb4
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/CraftAIBehaviour.java
@@ -0,0 +1,83 @@
+package de.verdox.mccreativelab.ai;
+
+import de.verdox.mccreativelab.ai.behaviour.AIBehaviour;
+import de.verdox.mccreativelab.ai.behaviour.MemoryStatus;
+import net.minecraft.world.entity.ai.behavior.Behavior;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.memory.MemoryKey;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class CraftAIBehaviour implements AIBehaviour<LivingEntity> {
+    private final Behavior<net.minecraft.world.entity.LivingEntity> handle;
+
+    public Behavior<net.minecraft.world.entity.LivingEntity> getHandle() {
+        return handle;
+    }
+
+    public CraftAIBehaviour(Behavior<net.minecraft.world.entity.LivingEntity> handle){
+        this.handle = handle;
+    }
+    @Override
+    public int getMinDuration() {
+        return handle.getMinDuration();
+    }
+
+    @Override
+    public int getMaxDuration() {
+        return handle.getMaxDuration();
+    }
+
+    @Override
+    public Map<MemoryKey<?>, MemoryStatus> getRequiredMemoryStates() {
+        return getBukkitRequiredMemoryKeys(handle.getEntryCondition());
+    }
+
+    @Override
+    public void start(World world, LivingEntity entity, long time) {
+        io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName());
+    }
+
+    @Override
+    public void tick(World world, LivingEntity entity, long time) {
+
+    }
+
+    @Override
+    public void stop(World world, LivingEntity entity, long time) {
+
+    }
+
+    @Override
+    public boolean canStillUse(World world, LivingEntity entity, long time) {
+        return false;
+    }
+
+    @Override
+    public boolean checkExtraStartConditions(World world, LivingEntity entity, long time) {
+        return false;
+    }
+
+    @Override
+    public Class<? extends LivingEntity> getEntityType() {
+
+        return null;
+    }
+
+    private static Map<MemoryKey<?>, de.verdox.mccreativelab.ai.behaviour.MemoryStatus> getBukkitRequiredMemoryKeys(Map<MemoryModuleType<?>, net.minecraft.world.entity.ai.memory.MemoryStatus> bukkitRequiredMemoryStates) {
+        Map<MemoryKey<?>, de.verdox.mccreativelab.ai.behaviour.MemoryStatus> map = new HashMap<>();
+        bukkitRequiredMemoryStates.forEach((memoryKey, memoryStatus) -> {
+            MemoryStatus bukkitMemoryStatus = switch (memoryStatus) {
+                case VALUE_PRESENT -> MemoryStatus.VALUE_PRESENT;
+                case VALUE_ABSENT -> MemoryStatus.VALUE_ABSENT;
+                case REGISTERED -> MemoryStatus.REGISTERED;
+            };
+            map.put(CraftMemoryKey.minecraftToBukkit(memoryKey), bukkitMemoryStatus);
+        });
+        return map;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java b/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java
index 8453178c84536b63c56af0b958046a5835a8f18a..79a4de4576c1e5ae37191d87db6e9c558f59ad72 100644
--- a/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java
+++ b/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java
@@ -6,6 +6,7 @@ import de.verdox.mccreativelab.ai.behaviour.MemoryStatus;
 import de.verdox.mccreativelab.ai.behaviour.PaperAIBehaviour;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.ai.Brain;
+import net.minecraft.world.entity.ai.behavior.Behavior;
 import net.minecraft.world.entity.ai.behavior.BehaviorControl;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.schedule.Activity;
@@ -184,21 +185,23 @@ public class CraftEntityBrain<E extends LivingEntity> implements EntityBrain<E>
             this.activity = CraftEntityActivity.bukkitToMinecraft(activity, Registries.ACTIVITY);
         }
 
+        @Override
         public CraftActivityBuilder<E> withBehaviour(int priority, AIBehaviour<E> aiBehaviour) {
-            this.behaviours.add(com.mojang.datafixers.util.Pair.of(priority, new WrappedPaperAIBehaviour<>(aiBehaviour)));
+            Behavior<net.minecraft.world.entity.LivingEntity> behavior;
+            if(aiBehaviour instanceof CraftAIBehaviour craftAIBehaviour)
+                behavior = craftAIBehaviour.getHandle();
+            else
+                behavior = new WrappedPaperAIBehaviour<>(aiBehaviour);
+            this.behaviours.add(com.mojang.datafixers.util.Pair.of(priority, behavior));
             return this;
         }
 
         @Override
-        public ActivityBuilder<E> withBehaviour(int priority, PaperAIBehaviour<E> aiBehaviour) {
-            return null;
-        }
-
         public CraftActivityBuilder<E> withRequiredMemory(MemoryKey<?> requiredMemoryKey, MemoryStatus memoryStatus) {
             requiredMemories.add(com.mojang.datafixers.util.Pair.of(CraftMemoryKey.bukkitToMinecraft(requiredMemoryKey), toNMS(memoryStatus)));
             return this;
         }
-
+        @Override
         public CraftActivityBuilder<E> withForgettingMemoriesWhenStopped(MemoryKey<?> forgettingMemoryKey) {
             forgettingMemories.add(CraftMemoryKey.bukkitToMinecraft(forgettingMemoryKey));
             return this;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 57ef7fbba3028c28231abf7b7ae78aa019323536..1728b9768e424d14ede13482407df19a0c85f304 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -127,4 +127,16 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
         STOPPED,
         RUNNING;
     }
+
+    public int getMaxDuration() {
+        return maxDuration;
+    }
+
+    public int getMinDuration() {
+        return minDuration;
+    }
+
+    public Map<MemoryModuleType<?>, MemoryStatus> getEntryCondition() {
+        return entryCondition;
+    }
 }
