From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <lukasjonsson@outlook.de>
Date: Fri, 17 Nov 2023 23:07:11 +0100
Subject: [PATCH] Implementing PotionDataChoice for custom potions


diff --git a/src/main/java/io/papermc/paper/potion/PaperPotionMix.java b/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
index 6b0bed550763f34e18c9e92f9a47ec0c945b2c8b..138686bfeffb3da394345be9e6efbf4cd1cc3359 100644
--- a/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
+++ b/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
@@ -1,13 +1,16 @@
 package io.papermc.paper.potion;
 
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.alchemy.PotionBrewing;
 import net.minecraft.world.item.crafting.Ingredient;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftRecipe;
 
-public record PaperPotionMix(ItemStack result, Ingredient input, Ingredient ingredient) {
-
+public record PaperPotionMix(ItemStack result, Ingredient input, Ingredient ingredient, int brewingTime) {
+    public PaperPotionMix(ItemStack result, Ingredient input, Ingredient ingredient){
+        this(result, input, ingredient, PotionBrewing.BREWING_TIME_SECONDS * 20);
+    }
     public PaperPotionMix(PotionMix potionMix) {
-        this(CraftItemStack.asNMSCopy(potionMix.getResult()), CraftRecipe.toIngredient(potionMix.getInput(), true), CraftRecipe.toIngredient(potionMix.getIngredient(), true));
+        this(CraftItemStack.asNMSCopy(potionMix.getResult()), CraftRecipe.toIngredient(potionMix.getInput(), true), CraftRecipe.toIngredient(potionMix.getIngredient(), true), potionMix.getBrewingTime());
     }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dbccbcb9b44e4efacdf53c2d161115cc20b36cff..ca3cfc69aa13d2c60627367b860a620300b7d4f6 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -222,6 +222,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        // MCCLab - start
+        server.getPotionBrewer().resetPotionMixes();
+        // MCCLab - end
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
diff --git a/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java b/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
index ef798adc296ae1595cfcd33fed5aa71b9ad00037..ad7bc5effeaf3165046b11cc82818e483c4d6d0d 100644
--- a/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
+++ b/src/main/java/net/minecraft/world/item/alchemy/PotionBrewing.java
@@ -1,14 +1,29 @@
 package net.minecraft.world.item.alchemy;
 
 import com.google.common.collect.Lists;
+
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.function.Predicate;
+
+import de.verdox.mccreativelab.recipe.CustomModelChoice;
+import de.verdox.mccreativelab.recipe.PotionDataChoice;
+import io.papermc.paper.potion.PaperPotionMix;
+import io.papermc.paper.potion.PotionMix;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.PotionItem;
 import net.minecraft.world.item.crafting.Ingredient;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.jetbrains.annotations.Nullable;
 
 public class PotionBrewing {
     public static final int BREWING_TIME_SECONDS = 20;
@@ -17,7 +32,7 @@ public class PotionBrewing {
     private static final it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<org.bukkit.NamespacedKey, io.papermc.paper.potion.PaperPotionMix> CUSTOM_MIXES = new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>(); // Paper
     private static final List<Ingredient> ALLOWED_CONTAINERS = Lists.newArrayList();
     private static final Predicate<ItemStack> ALLOWED_CONTAINER = (stack) -> {
-        for(Ingredient ingredient : ALLOWED_CONTAINERS) {
+        for (Ingredient ingredient : ALLOWED_CONTAINERS) {
             if (ingredient.test(stack)) {
                 return true;
             }
@@ -31,7 +46,7 @@ public class PotionBrewing {
     }
 
     protected static boolean isContainerIngredient(ItemStack stack) {
-        for(PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
+        for (PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
             if (mix.ingredient.test(stack)) {
                 return true;
             }
@@ -41,7 +56,7 @@ public class PotionBrewing {
     }
 
     protected static boolean isPotionIngredient(ItemStack stack) {
-        for(PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
+        for (PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
             if (mix.ingredient.test(stack)) {
                 return true;
             }
@@ -51,7 +66,7 @@ public class PotionBrewing {
     }
 
     public static boolean isBrewablePotion(Potion potion) {
-        for(PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
+        for (PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
             if (mix.to == potion) {
                 return true;
             }
@@ -76,7 +91,7 @@ public class PotionBrewing {
     protected static boolean hasContainerMix(ItemStack input, ItemStack ingredient) {
         Item item = input.getItem();
 
-        for(PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
+        for (PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
             if (mix.from == item && mix.ingredient.test(ingredient)) {
                 return true;
             }
@@ -88,7 +103,7 @@ public class PotionBrewing {
     protected static boolean hasPotionMix(ItemStack input, ItemStack ingredient) {
         Potion potion = PotionUtils.getPotion(input);
 
-        for(PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
+        for (PotionBrewing.Mix<Potion> mix : POTION_MIXES) {
             if (mix.from == potion && mix.ingredient.test(ingredient)) {
                 return true;
             }
@@ -109,13 +124,13 @@ public class PotionBrewing {
             Potion potion = PotionUtils.getPotion(input);
             Item item = input.getItem();
 
-            for(PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
+            for (PotionBrewing.Mix<Item> mix : CONTAINER_MIXES) {
                 if (mix.from == item && mix.ingredient.test(ingredient)) {
                     return PotionUtils.setPotion(new ItemStack(mix.to), potion);
                 }
             }
 
-            for(PotionBrewing.Mix<Potion> mix2 : POTION_MIXES) {
+            for (PotionBrewing.Mix<Potion> mix2 : POTION_MIXES) {
                 if (mix2.from == potion && mix2.ingredient.test(ingredient)) {
                     return PotionUtils.setPotion(new ItemStack(item), mix2.to);
                 }
@@ -170,6 +185,9 @@ public class PotionBrewing {
         ALLOWED_CONTAINERS.clear();
         CUSTOM_MIXES.clear();
         bootStrap();
+        for (Mix<Potion> potionMix : POTION_MIXES) {
+            addVanillaPotionBrewingToCustomList(potionMix);
+        }
     }
     // Paper end
 
@@ -242,7 +260,11 @@ public class PotionBrewing {
         } else if (!(output instanceof PotionItem)) {
             throw new IllegalArgumentException("Expected a potion, got: " + BuiltInRegistries.ITEM.getKey(output));
         } else {
-            CONTAINER_MIXES.add(new PotionBrewing.Mix<>(input, Ingredient.of(ingredient), output));
+            // MCCLab - start
+            var id = input + "_" + ingredient + "_" + output;
+            CONTAINER_MIXES.add(new PotionBrewing.Mix<>(id, input, Ingredient.of(ingredient), output));
+            //CONTAINER_MIXES.add(new PotionBrewing.Mix<>(input, Ingredient.of(ingredient), output));
+            // MCCLab - end
         }
     }
 
@@ -255,18 +277,93 @@ public class PotionBrewing {
     }
 
     private static void addMix(Potion input, Item item, Potion output) {
-        POTION_MIXES.add(new PotionBrewing.Mix<>(input, Ingredient.of(item), output));
+        // MCCLab - start
+        var id = input.getName("") + "_" + item + "_" + output.getName("");
+        POTION_MIXES.add(new PotionBrewing.Mix<>(id, input, Ingredient.of(item), output));
+        //POTION_MIXES.add(new PotionBrewing.Mix<>(input, Ingredient.of(item), output));
+        // MCCLab - end
     }
 
     static class Mix<T> {
+        private String id;
         final T from;
         final Ingredient ingredient;
         final T to;
 
-        public Mix(T input, Ingredient ingredient, T output) {
+        public Mix(String id, T input, Ingredient ingredient, T output) {
+            this.id = id;
             this.from = input;
             this.ingredient = ingredient;
             this.to = output;
         }
     }
+
+    // MCCLab - start
+    public static List<Mix<Potion>> getPotionMixes() {
+        return POTION_MIXES;
+    }
+
+    public static Object2ObjectLinkedOpenHashMap<NamespacedKey, PaperPotionMix> getCustomMixes() {
+        return CUSTOM_MIXES;
+    }
+
+    @Nullable
+    public static PotionMix findCustomMix(ItemStack input, ItemStack ingredient) {
+
+        for (Map.Entry<NamespacedKey, PaperPotionMix> namespacedKeyPaperPotionMixEntry : CUSTOM_MIXES.entrySet()) {
+            var mix = namespacedKeyPaperPotionMixEntry.getValue();
+            var key = namespacedKeyPaperPotionMixEntry.getKey();
+            if (mix.input().test(input) && mix.ingredient().test(ingredient))
+                return new PotionMix(key, mix.result().asBukkitCopy(), CraftRecipe.toBukkit(mix.input()), CraftRecipe.toBukkit(mix.ingredient()), mix.brewingTime());
+        }
+        return null;
+    }
+
+    private static PotionDataChoice createPotionDataChoice(ItemStack stack){
+        var basePotionData = ((PotionMeta)CraftItemStack.getItemMeta(stack)).getBasePotionData();
+        return new PotionDataChoice(basePotionData);
+    }
+
+    private static void addVanillaPotionBrewingToCustomList(Mix<Potion> mix) {
+        var input = mix.from;
+        var output = mix.to;
+        var itemIngredient = mix.ingredient;
+        var normalInputPotion = PotionUtils.setPotion(new ItemStack(Items.POTION), input);
+        var normalOutputPotion = PotionUtils.setPotion(new ItemStack(Items.POTION), output);
+        var splashOutputPotion = PotionUtils.setPotion(new ItemStack(Items.SPLASH_POTION), output);
+        var splashLingeringPotion = PotionUtils.setPotion(new ItemStack(Items.LINGERING_POTION), output);
+        var key = mix.id;
+        var inputPotionChoice = createPotionDataChoice(normalInputPotion);
+        var itemIngredientChoice = new CustomModelChoice(itemIngredient.getItems()[0].asBukkitMirror().getType(), 0);
+        var outputPotionChoice = createPotionDataChoice(normalOutputPotion);
+        var splashOutputPotionChoice = createPotionDataChoice(splashOutputPotion);
+        var normalMix = new PaperPotionMix(
+            normalOutputPotion,
+            CraftRecipe.toIngredient(inputPotionChoice, true),
+            CraftRecipe.toIngredient(itemIngredientChoice, true)
+        );
+        CUSTOM_MIXES.putAndMoveToFirst(new NamespacedKey("minecraft", key + "_normal"), normalMix);
+        var splashMix = new PaperPotionMix(
+            splashOutputPotion,
+            CraftRecipe.toIngredient(outputPotionChoice, true),
+            CraftRecipe.toIngredient(new CustomModelChoice(Material.GUNPOWDER, 0), true)
+        );
+        CUSTOM_MIXES.putAndMoveToFirst(new NamespacedKey("minecraft", key + "_splash"), splashMix);
+        var lingeringMix = new PaperPotionMix(
+            splashLingeringPotion,
+            CraftRecipe.toIngredient(splashOutputPotionChoice, true),
+            CraftRecipe.toIngredient(new CustomModelChoice(Material.DRAGON_BREATH, 0), true)
+        );
+        CUSTOM_MIXES.putAndMoveToFirst(new NamespacedKey("minecraft", key + "_lingering"), lingeringMix);
+    }
+
+    public static List<PotionMix> getAllPotionMixes() {
+        var list = new LinkedList<PotionMix>();
+        CUSTOM_MIXES.forEach((namespacedKey, paperPotionMix) -> {
+            var mix = new PotionMix(namespacedKey, CraftItemStack.asCraftMirror(paperPotionMix.result()), CraftRecipe.toBukkit(paperPotionMix.input()), CraftRecipe.toBukkit(paperPotionMix.ingredient()), paperPotionMix.brewingTime());
+            list.add(mix);
+        });
+        return list;
+    }
+    // MCCLab - end
 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
index c80c545689d4a08f54adea05898b05ca89e7d935..00431d5613f8dcd997505e0c06b15bb269143878 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
@@ -28,6 +28,7 @@ import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.level.ItemLike;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 
@@ -41,6 +42,7 @@ public final class Ingredient implements Predicate<ItemStack> {
     private IntList stackingIds;
     public boolean exact; // CraftBukkit
     public boolean isCustomModelChoice = true;
+    public boolean isPotionDataChoice;
     public static final Codec<Ingredient> CODEC = Ingredient.codec(true);
     public static final Codec<Ingredient> CODEC_NONEMPTY = Ingredient.codec(false);
 
@@ -93,6 +95,10 @@ public final class Ingredient implements Predicate<ItemStack> {
                         return true;
                     continue;
                 }
+                else if(isPotionDataChoice){
+                    if(itemstack1.getTag() != null && itemstack1.getTag().contains("potion") && itemstack.getTag() != null && !itemstack.getTag().contains("potion"))
+                        return PotionUtils.getPotion(itemstack).equals(PotionUtils.getPotion(itemstack1));
+                }
                 // CraftBukkit end
                 if (itemstack1.is(itemstack.getItem())) {
                     return true;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index c57efcb9a79337ec791e4e8f6671612f0a82b441..767abe95afd2437873d67d56f547b72f426d6a54 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -3,6 +3,9 @@ package net.minecraft.world.level.block.entity;
 import java.util.Arrays;
 import java.util.Iterator;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.item.ItemFormatUtil;
+import io.papermc.paper.potion.PotionMix;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
@@ -191,7 +194,11 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         } else if (flag && blockEntity.fuel > 0) {
             --blockEntity.fuel;
             // CraftBukkit start
-            BrewingStartEvent event = new BrewingStartEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack1), 400);
+            // MCCLab - start
+            var foundMix = BrewingStandBlockEntity.findPotionMix(blockEntity.items);
+            BrewingStartEvent event = new BrewingStartEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack1), foundMix == null ? 400 : foundMix.getBrewingTime(), foundMix);
+            //BrewingStartEvent event = new BrewingStartEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack1), 400);
+            // MCCLab - end
             world.getCraftServer().getPluginManager().callEvent(event);
             blockEntity.brewTime = event.getTotalBrewTime(); // 400 -> event.getTotalBrewTime()
             // CraftBukkit end
@@ -261,7 +268,11 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         }
 
         if (owner != null) {
-            BrewEvent event = new BrewEvent(CraftBlock.at(world, blockposition), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), brewResults, tileentitybrewingstand.fuel);
+            // MCCLab - start
+            var foundMix = BrewingStandBlockEntity.findPotionMix(tileentitybrewingstand.items);
+            BrewEvent event = new BrewEvent(CraftBlock.at(world, blockposition), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), brewResults, tileentitybrewingstand.fuel, foundMix);
+            //BrewEvent event = new BrewEvent(CraftBlock.at(world, blockposition), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), brewResults, tileentitybrewingstand.fuel);
+            // MCCLab - end
             org.bukkit.Bukkit.getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return;
@@ -272,7 +283,10 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         for (int i = 0; i < 3; ++i) {
             // CraftBukkit start - validate index in case it is cleared by plugins
             if (i < brewResults.size()) {
-                nonnulllist.set(i, CraftItemStack.asNMSCopy(brewResults.get(i)));
+                // MCCLab - start
+                nonnulllist.set(i, ItemFormatUtil.applyFormat(CraftItemStack.asNMSCopy(brewResults.get(i))));
+                //nonnulllist.set(i, CraftItemStack.asNMSCopy(brewResults.get(i)));
+                // MCCLab - end
             } else {
                 nonnulllist.set(i, ItemStack.EMPTY);
             }
@@ -368,4 +382,24 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     protected AbstractContainerMenu createMenu(int syncId, Inventory playerInventory) {
         return new BrewingStandMenu(syncId, playerInventory, this, this.dataAccess);
     }
+    // MCCLab - start
+    @Nullable
+    private static PotionMix findPotionMix(NonNullList<ItemStack> slots) {
+        ItemStack itemstack = (ItemStack) slots.get(3);
+        if (itemstack.isEmpty()) {
+            return null;
+        } else if (!PotionBrewing.isIngredient(itemstack)) {
+            return null;
+        } else {
+            for (int i = 0; i < 3; ++i) {
+                ItemStack itemstack1 = (ItemStack) slots.get(i);
+                var foundCustomMix = PotionBrewing.findCustomMix(itemstack1, itemstack);
+                if (!itemstack1.isEmpty() && foundCustomMix != null) {
+                    return foundCustomMix;
+                }
+            }
+            return null;
+        }
+    }
+    // MCCLab - end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
index 58409a38807da6451aeb35d1626a32c94b5db338..fb1f8a6f46d2efc81def981c05fd9964aac3f744 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
@@ -4,11 +4,13 @@ import com.google.common.base.Preconditions;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Stream;
 
 import de.verdox.mccreativelab.item.BasicItemFormat;
 import de.verdox.mccreativelab.item.ItemFormatUtil;
 import de.verdox.mccreativelab.recipe.CustomItemData;
 import de.verdox.mccreativelab.recipe.CustomModelChoice;
+import de.verdox.mccreativelab.recipe.PotionDataChoice;
 import net.minecraft.world.item.crafting.Ingredient;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
@@ -57,7 +59,12 @@ public interface CraftRecipe extends Recipe {
                                          .map(Ingredient.ItemValue::new)
             );
             stack.isCustomModelChoice = true;
-        } else {
+        }
+        else if(bukkit instanceof PotionDataChoice potionDataChoice){
+            stack = new Ingredient(Stream.of(new Ingredient.ItemValue(CraftItemStack.asNMSCopy(potionDataChoice.getItemStack()))));
+            stack.isPotionDataChoice = true;
+        }
+        else {
             throw new IllegalArgumentException("Unknown recipe stack instance " + bukkit);
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index a0b0c64b819b8f713eeea78210e276664e30e66e..ff6aa650314ea08f9725bd613157a204e7ff8a9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -6,8 +6,10 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import io.papermc.paper.potion.PotionMix;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.item.alchemy.Potion;
+import net.minecraft.world.item.alchemy.PotionBrewing;
 import org.bukkit.potion.PotionBrewer;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
@@ -66,4 +68,10 @@ public class CraftPotionBrewer implements PotionBrewer {
         net.minecraft.world.item.alchemy.PotionBrewing.reload();
     }
     // Paper end
+    // MCCLab - start
+    @Override
+    public List<PotionMix> getAllPotionMixes() {
+        return PotionBrewing.getAllPotionMixes();
+    }
+    // MCCLab - end
 }
