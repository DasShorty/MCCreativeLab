From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Wed, 13 Dec 2023 23:31:06 +0100
Subject: [PATCH] Adding BlockBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
index 1621278706f54458882135243ce2d1eb9311921d..d505b9bed5388f28869022e0d285a76b08c0eb14 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
@@ -2,8 +2,30 @@ package de.verdox.mccreativelab.behaviour;
 
 import de.verdox.mccreativelab.CustomBehaviour;
 import de.verdox.mccreativelab.MultiCustomBehaviour;
+import de.verdox.mccreativelab.random.CraftVanillaRandomSource;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.util.RayTraceResult;
+import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Locale;
 import java.util.function.Function;
 import java.util.function.Supplier;
 
@@ -25,4 +47,97 @@ public class BehaviourUtil {
             return defaultValue;
         return logicFunction.apply(customBehaviour.getBehaviour());
     }
+
+    public static boolean isVanillaRandomTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.randomTick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isStepOnLogicReplaced(Level world, BlockPos pos, BlockState state, Entity entity){
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.stepOn(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), entity.getBukkitEntity()));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isVanillaTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.tick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isRandomlyTicking(BlockState blockState, boolean vanillaValue) {
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockDataRandomlyTicking(blockState.createCraftBlockData()));
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState, boolean vanillaValue){
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockRandomlyTicking(world.getWorld().getBlockAt(x,y,z), blockState.createCraftBlockData()));
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, boolean vanillaValue){
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if(!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        });
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, Supplier<Boolean> vanillaLogic){
+        return BehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if(!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        }, vanillaLogic);
+    }
+
+    public static void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify));
+    }
+
+    public static float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState, float vanillaValue){
+        return BehaviourUtil.evaluate(new BehaviourResult.Object<Float>(0f, BehaviourResult.Object.Type.USE_VANILLA), BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> {
+            if(!(world instanceof ServerLevel serverLevel))
+                return new BehaviourResult.Object<>(0f, BehaviourResult.Object.Type.USE_VANILLA);
+            Block block = ((ServerLevel) world).getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+            return blockBehaviour.getExplosionResistance(block, blockState.createCraftBlockData());
+        }).returnRightValue(vanillaValue);
+    }
+
+    public static void onRemoveCallback(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onRemove(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), newState.createCraftBlockData(), state.createCraftBlockData(), moved));
+    }
+
+    public static void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = switch (hit.getDirection()) {
+                case DOWN -> BlockFace.DOWN;
+                case UP -> BlockFace.UP;
+                case NORTH -> BlockFace.NORTH;
+                case SOUTH -> BlockFace.SOUTH;
+                case WEST -> BlockFace.WEST;
+                case EAST -> BlockFace.EAST;
+            };
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation()
+                                                                                                    .y(), hit
+                .getLocation().z()), block, blockFace);
+            return blockBehaviour.onUse(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        });
+    }
+
+    private static Material getMaterial(BlockState blockState) {
+        Material material;
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isReady())
+            material = blockState.getBukkitMaterial();
+        else
+            material = Material.getMaterial(BuiltInRegistries.BLOCK.getKey(blockState.getBlock()).getPath()
+                                                                   .toUpperCase(Locale.ROOT));
+        return material;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dbccbcb9b44e4efacdf53c2d161115cc20b36cff..64c6fcb01739f59d79f828969f9083a593c5767a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -272,6 +272,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache(); // MCCLab
         // CraftBukkit end
 
         // Paper start
diff --git a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
index 44c3f0ceea4b4464873302ecdc53f7eb1cc83052..0f1cec080489059b90c549f11e140943d6384318 100644
--- a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
+++ b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
@@ -7,7 +7,7 @@ import net.minecraft.world.level.material.FluidState;
 
 public class ExplosionDamageCalculator {
     public Optional<Float> getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState) {
-        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(), fluidState.getExplosionResistance()));
+        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(world, pos, blockState), fluidState.getExplosionResistance()));
     }
 
     public boolean shouldBlockExplode(Explosion explosion, BlockGetter world, BlockPos pos, BlockState state, float power) {
diff --git a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
index 01b4cf48901aaac897b8def284bf3e2c1cea3570..552b88ee374c1b3fa42f06bf78d4083c0cce583d 100644
--- a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
@@ -61,9 +61,11 @@ public class AmethystClusterBlock extends AmethystBlock implements SimpleWaterlo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index fd0143944e4fecaf6f1ffa4561702178431575e9..83c25d366728e5dc46f2e2990473eb1e653078d7 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -38,6 +38,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.growBamboo(world, pos);
         }
@@ -46,7 +47,9 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index 05a508cb457b67078ccb08bd2228a59e73701cf3..3205767f4902146ba3f70fbddffb7cf034564de5 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -113,6 +114,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -126,6 +128,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
@@ -140,7 +143,9 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BannerBlock.java b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
index 09451bc19b65e09c85389d597625dcc2b6f715c5..b7784536306d83132d94765238baa7c23ffd3bc9 100644
--- a/src/main/java/net/minecraft/world/level/block/BannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
@@ -31,7 +31,9 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
index 3d2b34c5a7c9b00c1164b4f89c2cbff81fc460eb..a8b059db1ae7b19ecc6f4b1cb8a56fe10e630812 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
@@ -71,8 +71,10 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index 94e7a53fb6792d490246c7f2aec8a7f47f2ef493..acbbb13941c25149bd97189ae35fc750d3192218 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -58,10 +58,12 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index ee4b3ac212483995bb8ae990bebfb8aa2fbe86a5..cc8994a6b0592aca4dfd19aa7c202f6544f85582 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -55,13 +55,16 @@ public abstract class BasePressurePlateBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return canSupportRigidBlock(world, blockposition1) || canSupportCenter(world, blockposition1, Direction.UP);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = this.getSignalForState(state);
 
         if (i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index 547d09c3a1cd0c5401aacb78886896365ba192e7..4600c2a75614d3bda8dd3ee81caefc2cf7e09a9e 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -50,7 +50,9 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportRigidBlock(world, pos.below());
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 2bd714466fb86d4013bd3bceddecba19ce98df08..b64f43291f5aaf637579ca3f4b4f7d9a7b6c0768 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -41,6 +41,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 2774c32bd62255e8902d23e986c8d3e13ccddc7f..6f86470ddb900c4b882c29a9c10d147a7f64d047 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -230,10 +230,12 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = BellBlock.getConnectedDirection(state).getOpposite();
 
         return enumdirection == Direction.UP ? Block.canSupportCenter(world, pos.above(), Direction.DOWN) : FaceAttachedHorizontalDirectionalBlock.canAttach(world, pos, enumdirection);
-    }
+        });
+        }
 
     private static Direction getConnectedDirection(BlockState state) {
         switch ((BellAttachType) state.getValue(BellBlock.ATTACHMENT)) {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 54cf35b0c48d96ecfb27ff13cd685c16a1cd616b..49562046a12914a84533bb1629b4a27a52cb3e9a 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -123,11 +123,13 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
@@ -194,6 +196,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
index 06f353e28ef6a9e7efc4c2fe383284fd651e0486..2472151ebe951f512f45ad80c2d207cd1c5f7e72 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
@@ -62,11 +62,13 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         BlockState blockState = world.getBlockState(blockPos);
         BlockState blockState2 = world.getBlockState(pos.above());
         return (blockState.is(this) || blockState.is(BlockTags.BIG_DRIPLEAF_PLACEABLE)) && (blockState2.is(this) || blockState2.is(Blocks.BIG_DRIPLEAF));
-    }
+        });
+        }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
         BlockState blockState = Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER))).setValue(FACING, direction);
@@ -88,6 +90,7 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index d4cbff18adb62073a1dceb189043789620af6877..3f56251c3e7f7c3ea6e8b44895a8dbe82973860a 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -403,13 +403,21 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     }
 
+    // MCCLab start - Add BlockBehaviour
+    public float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState){
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.getExplosionResistance(world, pos, blockState, getExplosionResistance());
+    }
+    // MCCLab end - Add BlockBehaviour
+
     public float getExplosionResistance() {
         return this.explosionResistance;
     }
 
     public void wasExploded(Level world, BlockPos pos, Explosion explosion) {}
 
-    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {}
+    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity); // MCCLab start - Adding BlockBehaviour
+    }
 
     @Nullable
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index ed36a378b79f62c3dce3da637a337595415f14ac..a27c546cf04978085d5be93e8421949d4a6b8b7c 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -60,6 +60,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         updateColumn(world, pos, state, world.getBlockState(pos.below()));
     }
 
@@ -135,9 +136,11 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState blockState = world.getBlockState(pos.below());
         return blockState.is(Blocks.BUBBLE_COLUMN) || blockState.is(Blocks.MAGMA_BLOCK) || blockState.is(Blocks.SOUL_SAND);
-    }
+        });
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 2548244c089dff583c8c424dcaa5504caedf3f10..f8fabad3dac609677a9e28f39ece8f82322f9e4e 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -19,6 +19,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(5) == 0) {
             Direction enumdirection = BuddingAmethystBlock.DIRECTIONS[random.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
             BlockPos blockposition1 = pos.relative(enumdirection);
diff --git a/src/main/java/net/minecraft/world/level/block/BushBlock.java b/src/main/java/net/minecraft/world/level/block/BushBlock.java
index 03fde6e47c4a347c62fe9b4a3351769aedf874f6..96c787655a9ec0f3d070d60d24e54c9f5b5f3c89 100644
--- a/src/main/java/net/minecraft/world/level/block/BushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BushBlock.java
@@ -34,9 +34,11 @@ public class BushBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockPos blockposition1 = pos.below();
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockPos blockposition1 = pos.below();
 
-        return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+            return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 3e792514d042f05ff6848b7d6506472ace67b67a..7a63fe7687279bab5d45b67174ae865a71b5f773 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -174,6 +174,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             this.checkPressed(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 0003fb51ae3a6575575e10b4c86719f3061e2577..e55b30ecf2e96be647317e62ceccdd8d8662bea6 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -37,6 +37,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1)) {
@@ -93,6 +95,7 @@ public class CactusBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         Direction enumdirection;
@@ -110,6 +113,7 @@ public class CactusBlock extends Block {
         } while (!iblockdata1.isSolid() && !world.getFluidState(pos.relative(enumdirection)).is(FluidTags.LAVA));
 
         return false;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 397b8945bd0c2f413b17ba95cfb31befca252595..9272240377299d11e32a07d450f33ec503b386d4 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -118,8 +118,10 @@ public class CakeBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
-    }
+        });
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/CandleBlock.java b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
index ff575d3d369340f4ec0d61cc4dea144432ea3690..6d8fec885878ee6dfdac25da7ec0c448f169e099 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
@@ -155,6 +155,8 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
index 29cf6571ef738823e52d7e18400fcb9f51308114..b0afa088b6e7f90f6b07748092b7bc51de2e9913 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
@@ -92,7 +92,9 @@ public class CandleCakeBlock extends AbstractCandleBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
index db687aff597df22913b8764ec2cd28976b66e061..b74b71b3a19f489428033172cd90ba829522822d 100644
--- a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
@@ -29,6 +29,8 @@ public class CarpetBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return !world.isEmptyBlock(pos.below());
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
index 0bd8ea3143b2e9755d492af4596622d1dca1afaf..4f3b6f2513df0c41e495c754dfd25f790e0ce764 100644
--- a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -70,8 +70,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.above()).isFaceSturdy(world, pos.above(), Direction.DOWN, SupportType.CENTER);
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 5e22d175b1048a58802cdf64ac70a8b56329e915..63758e9c3bc4aaa27e57871b6baa479a9fa45ea2 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -415,6 +415,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof ChestBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index e9beebedf1d60e06e16c442b64d28d022a3e3164..3e5916340cb03bdf1d8046607aa710ca89b51661 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -37,6 +37,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -55,6 +56,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
@@ -178,6 +180,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         if (!iblockdata1.is((Block) this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
@@ -207,6 +210,7 @@ public class ChorusFlowerBlock extends Block {
         } else {
             return true;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index 2e8bf4463b8da8da50cd14d3f84aba5e930e5710..cf9ee483f00e9df83a7a543eff273983a140dfa2 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -49,6 +49,7 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
@@ -58,26 +59,29 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return true; // Paper - add option to disable block updates
-        BlockState blockState = world.getBlockState(pos.below());
-        boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates)
+                return true; // Paper - add option to disable block updates
+            BlockState blockState = world.getBlockState(pos.below());
+            boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
 
-        for(Direction direction : Direction.Plane.HORIZONTAL) {
-            BlockPos blockPos = pos.relative(direction);
-            BlockState blockState2 = world.getBlockState(blockPos);
-            if (blockState2.is(this)) {
-                if (bl) {
-                    return false;
-                }
+            for (Direction direction : Direction.Plane.HORIZONTAL) {
+                BlockPos blockPos = pos.relative(direction);
+                BlockState blockState2 = world.getBlockState(blockPos);
+                if (blockState2.is(this)) {
+                    if (bl) {
+                        return false;
+                    }
 
-                BlockState blockState3 = world.getBlockState(blockPos.below());
-                if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
-                    return true;
+                    BlockState blockState3 = world.getBlockState(blockPos.below());
+                    if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
+                        return true;
+                    }
                 }
             }
-        }
 
-        return blockState.is(this) || blockState.is(Blocks.END_STONE);
+            return blockState.is(this) || blockState.is(Blocks.END_STONE);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index f5c42fee3ec68a7a9260f01d19c7a1d7533bad9c..96b625e9fcee4759c1da87605de84035ff944fb6 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -51,6 +51,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
@@ -63,9 +64,11 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
 
         return iblockdata1.is(BlockTags.JUNGLE_LOGS);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 2e7c03b00bc941b86df6a7f1b2b188c9f0aede22..651b4d0bab4f663308afa4d4fd2284cca99f46b3 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -83,6 +83,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 16174c573b1acd1e1a75dba9305994ed37fe6c72..5ac48d74be182675acae3aee1d499eac05354aaf 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -182,6 +182,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.refreshOutputState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 10d3912ef043eefdf89105332e29b0d2bf4a5539..fac4a6aa77078869c89f29658c1d66d4c788c9d5 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -358,6 +358,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
             world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
             world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..b622a6ecf16ed506cb1d8dbd17484febac6f61f8 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -24,6 +24,7 @@ public class CoralBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 86e58786c8a4caa965ea63aff50a13ae61da8c1c..a34affd33c1ab5bfa94091d851ec93fb14431386 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -27,6 +27,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index f980e31c4b6ba396be6ef317cffe027004a090e0..9ba6f6750bdfc6372768de0dfa643dfa7653fd7a 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -32,6 +32,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index f759ad7b49244a91aca4d36db2980267d46e1c23..673181e7bc4f90fdb89d942c3e686d0ab92bdb1e 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -27,6 +27,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 6365ddea0c23bc5d4009d98915f2b39aed2a0328..6a5928d736ee098c422801dc068610e4c840ab38 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -70,6 +70,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
 
@@ -162,7 +163,9 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return CropBlock.hasSufficientLight(world, pos) && super.canSurvive(state, world, pos);
+        });
     }
 
     protected static boolean hasSufficientLight(LevelReader world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 05dfb1790a292f9f85b641377c2ca3675726c127..470acb9d314750fc4baac304c5ecd3cf4b0d9fee 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -54,6 +54,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
             this.checkPressed(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 0f513bc36ed62a8eff1be874de61f47888739ec8..cfdb93e6aac1da54eb22e57379265b52105422bd 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -37,9 +37,11 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return this.canSurviveOn(world, blockposition1, world.getBlockState(blockposition1));
+        });
     }
 
     protected boolean canSurviveOn(LevelReader world, BlockPos pos, BlockState state) {
@@ -48,6 +50,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isLocked(world, pos, state)) {
             boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
             boolean flag1 = this.shouldTurnOn(world, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
index 1ec9bad118dee4ad072242c1b47c82ad74760aca..59c758a03af44c238e82ecb2419042826ec4e105 100644
--- a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
@@ -44,6 +44,7 @@ public class DirtPathBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // CraftBukkit start - do not fade if the block is valid here
         if (state.canSurvive(world, pos)) {
             return;
@@ -54,9 +55,11 @@ public class DirtPathBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 9b1e51c1d95da885c80c6d05000d83436b7bcfb4..cec180976bdf93fcaf6262153b054acd89361fa5 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -127,6 +127,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.dispenseFrom(world, state, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index c028a7158e41a0754abb8e24dcd647633fbf3fe8..3017b990ccce3f8e77d5f4225158fcffaeeeca24 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -220,11 +220,13 @@ public class DoorBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is((Block) this);
-    }
+        });
+        }
 
     private void playSound(@Nullable Entity entity, Level world, BlockPos pos, boolean open) {
         world.playSound(entity, pos, open ? this.type.doorOpen() : this.type.doorClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index 030b38d5d5d2578d6ef482a239ef58787efa3b08..ab4a84bf8fb9b994f94dbca4dc4f2f6dcafd2dc3 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -55,6 +55,7 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(DoublePlantBlock.HALF) != DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -62,6 +63,7 @@ public class DoublePlantBlock extends BushBlock {
 
             return iblockdata1.is((Block) this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
         }
+        });
     }
 
     public static void placeAt(LevelAccessor world, BlockState state, BlockPos pos, int flags) {
diff --git a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
index 9d889080be6d5b4b679fa9a2bd46ad8fd2ad1e77..66a1ce8515fa3c6f7ad51307ebc0fda6e0077123 100644
--- a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
@@ -21,8 +21,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canAttach(world, pos, getConnectedDirection(state).getOpposite());
-    }
+        });
+        }
 
     public static boolean canAttach(LevelReader world, BlockPos pos, Direction direction) {
         BlockPos blockPos = pos.relative(direction);
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 5946f06f63b5694034bd027984a4925b0831d439..1c74e5196dea93f42fe5137ecc785da0c40d1cdd 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -54,10 +54,12 @@ public class FarmBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock || iblockdata1.getBlock() instanceof MovingPistonBlock;
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -76,6 +78,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             FarmBlock.turnToDirt((Entity) null, state, world, pos);
         }
@@ -84,6 +87,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 4002e0fffb60556e7af1aeff71b4be244f02b0f5..043e95c0aeba74b92cdeeea23270b79b1212e4d4 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -158,13 +158,16 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return world.getBlockState(blockposition1).isFaceSturdy(world, blockposition1, Direction.UP) || this.isValidFireLocation(world, pos);
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world)); // Paper
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index bebcdc70c4cb01764428836fff76f03b94f2eae8..a30a065eb3f92461ca040e24a490b1d514689303 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -43,8 +43,10 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return mayPlaceOn(world, pos.below());
-    }
+        });
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -62,6 +64,7 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.canSurvive(state, world, pos)) {
             this.destroyBlock(world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index a3af96b2518b41f370d09cfda26dc589b9ee977b..e9549800b45c94a4fc858ca16f8cc9cc24d4d912 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -27,11 +27,13 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!world.paperConfig().environment.frostedIce.enabled) return; // Paper - add ability to disable frosted ice
         if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
diff --git a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
index c6a5d917616ef57c9ea949acae20db045bb4407b..42b0facd05a44f90b605aa9a1904c69c265b7e1e 100644
--- a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
@@ -145,8 +145,10 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return true;
-    }
+        });
+        }
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
index bac57e5234182315a66c9726490a233cb9d99181..c10d24dd40b4affb93f5e1cc4ce6fc70cb7353e0 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
@@ -39,6 +39,7 @@ public abstract class GrowingPlantBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.relative(this.growthDirection.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         if (!this.canAttachTo(blockState)) {
@@ -46,7 +47,8 @@ public abstract class GrowingPlantBlock extends Block {
         } else {
             return blockState.is(this.getHeadBlock()) || blockState.is(this.getBodyBlock()) || blockState.isFaceSturdy(world, blockPos, this.growthDirection);
         }
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index b325fdec8eb99ce57152a5c0fefa5059685276e4..32c434defac892d5205669a485d0ac85279d73c7 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -40,6 +40,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // Spigot start
         int modifier;
         if (this == Blocks.KELP) {
diff --git a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
index 664ff099fd6f44b4bc2e23d06afe8006931f1aa6..39e5e15f3202c930155d3ca8b5dc61e0a9b5099a 100644
--- a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
@@ -50,10 +50,12 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.above();
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, Direction.DOWN);
-    }
+        });
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index 04089e6f7d6e3d532b00585870283922b6be5246..cba69f8fe89406b03536806e179b46cb97fc1308 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -49,6 +49,7 @@ public class IceBlock extends HalfTransparentBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/LadderBlock.java b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
index 6bcc83245e8046518921b82d948d45900ae0c8db..c7624727cfcb07002f85d015295db1a1ef0e42a8 100644
--- a/src/main/java/net/minecraft/world/level/block/LadderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
@@ -54,9 +54,11 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         return this.canAttachTo(world, pos.relative(direction.getOpposite()), direction);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LanternBlock.java b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
index da143e1d162855e99e7c1bc8db55a8c217f3a3dc..8ace80a4c67dbf7e888006214444c5e970e1b011 100644
--- a/src/main/java/net/minecraft/world/level/block/LanternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
@@ -59,8 +59,10 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = getConnectedDirection(state).getOpposite();
         return Block.canSupportCenter(world, pos.relative(direction), direction.getOpposite());
+        });
     }
 
     protected static Direction getConnectedDirection(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index ebee1dfdb1d75381de847834262a66b45fd9f0ce..675ab46fb914e79a66772a054963d1b62e6f4af1 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -50,6 +50,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.decaying(state)) {
             // CraftBukkit start
             LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
@@ -71,6 +72,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, LeavesBlock.updateDistance(state, world, pos), 3);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 2da67bd990b3f3762dfe089bf543cebac66378db..bb2d89a96a4befbaddb90b3c0b007fae72e1a347 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -191,6 +191,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         LecternBlock.changePowered(world, pos, state, false);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index da3b301a42a93c891d083a6e02d1be8ed35adf1d..f3fc3ca1d537d020870bfa0ab34ded977ce43ffb 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -106,6 +106,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
         this.updateNeighbours(state, world, pos);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 4a1830f85f47014da63e4584f411d13f0f0cd8b3..b76645f5a7eb75e6a7f1f5e6f8d93a5e1f77895c 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -65,6 +65,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         state.getFluidState().randomTick(world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
index 1b766045687e4dcded5cbcc50b746c55b9a34e22..0769ff9b75a22a039868852e1bc8e1d31b476201 100644
--- a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
@@ -22,6 +22,7 @@ public class MagmaBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
             entity.hurt(world.damageSources().hotFloor(), 1.0F);
@@ -33,6 +34,7 @@ public class MagmaBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
@@ -48,5 +50,6 @@ public class MagmaBlock extends Block {
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         world.scheduleTick(pos, (Block) this, 20);
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onPlaceCallback(state, world, pos, oldState, notify); // MCCLab - Add Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index cf240750aecc57d287efc986b471e66a860850ee..e564320478486314f1ff6697f1c20327e4a7dfcf 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -69,8 +69,10 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return isHanging(state) ? world.getBlockState(pos.above()).is(Blocks.MANGROVE_LEAVES) : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
@@ -88,6 +90,7 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!isHanging(state)) {
             if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper
                 this.advanceTree(world, pos, state, random);
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
index 51103a88432275b2e5d4351430fea022dbca34de..248a7449ffefb7b8a63079439467a9af131d97e2 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
@@ -128,6 +128,7 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         boolean bl = false;
 
         for(Direction direction : DIRECTIONS) {
@@ -142,6 +143,7 @@ public abstract class MultifaceBlock extends Block {
         }
 
         return bl;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 302c5a6401facf192677b89cc0e9190bb35b1229..747a2ec9a816b93783303f34cf23440fda898892 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -39,6 +39,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = 5;
             boolean flag = true;
@@ -80,11 +81,13 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is(BlockTags.MUSHROOM_GROW_BLOCK) ? true : world.getRawBrightness(pos, 0) < 13 && this.mayPlaceOn(iblockdata1, world, blockposition1);
-    }
+        });
+        }
 
     public boolean growMushroom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
         Optional<? extends Holder<ConfiguredFeature<?, ?>>> optional = world.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(this.feature);
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index a6ab0d0defc05e56a91084c49897059670a1324b..33c14d1070d8bc9a0a7422847fe437f2db6b37ff 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -52,6 +52,7 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.dimensionType().natural() && world.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
             while (world.getBlockState(pos).is((Block) this)) {
                 pos = pos.below();
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index e55720c4d2fbdf6aae526910e87a67c29cf906fd..3d0c1031ced4175df50acf336294296dc5b56d30 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -42,6 +42,7 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index 47a3a9e0f0ba4f8a00828874e73d501d18f0ae1c..0e659a4c08b4722d6c186b031ae3c2611153e030 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -32,6 +32,7 @@ public class NyliumBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!NyliumBlock.canBeNylium(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.NETHERRACK.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 7b45d6b9a005036ca5051d089a7be792eb87012f..4920485cf26809942b99184b25b2b395d321ca88 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -41,6 +41,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ObserverBlock.POWERED)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 1641453fd17938bc8fcdba7f89a0515ebeef20c5..02adcac014d41fab53ca47bcdd20b8028d31e8b7 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -71,8 +71,10 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return isLower(state) && !sufficientLight(world, pos) ? false : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
@@ -111,6 +113,7 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper
         if (bl) {
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index cd943997f11f5ea5c600fdc6db96043fb0fa713c..d987a5e53aa30eab1fe1607040ea7cba5a7b28e1 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -90,8 +90,10 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
@@ -167,6 +169,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (PointedDripstoneBlock.isStalagmite(state) && !this.canSurvive(state, world, pos)) {
             world.destroyBlock(pos, true);
         } else {
@@ -177,6 +180,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         PointedDripstoneBlock.maybeTransferFluid(state, world, pos, random.nextFloat());
         if (random.nextFloat() < 0.011377778F && PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
             PointedDripstoneBlock.growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 06760ff3d20bcfdc30f3f3ee65bc2a0d12d28aff..297ef7a8106c57d8854954ce652a33dd6a518397 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -42,6 +42,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             // CraftBukkit start
             if (entity instanceof Player) {
@@ -95,6 +96,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 2b054439b7a763d5a3fbb5dbfe197cb9a9a3525c..d420036af50eb638561193afd623dd4f397a60c5 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -242,10 +242,12 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return this.canSurviveOn(world, blockposition1, iblockdata1);
+        });
     }
 
     private boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 64136745aad7ddbfdfbb8040832a58422d24e8ae..95c7f47fe50865fdb082ec87cb1773464e71c012 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -50,6 +50,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index c91535f6c0bbc870fad7e04b9d341783cfcbbd63..ad05ae1e850130c2ca5567b9091735ee1b7813c6 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -72,6 +72,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         boolean flag = this.hasNeighborSignal(world, pos, state);
         // Paper start
         java.util.ArrayDeque<RedstoneTorchBlock.Toggle> redstoneUpdateInfos = world.redstoneUpdateInfos;
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
index e5a4525ae64454ec1400de1e4e7945b2caa675f8..96ecea1a9fe47467bcf97ecd261870c90da56b09 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
@@ -38,7 +38,9 @@ public class RedstoneWallTorchBlock extends RedstoneTorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Blocks.WALL_TORCH.canSurvive(state, world, pos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 53ac4e618fec3fe384d8a106c521f3eace0b5b35..395791ee65b091d9f3dadf860fc4fa7220bee9be 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -42,10 +42,10 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.advanceTree(world, pos, state, random);
         }
-
     }
 
     public void advanceTree(ServerLevel world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index e9358522e526505d5c200e19b193bbcf5ee10826..cae7df90683600a9a3fcc6449a3a8bc07f4402a0 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -93,6 +93,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = ScaffoldingBlock.getDistance(world, pos);
         BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, pos, i));
 
@@ -110,7 +111,9 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return ScaffoldingBlock.getDistance(world, pos) < 7;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 031398e6afeec4c9db64a25fc0f55e5a5baa0990..561fb39a43beb6c29ae6f472c27f8511f89d13b8 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -35,6 +35,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, false), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 2ccbf171089ed4d166428445fdfdf1262c1dd65d..90b990a0744ed03606d5b4721b22dc4d975230bd 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -83,6 +83,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
             if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
                 world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
@@ -98,6 +99,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!world.isClientSide() && SculkSensorBlock.canActivate(state) && entity.getType() != EntityType.WARDEN) {
             // CraftBukkit start
             org.bukkit.event.Cancellable cancellable;
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index 02d01eabb9606ae8c3b76ad9fa4bb9a525e247b1..885dde2f6829f49793384aef6fa5a1d18b58f8f8 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -51,6 +51,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
             ServerPlayer entityplayer = SculkShriekerBlockEntity.tryGetPlayer(entity);
@@ -83,6 +84,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, false), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
diff --git a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
index 51c464065e506df3ad16d4118b619fed8cf1b303..6afdd2987b154d97a97cf1e6e7b26066555f1137 100644
--- a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
@@ -61,8 +61,10 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return this.mayPlaceOn(world.getBlockState(blockPos), world, blockPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
index ff1121e12e4d74a0c23dca4ee9d741e6d4d7d305..141b75cdecca9ecf0431c89efd43b54f7ddc606d 100644
--- a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
@@ -70,6 +70,7 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -77,6 +78,7 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
             BlockState blockState = world.getBlockState(blockPos);
             return this.mayPlaceOn(blockState, world, blockPos);
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
index 16c5be04658a66ff94f2aad8782e34f450e9a729..cb063f9ba707a3c28068bf8f734a940ba5174047 100644
--- a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
@@ -64,6 +64,7 @@ public class SnifferEggBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isReadyToHatch(state)) {
             // Paper start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(HATCH, Integer.valueOf(this.getHatchLevel(state) + 1)), 2)) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 14e00c7feb1c051d56a3d27cd00dcef072dd771a..20a5054f8d4061a51eef3a561191926e99681e61 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -79,10 +79,12 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 8);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
@@ -91,6 +93,7 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
index 853890258cbe12221b588ff37a3a28fdf3f55520..9a9df5945d725c9f781af8bcb81296e27c9fdcce 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
@@ -20,7 +20,9 @@ public class SoulFireBlock extends BaseFireBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSurviveOnBlock(world.getBlockState(pos.below()));
+        });
     }
 
     public static boolean canSurviveOnBlock(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
index 46fffca9563f7d665df54a3d9cabed1dda67ee6e..861e4bd825b00dd9da50c557ae0fc273c7e1a29e 100644
--- a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
@@ -26,7 +26,9 @@ public class SporeBlossomBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.above(), Direction.DOWN) && !world.isWaterAt(pos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index 9bbb9f8e917288bb0d11661a1399a05631ebcce0..2a6a34f6078f6556db62a2dc1f3b2d872fa72ae1 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -51,6 +51,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this instanceof GrassBlock && world.paperConfig().tickRates.grassSpread != 1 && (world.paperConfig().tickRates.grassSpread < 1 || (MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.grassSpread != 0)) { return; } // Paper
         // Paper start
         net.minecraft.world.level.chunk.ChunkAccess cachedBlockChunk = world.getChunkIfLoaded(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/StairBlock.java b/src/main/java/net/minecraft/world/level/block/StairBlock.java
index 827713a332baa6d280cd61d40faf8f6243b3b08c..6b30dddada3fa9a56eb297cc93e9b4c020f428bf 100644
--- a/src/main/java/net/minecraft/world/level/block/StairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StairBlock.java
@@ -139,6 +139,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         this.base.stepOn(world, pos, state, entity);
     }
 
@@ -149,11 +150,13 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.randomTick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.tick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
index 51dc1a0e572c7a1bdef99d7cf69ebe699702cc49..1b6d21db5b910a8a9f2e5ce96e20a5ccbf7263e2 100644
--- a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
@@ -25,7 +25,9 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 0d9be3b28ba4957c3f4da5455283fca903836c91..3b8eaf9ebcb0aef1ea5dc1ffe092a0bbca37212c 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -50,6 +50,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c3f500580d257e1397f2eb7c47b063a6fe6bb405..4eaac803681bb044efb409545b469e07d10615bd 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -37,6 +37,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.isEmptyBlock(pos.above())) {
             int i;
 
@@ -78,28 +80,30 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState iblockdata1 = world.getBlockState(pos.below());
-
-        if (iblockdata1.is((Block) this)) {
-            return true;
-        } else {
-            if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
-                BlockPos blockposition1 = pos.below();
-                Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    Direction enumdirection = (Direction) iterator.next();
-                    BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
-                    FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
-
-                    if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
-                        return true;
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState iblockdata1 = world.getBlockState(pos.below());
+
+            if (iblockdata1.is((Block) this)) {
+                return true;
+            } else {
+                if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
+                    BlockPos blockposition1 = pos.below();
+                    Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
+
+                    while (iterator.hasNext()) {
+                        Direction enumdirection = (Direction) iterator.next();
+                        BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
+                        FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
+
+                        if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
+                            return true;
+                        }
                     }
                 }
-            }
 
-            return false;
-        }
+                return false;
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 34eb7ba1adb51e394bf46a6f643db3529626d9ec..e7836fd3e1a725f9d2084131c18833f4e144d6f2 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -64,6 +64,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
index ecc58329ca169a8f3ae813ddcbc58a2e28fd837c..bb6c356777b337cfadb23c644e9d5d95d8c295ef 100644
--- a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
@@ -60,6 +60,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             BlockState blockState = world.getBlockState(pos.below());
             return blockState.is(this) && blockState.getValue(HALF) == DoubleBlockHalf.LOWER;
@@ -67,6 +68,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
             FluidState fluidState = world.getFluidState(pos);
             return super.canSurvive(state, world, pos) && fluidState.is(FluidTags.WATER) && fluidState.getAmount() == 8;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 69eaf1341d282c4783dab84533ea2c053deed529..590160bb7b1b7263a264ac226d63515313218457 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -96,6 +96,7 @@ public class TargetBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (state.getValue(OUTPUT_POWER) != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TorchBlock.java b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
index 6f85a193e7661cfa61ad169aae1477bc07c9a9ff..eff5ff8b79b5d561da693c05ed0ac1bff77048be 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
@@ -36,7 +36,9 @@ public class TorchBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 092759184adbf27ce942a148169e60d3a28c2cc7..a073c21273353e68090485e1dffe04385f5e3f7a 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -58,6 +58,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index cb2ff8d94308c637a498d2737f86f6af4c9c1b83..5bd62b113965e494d9824a62a6196ce0e992d5fe 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -144,6 +144,7 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
         if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
             this.checkPressed(world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 004dce26ff073f1de52a84cd425c4f60fdab5e50..be12817aacd64a2833fb96827f782b12243aacbe 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -64,12 +64,14 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return enumdirection.getAxis().isHorizontal() && iblockdata1.isFaceSturdy(world, blockposition1, enumdirection);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
@@ -207,6 +209,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 07157822659288e76b2fba34db8d5d566506f33b..20cd165dde3e1e472cb5c8e9aeb2b6bc688da6fa 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -51,6 +51,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             this.destroyEgg(world, state, pos, entity, 100);
         }
@@ -105,6 +106,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
             int i = (Integer) state.getValue(TurtleEggBlock.HATCH);
 
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 698ef6ee1c8d08bb38e2775804c1333222b0d73d..873de44202156f0c9a4dc181fda602927e7fb25d 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -87,7 +87,9 @@ public class VineBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return this.hasFaces(this.getUpdatedState(state, world, pos));
+        });
     }
 
     private boolean hasFaces(BlockState state) {
@@ -177,6 +179,7 @@ public class VineBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
             if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
                 Direction enumdirection = Direction.getRandom(random);
diff --git a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
index e6719fc04011b9d9378eef128701a289b4507a1f..832936283894fc457c14c0328ab7c177c8e32ebe 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
@@ -33,7 +33,9 @@ public class WallBannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
index 0065941d41830309a27eed7643b213b0215d395e..c482de0445e0c2afe93fc64d0b3a8f067a910d8c 100644
--- a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
@@ -45,7 +45,9 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
index 5f8d2d9e0763c50ec1ca3e06a71f7ecf35d4c46a..f3be0910553e388bec74b73d49b8bc888300987b 100644
--- a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
@@ -47,10 +47,12 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> { // MCClab start - Add Block behaviour
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
index 37d7fb85a05521e4acb6a79997b661c1895bb7ed..c80496748a5c484d254aef22e9cd32f5f78d523e 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperSlabBlock extends SlabBlock implements WeatheringCo
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
index 728a607bb28f10955397744970554efe297ea5ca..b08995c375631737b669d14b5198fed1bdda12e1 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperStairBlock extends StairBlock implements Weathering
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index 6091e3c3adbcc92c9ca438c301a99f646e3cb549..589cc6412f1d6cb9c18c27de49e1625e385d6451 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -131,9 +131,11 @@ public class PistonHeadBlock extends DirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
-        return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
-    }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
+            return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
+        });
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e6a4a5898ffdcb2aa2bc01371a6d7dbc06d610ce..f05ef25fd42629310e6ea5bf8b9c76af51888710 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -13,6 +13,7 @@ import java.util.function.Predicate;
 import java.util.function.ToIntFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -163,12 +164,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
-
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onRemoveCallback(state, world, pos, state, moved); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
     @Deprecated
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onUseCallback(state, world, pos, player, hand, hit); // MCClab - Add Block behaviour
         return InteractionResult.PASS;
     }
 
@@ -301,7 +303,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return true;
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, true); // MCClab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -349,12 +351,15 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     /** @deprecated */
     @Deprecated
-    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
+    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
+    }
 
     /** @deprecated */
     @Deprecated
@@ -916,7 +921,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void initCache() {
             this.fluidState = ((Block) this.owner).getFluidState(this.asState());
-            this.isRandomlyTicking = ((Block) this.owner).isRandomlyTicking(this.asState());
+            this.isRandomlyTicking = de.verdox.mccreativelab.behaviour.BehaviourUtil.isRandomlyTicking(this.asState(), ((Block) this.owner).isRandomlyTicking(this.asState()));
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
@@ -1195,6 +1200,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void onPlace(Level world, BlockPos pos, BlockState state, boolean notify) {
             this.getBlock().onPlace(this.asState(), world, pos, state, notify);
+            de.verdox.mccreativelab.behaviour.BehaviourUtil.onPlaceCallback(this.asState(), world, pos, state, notify); // MCCLab - Add Block behaviour
         }
 
         public void onRemove(Level world, BlockPos pos, BlockState state, boolean moved) {
@@ -1311,6 +1317,14 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // MCCLab start - Add BlockBehaviour
+        public final boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState){
+            if(world == null || x == -1 || z == -1 || blockState == null)
+                return this.isRandomlyTicking();
+            return de.verdox.mccreativelab.behaviour.BehaviourUtil.isRandomlyTicking(world, x, y,z,blockState, this.isRandomlyTicking());
+        }
+        // MCCLab end - Add BlockBehaviour
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index f0de72afad4bb571153436399386a6a8a70582a6..276a20d4a8603b0f0407720a324b4c6c87f788f5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -4,6 +4,8 @@ import java.util.function.Predicate;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeResolver;
 import net.minecraft.world.level.biome.Biomes;
@@ -28,6 +30,11 @@ public class LevelChunkSection {
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
     // Paper start - optimise collisions
     private int specialCollidingBlocks;
+    // MCCLab start - Add BlockBehaviour
+    private Level level;
+    private ChunkPos chunkPos;
+    private int chunkSectionY;
+    // MCCLab end - Add BlockBehaviour
 
     private void updateBlockCallback(final int x, final int y, final int z, final BlockState oldState, final BlockState newState) {
         if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(newState)) {
@@ -53,6 +60,11 @@ public class LevelChunkSection {
     // Paper start - Anti-Xray - Add parameters
     @Deprecated @io.papermc.paper.annotation.DoNotUse public LevelChunkSection(Registry<Biome> biomeRegistry) { this(biomeRegistry, null, null, 0); }
     public LevelChunkSection(Registry<Biome> biomeRegistry, net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, int chunkSectionY) {
+        // MCCLab start - Add BlockBehaviour
+        this.level = level;
+        this.chunkPos = chunkPos;
+        this.chunkSectionY = chunkSectionY;
+        // MCCLab end - Add BlockBehaviour
         // Paper end
         this.states = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, level == null || level.chunkPacketBlockController == null ? null : level.chunkPacketBlockController.getPresetBlockStates(level, chunkPos, chunkSectionY)); // Paper - Anti-Xray - Add preset block states
         this.biomes = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null); // Paper - Anti-Xray - Add preset biomes
@@ -87,12 +99,18 @@ public class LevelChunkSection {
             iblockdata1 = (BlockState) this.states.getAndSetUnchecked(x, y, z, state);
         }
 
+        // MCCLab start - Add BlockBehaviour
+        int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+        int globalY = chunkSectionY << 4 + y;
+        int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+        // MCCLab end - Add BlockBehaviour
+
         FluidState fluid = iblockdata1.getFluidState();
         FluidState fluid1 = state.getFluidState();
 
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
-            if (iblockdata1.isRandomlyTicking()) {
+            if (iblockdata1.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
@@ -106,7 +124,7 @@ public class LevelChunkSection {
 
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
-            if (state.isRandomlyTicking()) {
+            if (state.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
@@ -148,9 +166,20 @@ public class LevelChunkSection {
         this.states.forEachLocation((BlockState iblockdata, int i) -> {
             FluidState fluid = iblockdata.getFluidState();
 
+            // MCCLab start - Add BlockBehaviour
+            int sizedBitsOfBlockStatePalette = 4;
+            int x = i & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int z = (i >> sizedBitsOfBlockStatePalette) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int y = (i >> (sizedBitsOfBlockStatePalette * 2)) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+
+            int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+            int globalY = chunkSectionY << 4 + y;
+            int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+            // MCCLab end - Add BlockBehaviour
+
             if (!iblockdata.isAir()) {
                 this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
-                if (iblockdata.isRandomlyTicking()) {
+                if (iblockdata.isRandomlyTicking(level, globalX, globalY, globalZ, iblockdata)) { // MCCLab start - Add BlockBehaviour
                     this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                     this.tickingList.add(i, iblockdata);
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fbbced3e47263c2cb24cb26681ea3098ec0bb4cc..ee5e901d71e0f4e266106e49f54078709271d8b5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1099,6 +1099,7 @@ public final class CraftServer implements Server {
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache();
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
