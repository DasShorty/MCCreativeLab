From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 7 Jan 2024 16:18:17 +0100
Subject: [PATCH] Adding BlockBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..8cb9020e6f71e220c77629209b6b66e49be4d3a6
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
@@ -0,0 +1,182 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.random.CraftVanillaRandomSource;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.util.RayTraceResult;
+import org.bukkit.util.Vector;
+
+import java.util.Locale;
+import java.util.function.Supplier;
+
+public class BlockBehaviourUtil extends BehaviourUtil{
+    public static BlockBehaviourUtil INSTANCE;
+    public static BlockBehaviourUtil getInstance() {
+        if(INSTANCE == null)
+            INSTANCE = new BlockBehaviourUtil();
+        return INSTANCE;
+    }
+
+    public boolean isVanillaRandomTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.randomTick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+    }
+
+    public boolean isStepOnLogicReplaced(Level world, BlockPos pos, BlockState state, Entity entity) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.stepOn(world
+            .getWorld()
+            .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), entity.getBukkitEntity()));
+    }
+
+    public boolean isVanillaTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.tick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+    }
+
+    public boolean isVanillaBlockAttackReplaced(BlockState state, Level world, BlockPos pos, Player player){
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour ->
+            blockBehaviour.attack(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (org.bukkit.entity.Player) player.getBukkitEntity()));
+    }
+
+    public boolean isVanillaNeighbourBlockUpdateReplaced(BlockState state, Level world, BlockPos pos, net.minecraft.world.level.block.Block sourceBlock, BlockPos sourcePos, boolean notify){
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour ->
+            blockBehaviour.onNeighbourBlockUpdate(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), world.getWorld().getBlockAt(sourcePos.getX(), sourcePos.getY(), sourcePos.getZ()), notify));
+    }
+
+    public boolean isRandomlyTicking(BlockState blockState, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockDataRandomlyTicking(blockState.createCraftBlockData()), () -> vanillaValue);
+    }
+
+    public boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockRandomlyTicking(world
+            .getWorld().getBlockAt(x, y, z), blockState.createCraftBlockData()), () -> vanillaValue);
+    }
+
+    public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        },() -> vanillaValue);
+    }
+
+    public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, Supplier<Boolean> vanillaLogic) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        }, vanillaLogic);
+    }
+
+    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit, Supplier<InteractionResult> vanillaLogic){
+        return BlockBehaviourUtil.evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation()
+                                                                                                    .y(), hit
+                .getLocation().z()), block, blockFace);
+            return blockBehaviour.use(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        }, vanillaLogic, Converter.InteractionResult.INSTANCE);
+    }
+
+    public void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify));
+    }
+
+    public void onPlayerPlaceCallback(Player player, BlockState placedState, Level world, BlockPos pos) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(placedState), blockBehaviour ->
+            blockBehaviour.onPlayerPlace((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), placedState.createCraftBlockData()));
+    }
+
+    public void onPlayerBreakCallback(Player player, BlockState brokenState, Level world, BlockPos pos) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(brokenState), blockBehaviour ->
+            blockBehaviour.onPlayerBreak((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), brokenState.createCraftBlockData()));
+    }
+
+    public float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState, float vanillaValue) {
+        return BlockBehaviourUtil
+            .evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return FLOAT_DEFAULT;
+                Block block = ((ServerLevel) world).getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+                return blockBehaviour.getExplosionResistance(block, blockState.createCraftBlockData());
+            }, () -> vanillaValue, Converter.DummyConverter.getInstance(Float.class));
+    }
+
+    public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, BlockState vanillaValue) {
+        return updateShape(state, direction, neighborState, world, pos, neighborPos, () -> vanillaValue);
+    }
+
+    public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, Supplier<BlockState> vanillaLogic) {
+        return BlockBehaviourUtil.evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return BehaviourResult.Object.DEFAULT_INSTANCE;
+                BlockFace blockFace = toBukkitBlockFace(direction);
+                return blockBehaviour.blockUpdate(new Location(serverLevel.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), blockFace, neighborState.createCraftBlockData(), new Location(serverLevel.getWorld(), neighborPos.getX(), neighborPos.getY(), neighborPos.getZ()));
+            }, vanillaLogic, Converter.BlockData.INSTANCE);
+    }
+
+    public void onRemoveCallback(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onRemove(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), newState.createCraftBlockData(), state.createCraftBlockData(), moved));
+    }
+
+    public void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation().y(), hit.getLocation().z()), block, blockFace);
+            return blockBehaviour.onUse(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        });
+    }
+
+    private static BlockFace toBukkitBlockFace(Direction direction) {
+        return switch (direction) {
+            case DOWN -> BlockFace.DOWN;
+            case UP -> BlockFace.UP;
+            case NORTH -> BlockFace.NORTH;
+            case SOUTH -> BlockFace.SOUTH;
+            case WEST -> BlockFace.WEST;
+            case EAST -> BlockFace.EAST;
+        };
+    }
+
+
+
+    private static Material getMaterial(BlockState blockState) {
+        Material material;
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isReady())
+            material = blockState.getBukkitMaterial();
+        else
+            material = Material.getMaterial(BuiltInRegistries.BLOCK.getKey(blockState.getBlock()).getPath()
+                                                                   .toUpperCase(Locale.ROOT));
+        return material;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dbccbcb9b44e4efacdf53c2d161115cc20b36cff..69bc806d2a600074a18546ac06273e4c4cadce15 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -272,6 +272,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache(); // MCCLab - Add BlockBehaviour
         // CraftBukkit end
 
         // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index b2c2bd5ec0afd479973f7237a5c610f21231c505..cbd93dbaa4647bfc72654bbd7bb6403356b02ec9 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -464,6 +464,7 @@ public class ServerPlayerGameMode {
                 }
                 // Paper end
 
+                de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerBreakCallback(player, iblockdata, level, pos); // MCCLab - Add BlockBehaviour
                 return true;
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index d58b4c0dbe651b5068212e5f14dce3164ee520f5..198157782deababb85675ca1d878a71a9b750e6c 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1292,12 +1292,14 @@ public abstract class Player extends LivingEntity {
                     }
 
                     f += f1;
+
                     boolean flag3 = false;
                     double d0 = (double) (this.walkDist - this.walkDistO);
 
                     if (flag && !flag2 && !flag1 && this.onGround() && d0 < (double) this.getSpeed()) {
                         ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
 
+                        //TODO: MCCreativeLab Custom Sweep Attack Logic
                         if (itemstack.getItem() instanceof SwordItem) {
                             flag3 = true;
                         }
@@ -1342,6 +1344,7 @@ public abstract class Player extends LivingEntity {
                         }
 
                         if (flag3) {
+                            //TODO: MCCreativeLab Custom Sweep Attack Logic
                             float f4 = 1.0F + EnchantmentHelper.getSweepingDamageRatio(this) * f;
                             List<LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, target.getBoundingBox().inflate(1.0D, 0.25D, 1.0D));
                             Iterator iterator = list.iterator();
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index e483186a5292b3b53bfb1af4d56f55fcc1a6106c..0bca96cb28aea0cb26d93fd05c8949d4b4fa5ae7 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -137,6 +137,7 @@ public class BlockItem extends Item {
                         itemstack.shrink(1);
                     }
 
+                    if(entityhuman != null) de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerPlaceCallback(entityhuman, iblockdata, world, blockposition); // MCCLab - Add BlockBehaviour
                     return InteractionResult.sidedSuccess(world.isClientSide);
                 }
             }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index c758cc841da8359a5ac4ef27978e02d105f8a06c..111b271bcbfa0aeacb245c7f4c683e4e1cefe458 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -444,7 +444,7 @@ public final class ItemStack {
                         ((ServerPlayer) entityhuman).connection.send(new ClientboundBlockUpdatePacket(world, placedPos.relative(dir)));
                     }
                     SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
-                    BlockBehaviourUtil.onPlayerPlaceCallback(entityhuman, world.getBlockState(blockposition), world, blockposition);
+                    de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerPlaceCallback(entityhuman, world.getBlockState(blockposition), world, blockposition); // MCCLab - Add BlockBehaviour
                 } else {
                     // Change the stack to its new contents if it hasn't been tampered with.
                     if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
diff --git a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
index 44c3f0ceea4b4464873302ecdc53f7eb1cc83052..c55a065ca8709cd9115a676c34bb9ef4a6350281 100644
--- a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
+++ b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
@@ -7,7 +7,7 @@ import net.minecraft.world.level.material.FluidState;
 
 public class ExplosionDamageCalculator {
     public Optional<Float> getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState) {
-        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(), fluidState.getExplosionResistance()));
+        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(world, pos, blockState), fluidState.getExplosionResistance())); // MCCLab - Add BlockBehaviour
     }
 
     public boolean shouldBlockExplode(Explosion explosion, BlockGetter world, BlockPos pos, BlockState state, float power) {
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
index 47468086c1cae252aa99c55b0065f225357dee62..94191b51e2c744e6e396b1ef77280848c861a686 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
@@ -48,10 +48,12 @@ public abstract class AbstractCauldronBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Adding BlockBehaviour
         ItemStack itemStack = player.getItemInHand(hand);
         CauldronInteraction cauldronInteraction = this.interactions.get(itemStack.getItem());
         return cauldronInteraction.interact(state, world, pos, player, hand, itemStack);
+        }); // MCCLab - Adding BlockBehaviour
     }
 
     @Override
@@ -78,6 +80,7 @@ public abstract class AbstractCauldronBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockPos = PointedDripstoneBlock.findStalactiteTipAboveCauldron(world, pos);
         if (blockPos != null) {
             Fluid fluid = PointedDripstoneBlock.getCauldronFillFluidType(world, blockPos);
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
index 4458582d361dbb24c71aef7b2bc98663f81d2322..32c816caa3c4414d0604c9c89dc56477a5ed8fdf 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
@@ -36,13 +36,15 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Adding BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
             this.openContainer(world, pos, player);
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Adding BlockBehaviour
     }
 
     protected abstract void openContainer(Level world, BlockPos pos, Player player);
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
index 256d0226c3a347cdb6adb09e880a891d61132d26..5dfb3d6a42867e6abe175feed39a4ab265258765 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
@@ -72,6 +74,7 @@ public abstract class AbstractSkullBlock extends BaseEntityBlock implements Equi
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Adding BlockBehaviour
         if (!world.isClientSide) {
             boolean bl = world.hasNeighborSignal(pos);
             if (bl != state.getValue(POWERED)) {
diff --git a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
index 01b4cf48901aaac897b8def284bf3e2c1cea3570..31e223c728998b4f513b437a70242c8225dcba6a 100644
--- a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
@@ -61,9 +61,11 @@ public class AmethystClusterBlock extends AmethystBlock implements SimpleWaterlo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Adding BlockBehaviour
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, direction);
+        }); // MCCLab - Adding BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
index 5c5a3b169795bf8a527b316c666cbc2105c66622..e4dcf9ed61f705458997112b2c32e0669015e594 100644
--- a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
@@ -54,7 +54,8 @@ public class AnvilBlock extends FallingBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Adding BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -62,6 +63,7 @@ public class AnvilBlock extends FallingBlock {
             player.awardStat(Stats.INTERACT_WITH_ANVIL);
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Adding BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
index e98f566aaba3ff7e3058fbd53bcac467c2c63182..eb85a106483f3e44c8963ad8c1f2d9ca34272598 100644
--- a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
@@ -38,8 +40,10 @@ public class AttachedStemBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem().defaultBlockState().setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Adding BlockBehaviour
+            return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem().defaultBlockState().setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Adding BlockBehaviour
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index fd0143944e4fecaf6f1ffa4561702178431575e9..a6d6294f24f3b150604afca6e04e90443919659c 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -38,6 +39,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add BlockBehaviour
         if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.growBamboo(world, pos);
         }
@@ -46,11 +48,14 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -60,6 +65,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index 05a508cb457b67078ccb08bd2228a59e73701cf3..9ef316bdee53d0c5bb9218adf7b4e75db4797e07 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -113,6 +113,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -126,6 +127,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
@@ -140,11 +142,14 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -154,6 +159,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BannerBlock.java b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
index 09451bc19b65e09c85389d597625dcc2b6f715c5..065c7ed67aa73bb16849e5c4d08ffc3e555b0e9e 100644
--- a/src/main/java/net/minecraft/world/level/block/BannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
@@ -31,7 +33,9 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return world.getBlockState(pos.below()).isSolid();
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -46,8 +50,10 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
index 79f19bc122f08d276d96b4490327e228224576fc..8db8e90ac5e970b6f267411be898d8e3c70c07b5 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
@@ -37,7 +39,8 @@ public class BarrelBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -50,6 +53,7 @@ public class BarrelBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -67,6 +71,7 @@ public class BarrelBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof BarrelBlockEntity) {
             ((BarrelBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
index a46f924ba1ac778f2fabbbd811b993ce33f8cf89..f5449e9b07ebfda96981eae5a0181c14e492fbc4 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
@@ -42,11 +42,13 @@ public class BarrierBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
index 3d2b34c5a7c9b00c1164b4f89c2cbff81fc460eb..7c1a948969ac96ddfac469aca32f66df5009411d 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
@@ -62,17 +62,21 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockPos blockPos = pos.below();
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, Direction.UP);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index 94e7a53fb6792d490246c7f2aec8a7f47f2ef493..fb014ad96e3848dd599a9975962274294f532e78 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -49,19 +49,23 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index ee4b3ac212483995bb8ae990bebfb8aa2fbe86a5..121c6a81d0b983ca4db795c7dcdcd9ce290672f1 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -50,18 +50,23 @@ public abstract class BasePressurePlateBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return canSupportRigidBlock(world, blockposition1) || canSupportCenter(world, blockposition1, Direction.UP);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = this.getSignalForState(state);
 
         if (i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index 547d09c3a1cd0c5401aacb78886896365ba192e7..b16c7c6cae4875a258a663020877f9976d63da78 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -50,7 +50,9 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return canSupportRigidBlock(world, pos.below());
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -72,6 +74,7 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Add BlockBehaviour
         if (!world.isClientSide && world.getBlockState(pos).is(this)) {
             RailShape railShape = state.getValue(this.getShapeProperty());
             if (shouldBeRemoved(pos, world, railShape)) {
@@ -145,11 +148,13 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
index 1dc9af04113364f37b6351dd01f542aa22c59767..de0e2c931583dd2049b7c98470ddc4cf86a39471 100644
--- a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
@@ -40,7 +40,8 @@ public class BeaconBlock extends BaseEntityBlock implements BeaconBeamBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -52,6 +53,7 @@ public class BeaconBlock extends BaseEntityBlock implements BeaconBeamBlock {
 
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index d40500f9a807cab0b2fb6fa9032f33f4fb74c895..dbc2342e634cc6ead3c3465666cbbedd63e7e80e 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -72,7 +72,10 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos originalPos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(originalState, world, originalPos, player, hand, hit, () -> {
+            BlockState state = originalState;
+            BlockPos pos = originalPos;
         if (world.isClientSide) {
             return InteractionResult.CONSUME;
         } else {
@@ -133,6 +136,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
                 return InteractionResult.SUCCESS;
             }
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     // CraftBukkit start
@@ -199,8 +203,10 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == BedBlock.getNeighbourDirection((BedPart) state.getValue(BedBlock.PART), (Direction) state.getValue(BedBlock.FACING)) ? (neighborState.is((Block) this) && neighborState.getValue(BedBlock.PART) != state.getValue(BedBlock.PART) ? (BlockState) state.setValue(BedBlock.OCCUPIED, (Boolean) neighborState.getValue(BedBlock.OCCUPIED)) : Blocks.AIR.defaultBlockState()) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static Direction getNeighbourDirection(BedPart part, Direction direction) {
         return part == BedPart.FOOT ? direction : direction.getOpposite();
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 4b4a6b081ffedc7f637fa1e1726391d8e0fee0a1..3f34edbbe2c9bad7cbb074b3f30507ab5695cf06 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -124,7 +124,8 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemstack = player.getItemInHand(hand);
         int i = (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
         boolean flag = false;
@@ -184,6 +185,7 @@ public class BeehiveBlock extends BaseEntityBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private boolean hiveContainsBees(Level world, BlockPos pos) {
@@ -337,8 +339,9 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
-            BlockEntity tileentity = world.getBlockEntity(pos);
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
+                BlockEntity tileentity = world.getBlockEntity(pos);
 
             if (tileentity instanceof BeehiveBlockEntity) {
                 BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
@@ -347,7 +350,8 @@ public class BeehiveBlock extends BaseEntityBlock {
             }
         }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     // CraftBukkit start - fix MC-227255
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 2bd714466fb86d4013bd3bceddecba19ce98df08..5eab8a26b862ef1cb1f1ceaac65d0e0cb2f7abe1 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -41,6 +41,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 2774c32bd62255e8902d23e986c8d3e13ccddc7f..51746569a728bf05e80f662f6e492dc280ce3e86 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -61,6 +61,7 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;  // MCCLab - Add custom Block behaviour
         boolean flag1 = world.hasNeighborSignal(pos);
 
         if (flag1 != (Boolean) state.getValue(BellBlock.POWERED)) {
@@ -82,8 +83,10 @@ public class BellBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         return this.onHit(world, state, hit, player, true) ? InteractionResult.sidedSuccess(world.isClientSide) : InteractionResult.PASS;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     public boolean onHit(Level world, BlockState state, BlockHitResult hitResult, @Nullable Player player, boolean checkHitPos) {
@@ -208,6 +211,7 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         BellAttachType blockpropertybellattach = (BellAttachType) state.getValue(BellBlock.ATTACHMENT);
         Direction enumdirection1 = BellBlock.getConnectedDirection(state).getOpposite();
 
@@ -226,14 +230,17 @@ public class BellBlock extends BaseEntityBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         Direction enumdirection = BellBlock.getConnectedDirection(state).getOpposite();
 
         return enumdirection == Direction.UP ? Block.canSupportCenter(world, pos.above(), Direction.DOWN) : FaceAttachedHorizontalDirectionalBlock.canAttach(world, pos, enumdirection);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     private static Direction getConnectedDirection(BlockState state) {
         switch ((BellAttachType) state.getValue(BellBlock.ATTACHMENT)) {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 54cf35b0c48d96ecfb27ff13cd685c16a1cd616b..805efd4814c6dd44bf0cfb8a13497ecb4bd5cbec 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -123,14 +123,17 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -140,6 +143,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
             return direction == Direction.UP && neighborState.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -194,6 +198,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         } else {
@@ -212,6 +217,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
index 06f353e28ef6a9e7efc4c2fe383284fd651e0486..e40accb9acc11b847571e6b0537b49cf44f2353d 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
@@ -62,11 +62,13 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockPos = pos.below();
         BlockState blockState = world.getBlockState(blockPos);
         BlockState blockState2 = world.getBlockState(pos.above());
         return (blockState.is(this) || blockState.is(BlockTags.BIG_DRIPLEAF_PLACEABLE)) && (blockState2.is(this) || blockState2.is(Blocks.BIG_DRIPLEAF));
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
         BlockState blockState = Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER))).setValue(FACING, direction);
@@ -75,6 +77,7 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((direction == Direction.DOWN || direction == Direction.UP) && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
         }
@@ -84,10 +87,12 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index d4cbff18adb62073a1dceb189043789620af6877..ff69b35ac544d2d802c6942da453c33b31cbf06d 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -403,13 +403,21 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     }
 
+    // MCCLab start - Add BlockBehaviour
+    public float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState){
+        return blockBehaviour().getExplosionResistance(world, pos, blockState, getExplosionResistance());
+    }
+    // MCCLab end - Add BlockBehaviour
+
     public float getExplosionResistance() {
         return this.explosionResistance;
     }
 
     public void wasExploded(Level world, BlockPos pos, Explosion explosion) {}
 
-    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {}
+    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity); // MCCLab start - Adding BlockBehaviour
+    }
 
     @Nullable
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
diff --git a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
index 52c80b6bf4c07e39c247fd8400193ff6d73d1fbe..da9d35bceb67c546f5870168d57e5f265d16e437 100644
--- a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
@@ -60,7 +60,8 @@ public class BrewingStandBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -72,6 +73,7 @@ public class BrewingStandBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
index c751ebf0bb1343a543e70abbfd64f1b070e5c430..ddb4db6a71a0a1a9154ff5a21b040abe6178e420 100644
--- a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
@@ -53,12 +53,15 @@ public class BrushableBlock extends BaseEntityBlock implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, 2);
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, 2);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity var6 = world.getBlockEntity(pos);
         if (var6 instanceof BrushableBlockEntity brushableBlockEntity) {
             brushableBlockEntity.checkReset();
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index ed36a378b79f62c3dce3da637a337595415f14ac..c606fe8bbc167e01aca47dae53dea6f2c7be7758 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -60,6 +60,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         updateColumn(world, pos, state, world.getBlockState(pos.below()));
     }
 
@@ -125,19 +126,23 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         if (!state.canSurvive(world, pos) || direction == Direction.DOWN || direction == Direction.UP && !neighborState.is(Blocks.BUBBLE_COLUMN) && canExistIn(neighborState)) {
             world.scheduleTick(pos, this, 5);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         BlockState blockState = world.getBlockState(pos.below());
         return blockState.is(Blocks.BUBBLE_COLUMN) || blockState.is(Blocks.MAGMA_BLOCK) || blockState.is(Blocks.SOUL_SAND);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 2548244c089dff583c8c424dcaa5504caedf3f10..54b77f9742cb7c7ee2b26625deadf8d404a2db0e 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -19,6 +19,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(5) == 0) {
             Direction enumdirection = BuddingAmethystBlock.DIRECTIONS[random.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
             BlockPos blockposition1 = pos.relative(enumdirection);
diff --git a/src/main/java/net/minecraft/world/level/block/BushBlock.java b/src/main/java/net/minecraft/world/level/block/BushBlock.java
index 03fde6e47c4a347c62fe9b4a3351769aedf874f6..d2ab68985b61ed23742ddbfbe76abbcbe2c03eca 100644
--- a/src/main/java/net/minecraft/world/level/block/BushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BushBlock.java
@@ -22,6 +22,7 @@ public class BushBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!state.canSurvive(world, pos)) {
             if (!(world instanceof net.minecraft.server.level.ServerLevel && ((net.minecraft.server.level.ServerLevel) world).hasPhysicsEvent) || !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(world, pos).isCancelled()) { // Paper
@@ -30,13 +31,16 @@ public class BushBlock extends Block {
         }
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockPos blockposition1 = pos.below();
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
+            BlockPos blockposition1 = pos.below();
 
-        return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+            return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 3e792514d042f05ff6848b7d6506472ace67b67a..cf2bc71473d0b2abbdc89988aa1cdc6921985c7b 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -108,7 +108,8 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             return InteractionResult.CONSUME;
         } else {
@@ -130,6 +131,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
             world.gameEvent((Entity) player, GameEvent.BLOCK_ACTIVATE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     public void press(BlockState state, Level world, BlockPos pos) {
@@ -174,6 +176,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             this.checkPressed(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 0003fb51ae3a6575575e10b4c86719f3061e2577..bfaa221bf53960a032b64782a36ddda2493180e7 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -37,6 +37,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1)) {
@@ -84,15 +86,18 @@ public class CactusBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         Direction enumdirection;
@@ -110,6 +115,7 @@ public class CactusBlock extends Block {
         } while (!iblockdata1.isSolid() && !world.getFluidState(pos.relative(enumdirection)).is(FluidTags.LAVA));
 
         return false;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 397b8945bd0c2f413b17ba95cfb31befca252595..878a6052d8f53a384576aff24232b670288c7f2e 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -47,7 +47,8 @@ public class CakeBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
 
@@ -78,6 +79,7 @@ public class CakeBlock extends Block {
         }
 
         return CakeBlock.eat(world, pos, state, player);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     protected static InteractionResult eat(LevelAccessor world, BlockPos pos, BlockState state, Player player) {
@@ -113,13 +115,17 @@ public class CakeBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return world.getBlockState(pos.below()).isSolid();
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 7700461b8cd0bde1bf6c0d5e4b73184bed1adc4e..314ed199d403d8728e6ff1bed1a99c23494cee16 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -70,7 +70,8 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CampfireBlockEntity) {
@@ -89,6 +90,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         }
 
         return InteractionResult.PASS;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -128,12 +130,14 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(neighborState)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private boolean isSmokeSource(BlockState state) {
         return state.is(Blocks.HAY_BLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/CandleBlock.java b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
index ff575d3d369340f4ec0d61cc4dea144432ea3690..797043d93b45109df0b9e1c9a3936cd86140505a 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
@@ -60,13 +60,15 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (player.getAbilities().mayBuild && player.getItemInHand(hand).isEmpty() && state.getValue(LIT)) {
             extinguish(player, state, world, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -88,11 +90,13 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -155,6 +159,8 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return Block.canSupportCenter(world, pos.below(), Direction.UP);
+        });  // MCCLab - Add custom Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
index 29cf6571ef738823e52d7e18400fcb9f51308114..939348523b027c02dcd2de46ea4dfa8927419b1a 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
@@ -52,7 +52,8 @@ public class CandleCakeBlock extends AbstractCandleBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemStack = player.getItemInHand(hand);
         if (!itemStack.is(Items.FLINT_AND_STEEL) && !itemStack.is(Items.FIRE_CHARGE)) {
             if (candleHit(hit) && player.getItemInHand(hand).isEmpty() && state.getValue(LIT)) {
@@ -69,6 +70,7 @@ public class CandleCakeBlock extends AbstractCandleBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private static boolean candleHit(BlockHitResult hitResult) {
@@ -87,12 +89,16 @@ public class CandleCakeBlock extends AbstractCandleBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return world.getBlockState(pos.below()).isSolid();
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
index db687aff597df22913b8764ec2cd28976b66e061..8b7a0bbb06d4c354828be002cbf11373180f2f38 100644
--- a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
@@ -24,11 +24,15 @@ public class CarpetBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return !world.isEmptyBlock(pos.below());
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java b/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
index c170157b5fec0319119d861caae0733308001722..1e25a21d9137345ac10a8aa6a3463cc637e7e2c0 100644
--- a/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
@@ -24,7 +24,8 @@ public class CartographyTableBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -32,6 +33,7 @@ public class CartographyTableBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_CARTOGRAPHY_TABLE);
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
index ead7b37122c76d43af2cdd17af7f0da8014efb26..badcb964ddd1266efcfb456b54c2251db9bcdd8c 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
@@ -64,8 +64,10 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         return CaveVines.use(player, state, world, pos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
index e9882ad8905d93e97391eea6f9826214caa2cee6..faea1df6a9fa02692b08af5a9cf7b55f6b50d68b 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
@@ -39,8 +39,10 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         return CaveVines.use(player, state, world, pos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
index 0bd8ea3143b2e9755d492af4596622d1dca1afaf..9a39952dbd91b228484693ab7a5d223301a49a63 100644
--- a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -50,7 +50,8 @@ public class CeilingHangingSignBlock extends SignBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         BlockEntity itemStack = world.getBlockEntity(pos);
         if (itemStack instanceof SignBlockEntity signBlockEntity) {
             // Paper start - decompile fixes
@@ -62,6 +63,7 @@ public class CeilingHangingSignBlock extends SignBlock {
         }
 
         return super.use(state, world, pos, player, hand, hit);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private boolean shouldTryToChainAnotherHangingSign(Player player, BlockHitResult hitResult, SignBlockEntity sign, ItemStack stack) {
@@ -70,8 +72,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return world.getBlockState(pos.above()).isFaceSturdy(world, pos.above(), Direction.DOWN, SupportType.CENTER);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -113,8 +117,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChainBlock.java b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
index 1c5d7173c320b4f852f138c4050d6c27c6126c0b..d609b61800a745bd57db54b49f6188a0cadbcabc 100644
--- a/src/main/java/net/minecraft/world/level/block/ChainBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
@@ -53,11 +53,13 @@ public class ChainBlock extends RotatedPillarBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 5e22d175b1048a58802cdf64ac70a8b56329e915..feaa28bbbe331e099cb839c0d58cf2094c33a654 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -150,6 +150,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ChestBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -165,6 +166,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -259,7 +261,8 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -273,6 +276,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     protected Stat<ResourceLocation> getOpenChestStat() {
@@ -415,6 +419,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof ChestBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
index c86558e6df739103185167fce82f568f294b1c4e..875a05f25817774cfe783234f68d4973d0fac404 100644
--- a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
@@ -52,9 +52,12 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockEntity optional = world.getBlockEntity(pos);
-        if (optional instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        // MCCLab start - Add BlockBehaviour
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {
+        BlockEntity blockEntity = world.getBlockEntity(pos);
+        if (blockEntity instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
+        // MCCLab end - Add BlockBehaviour
             Optional<Vec2> optional = getRelativeHitCoordinatesForBlockFace(hit, state.getValue(HorizontalDirectionalBlock.FACING));
             if (optional.isEmpty()) {
                 return InteractionResult.PASS;
@@ -76,6 +79,7 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
         } else {
             return InteractionResult.PASS;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static Optional<Vec2> getRelativeHitCoordinatesForBlockFace(BlockHitResult hit, Direction facing) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index e9beebedf1d60e06e16c442b64d28d022a3e3164..130de382ece1e5402d9204a268b29940853a6885 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -37,6 +37,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -55,6 +56,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
@@ -169,15 +171,18 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction != Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         if (!iblockdata1.is((Block) this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
@@ -207,6 +212,7 @@ public class ChorusFlowerBlock extends Block {
         } else {
             return true;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index 2e8bf4463b8da8da50cd14d3f84aba5e930e5710..0def1ecda823efd0c4648aaa3a0baf89b5231329 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -37,6 +37,7 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return state; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
@@ -45,10 +46,12 @@ public class ChorusPlantBlock extends PipeBlock {
             boolean bl = neighborState.is(this) || neighborState.is(Blocks.CHORUS_FLOWER) || direction == Direction.DOWN && neighborState.is(Blocks.END_STONE);
             return state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(bl));
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
@@ -58,9 +61,11 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return true; // Paper - add option to disable block updates
-        BlockState blockState = world.getBlockState(pos.below());
-        boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates)
+                return true; // Paper - add option to disable block updates
+            BlockState blockState = world.getBlockState(pos.below());
+            boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
             BlockPos blockPos = pos.relative(direction);
@@ -77,7 +82,8 @@ public class ChorusPlantBlock extends PipeBlock {
             }
         }
 
-        return blockState.is(this) || blockState.is(Blocks.END_STONE);
+            return blockState.is(this) || blockState.is(Blocks.END_STONE);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index f5c42fee3ec68a7a9260f01d19c7a1d7533bad9c..010db091561fe496fcd378a33208df1b9e919e7d 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -51,6 +51,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
@@ -63,9 +64,11 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
 
         return iblockdata1.is(BlockTags.JUNGLE_LOGS);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -110,8 +113,10 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(CocoaBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 2e7c03b00bc941b86df6a7f1b2b188c9f0aede22..c0d986366ffca7d4cf33c83c51602cd1685984f4 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -52,6 +52,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
@@ -83,6 +84,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity) {
@@ -127,7 +129,8 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity && (player.canUseGameMasterBlocks() || (player.isCreative() && player.getBukkitEntity().hasPermission("minecraft.commandblock")))) { // Paper - command block permission
@@ -136,6 +139,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
         } else {
             return InteractionResult.PASS;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 16174c573b1acd1e1a75dba9305994ed37fe6c72..5321cf5acc1c4d561cff119169d81a53d4cd5f96 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -44,8 +44,10 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     protected int getOutputSignal(BlockGetter world, BlockPos pos, BlockState state) {
@@ -113,7 +115,9 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state2, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state2, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
+            BlockState state = state2;
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
@@ -125,6 +129,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
             this.refreshOutputState(world, pos, state);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -182,6 +187,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.refreshOutputState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 10d3912ef043eefdf89105332e29b0d2bf4a5539..fba3e03a7441f4c3009c57be28c6da5f1b6ca4f1 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -224,7 +224,8 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {
         int i = (Integer) state.getValue(ComposterBlock.LEVEL);
         ItemStack itemstack = player.getItemInHand(hand);
 
@@ -251,6 +252,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
         } else {
             return InteractionResult.PASS;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     public static BlockState insertItem(Entity user, BlockState state, ServerLevel world, ItemStack stack, BlockPos pos) {
@@ -358,6 +360,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
             world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
             world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
index 065525e8ce46c12cdfa1d5d06fb96ea4654e95a3..949477d012dd9da70fb2492760a8e91ffc14cac4 100644
--- a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -92,6 +92,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (ConcretePowderBlock.touchesLiquid(world, pos)) {
             // Suppress during worldgen
@@ -111,6 +112,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
index 1a97e9075ec3fc3cad597d78ef46310c4c87cac3..ccbf7bcbf97b2a6252ae51e7322798d6703c46a0 100644
--- a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
@@ -64,11 +64,13 @@ public class ConduitBlock extends BaseEntityBlock implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..3aafc75787eaba2fc2dd39dccf5b396e0bb0b9db 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -24,6 +24,7 @@ public class CoralBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
@@ -37,11 +38,13 @@ public class CoralBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!this.scanForWater(world, pos)) {
             world.scheduleTick(pos, (Block) this, 60 + world.getRandom().nextInt(40));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     protected boolean scanForWater(BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 86e58786c8a4caa965ea63aff50a13ae61da8c1c..d7c08a60a53bddd5ad301c69e255c6710a8a2e20 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -27,6 +27,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
@@ -40,6 +41,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +52,6 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index f980e31c4b6ba396be6ef317cffe027004a090e0..1b72670981dc9f93e420b6e72dd64fddaa448ad2 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -32,6 +32,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false)).isCancelled()) {
@@ -45,6 +46,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -55,6 +57,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index f759ad7b49244a91aca4d36db2980267d46e1c23..97634a61685aa62cc23ca747fa7b8e7a1c9d72ea 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -27,6 +27,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
@@ -40,6 +41,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +52,6 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
             this.tryScheduleDieTick(state, world, pos);
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
index a345ed80a3ede0efdb57f198fffe5d2056316e1e..d7c3a2efe7ee8309b694a9937e35453ad954ef40 100644
--- a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
@@ -23,7 +23,8 @@ public class CraftingTableBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -31,6 +32,7 @@ public class CraftingTableBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_CRAFTING_TABLE);
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 6365ddea0c23bc5d4009d98915f2b39aed2a0328..c390c7495533abcd9c7a58788bfcf0e45e5b0081 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -70,6 +70,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
 
@@ -162,7 +163,9 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {
         return CropBlock.hasSufficientLight(world, pos) && super.canSurvive(state, world, pos);
+        });
     }
 
     protected static boolean hasSufficientLight(LevelReader world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index 48eb8f0c1da1fc1971563934497059b21aebf7b6..dea672ac592c3818b71800618ad00002b4b5f493 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -74,7 +74,8 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (player.mayBuild()) {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
@@ -89,6 +90,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
index 5737b2cdd662197883e2f3a6358f6a38a5b9db94..8051cbc679e7a5e118417e5ae6adc1e965b10fc3 100644
--- a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
@@ -52,11 +52,13 @@ public class DecoratedPotBlock extends BaseEntityBlock implements SimpleWaterlog
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 05dfb1790a292f9f85b641377c2ca3675726c127..600960a5b1df749bfa4271d2f6ffde0fe21dabeb 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -54,6 +54,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
             this.checkPressed(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 0f513bc36ed62a8eff1be874de61f47888739ec8..27b7f32791d797f29b3c49e1ce8cc2c6ad209008 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -37,9 +37,11 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockPos blockposition1 = pos.below();
 
         return this.canSurviveOn(world, blockposition1, world.getBlockState(blockposition1));
+        }); // MCCLab - Add BlockBehaviour
     }
 
     protected boolean canSurviveOn(LevelReader world, BlockPos pos, BlockState state) {
@@ -48,6 +50,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isLocked(world, pos, state)) {
             boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
             boolean flag1 = this.shouldTurnOn(world, pos, state);
@@ -86,6 +89,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (state.canSurvive(world, pos)) {
             this.checkTickOnNeighbor(world, pos, state);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
index 1ec9bad118dee4ad072242c1b47c82ad74760aca..7dd888866ab3ff07e11f2b2070a155f070dde500 100644
--- a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
@@ -35,15 +35,18 @@ public class DirtPathBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, (Block) this, 1);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // CraftBukkit start - do not fade if the block is valid here
         if (state.canSurvive(world, pos)) {
             return;
@@ -54,9 +57,11 @@ public class DirtPathBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 9b1e51c1d95da885c80c6d05000d83436b7bcfb4..257de7bd271c453e6edc29199324b2c31ebacf14 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -60,7 +60,8 @@ public class DispenserBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -77,6 +78,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     public void dispenseFrom(ServerLevel world, BlockState state, BlockPos pos) {
@@ -113,6 +115,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Add BlockBehaviour
         boolean flag1 = world.hasNeighborSignal(pos) || world.hasNeighborSignal(pos.above());
         boolean flag2 = (Boolean) state.getValue(DispenserBlock.TRIGGERED);
 
@@ -127,6 +130,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.dispenseFrom(world, state, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index c028a7158e41a0754abb8e24dcd647633fbf3fe8..fd6c9187f82e34795559ed2067bd79f29a444112 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -79,10 +79,12 @@ public class DoorBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoorBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) ? (neighborState.is((Block) this) && neighborState.getValue(DoorBlock.HALF) != blockpropertydoubleblockhalf ? (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(DoorBlock.FACING, (Direction) neighborState.getValue(DoorBlock.FACING))).setValue(DoorBlock.OPEN, (Boolean) neighborState.getValue(DoorBlock.OPEN))).setValue(DoorBlock.HINGE, (DoorHingeSide) neighborState.getValue(DoorBlock.HINGE))).setValue(DoorBlock.POWERED, (Boolean) neighborState.getValue(DoorBlock.POWERED)) : Blocks.AIR.defaultBlockState()) : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
@@ -164,16 +166,17 @@ public class DoorBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (!this.type.canOpenByHand()) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(DoorBlock.OPEN);
-            world.setBlock(pos, state, 10);
+            world.setBlock(pos, state.cycle(DoorBlock.OPEN), 10); // MCCLab - Add BlockBehaviour
             this.playSound(player, world, pos, (Boolean) state.getValue(DoorBlock.OPEN));
             world.gameEvent((Entity) player, this.isOpen(state) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     public boolean isOpen(BlockState state) {
@@ -190,6 +193,7 @@ public class DoorBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         BlockPos otherHalf = pos.relative(state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? Direction.UP : Direction.DOWN);
 
@@ -220,11 +224,13 @@ public class DoorBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is((Block) this);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private void playSound(@Nullable Entity entity, Level world, BlockPos pos, boolean open) {
         world.playSound(entity, pos, open ? this.type.doorOpen() : this.type.doorClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index 030b38d5d5d2578d6ef482a239ef58787efa3b08..24f73f7086289b2c709253d608b553e723c4a067 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -32,10 +32,12 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoublePlantBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) && (!neighborState.is((Block) this) || neighborState.getValue(DoublePlantBlock.HALF) == blockpropertydoubleblockhalf) ? Blocks.AIR.defaultBlockState() : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -55,6 +57,7 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(DoublePlantBlock.HALF) != DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -62,6 +65,7 @@ public class DoublePlantBlock extends BushBlock {
 
             return iblockdata1.is((Block) this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     public static void placeAt(LevelAccessor world, BlockState state, BlockPos pos, int flags) {
diff --git a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
index 7e1edcc7b9f170b7c649437c2f0dd78c0bab9be4..23999683dcc136bd63c60816d16e37c4a7f1f027 100644
--- a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
@@ -31,13 +31,16 @@ public class DragonEggBlock extends FallingBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         this.teleport(state, world, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(blockBehaviour().isVanillaBlockAttackReplaced(state, world, pos, player)) return; // MCCLab - Add BlockBehaviour
         this.teleport(state, world, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java b/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
index 839b7bc9392906dca384003468746963631fe095..0a04c801d3aad7399c31b03a9b9c312beeacc420 100644
--- a/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
@@ -83,13 +83,15 @@ public class EnchantmentTableBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
             player.openMenu(state.getMenuProvider(world, pos));
             return InteractionResult.CONSUME;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
index 7385e91f32f070e86a4e0fd3d214f55d832c7979..4867b0e96ba069bc1f8d503ce633932bbaf93d1a 100644
--- a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
@@ -72,7 +72,8 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         PlayerEnderChestContainer playerEnderChestContainer = player.getEnderChestInventory();
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (playerEnderChestContainer != null && blockEntity instanceof EnderChestBlockEntity) {
@@ -94,6 +95,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
         } else {
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -145,11 +147,13 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -159,6 +163,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof EnderChestBlockEntity) {
             ((EnderChestBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
index 9d889080be6d5b4b679fa9a2bd46ad8fd2ad1e77..3d02b09ac6d9acfad922a54e0fd6725357900e96 100644
--- a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
@@ -21,8 +21,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         return canAttach(world, pos, getConnectedDirection(state).getOpposite());
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     public static boolean canAttach(LevelReader world, BlockPos pos, Direction direction) {
         BlockPos blockPos = pos.relative(direction);
@@ -50,8 +52,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     protected static Direction getConnectedDirection(BlockState state) {
         switch ((AttachFace)state.getValue(FACE)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FallingBlock.java b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
index 631ac128aebcd6388482adb3b1f03673281eaf95..61b891a7b01ae541193adf6c67a8fe961679d0a9 100644
--- a/src/main/java/net/minecraft/world/level/block/FallingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
@@ -27,12 +27,15 @@ public class FallingBlock extends Block implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, this.getDelayAfterPlace());
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, this.getDelayAfterPlace());
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (isFree(world.getBlockState(pos.below())) && pos.getY() >= world.getMinBuildHeight()) {
             FallingBlockEntity fallingBlockEntity = FallingBlockEntity.fall(world, pos, state);
             this.falling(fallingBlockEntity);
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 5946f06f63b5694034bd027984a4925b0831d439..69b2b88b969719622cde8d7d0742a5f98d996cfd 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -45,19 +45,23 @@ public class FarmBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock || iblockdata1.getBlock() instanceof MovingPistonBlock;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -76,6 +80,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             FarmBlock.turnToDirt((Entity) null, state, world, pos);
         }
@@ -84,6 +89,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceBlock.java b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
index b7b8c9ca03cf4aa8b8e2cf60d15d627769e82ffa..991b022707ffc51cbd66d4117fb3ac1cc44f2779 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
@@ -59,13 +59,15 @@ public class FenceBlock extends CrossCollisionBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
         if (world.isClientSide) {
             ItemStack itemStack = player.getItemInHand(hand);
             return itemStack.is(Items.LEAD) ? InteractionResult.SUCCESS : InteractionResult.PASS;
         } else {
             return LeadItem.bindPlayerMobs(player, world, pos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -86,12 +88,14 @@ public class FenceBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis().getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index baaf648f65042a9c6bf41eaba595dce2aa6bb187..a4025a87e80eb7a7ad2e51b10563be07f6c885bc 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -57,6 +57,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
         if (((Direction) state.getValue(FenceGateBlock.FACING)).getClockWise().getAxis() != enumdirection_enumaxis) {
@@ -66,6 +67,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
             return (BlockState) state.setValue(FenceGateBlock.IN_WALL, flag);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -114,7 +116,9 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state2, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state2, world, pos, player, hand, hit, () -> {
+            BlockState state = state2;
         if ((Boolean) state.getValue(FenceGateBlock.OPEN)) {
             state = (BlockState) state.setValue(FenceGateBlock.OPEN, false);
             world.setBlock(pos, state, 10);
@@ -134,10 +138,12 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         world.playSound(player, pos, flag ? this.type.fenceGateOpen() : this.type.fenceGateClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
         world.gameEvent((Entity) player, flag ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 4002e0fffb60556e7af1aeff71b4be244f02b0f5..96c97fa8c4895166760048d8207af0bdac0b05f2 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -101,6 +101,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
@@ -120,6 +121,7 @@ public class FireBlock extends BaseFireBlock {
         }
         return this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -158,13 +160,16 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.below();
 
         return world.getBlockState(blockposition1).isFaceSturdy(world, blockposition1, Direction.UP) || this.isValidFireLocation(world, pos);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world)); // Paper
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
index 35fdff13b3bdd4769da858e18865e83dca4bdb1e..69d22ce893f38a54306519c3aa1c74adb60871c1 100644
--- a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
@@ -15,7 +15,9 @@ public class FletchingTableBlock extends CraftingTableBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         return InteractionResult.PASS;
+        });  // MCCLab - Add custom Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
index db05c1ea847d60ad45d33cd798cb34ad3f5cfd75..cf7a29d09a8472b7ce99a2fcba31fe7d58879149 100644
--- a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -45,7 +45,8 @@ public class FlowerPotBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemStack = player.getItemInHand(hand);
         Item item = itemStack.getItem();
         BlockState blockState = (item instanceof BlockItem ? POTTED_BY_CONTENT.getOrDefault(((BlockItem)item).getBlock(), Blocks.AIR) : Blocks.AIR).defaultBlockState();
@@ -94,6 +95,7 @@ public class FlowerPotBlock extends Block {
         } else {
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -107,8 +109,10 @@ public class FlowerPotBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     public Block getContent() {
         return this.content;
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index bebcdc70c4cb01764428836fff76f03b94f2eae8..783d57875091e4705a3893dfd74b364d3e62d5dd 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -43,8 +43,10 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return mayPlaceOn(world, pos.below());
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -57,11 +59,14 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.canSurvive(state, world, pos)) {
             this.destroyBlock(world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index a3af96b2518b41f370d09cfda26dc589b9ee977b..080d676e8fa88bf50b62a149f434e085755e55ed 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -27,11 +27,13 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!world.paperConfig().environment.frostedIce.enabled) return; // Paper - add ability to disable frosted ice
         if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
@@ -63,6 +65,7 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (sourceBlock.defaultBlockState().is(this) && this.fewerNeigboursThan(world, pos, 2)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
index a061fec641c5c5fabf24a41ca4eb0ab0cb233c70..9424407572c5a41821a15f62a4e33415f699a83d 100644
--- a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
@@ -42,11 +42,13 @@ public class GlowLichenBlock extends MultifaceBlock implements BonemealableBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
index c6a5d917616ef57c9ea949acae20db045bb4407b..18d79ba40dc7a00ac42506d114956d374bd6ee4a 100644
--- a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
@@ -145,11 +145,14 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return true;
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -157,6 +160,7 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
             player.awardStat(Stats.INTERACT_WITH_GRINDSTONE);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
index bac57e5234182315a66c9726490a233cb9d99181..130e856ecb336f3091ae11c6a6dfe46633b85ffb 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
@@ -39,6 +39,7 @@ public abstract class GrowingPlantBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockPos = pos.relative(this.growthDirection.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         if (!this.canAttachTo(blockState)) {
@@ -46,10 +47,12 @@ public abstract class GrowingPlantBlock extends Block {
         } else {
             return blockState.is(this.getHeadBlock()) || blockState.is(this.getBodyBlock()) || blockState.isFaceSturdy(world, blockPos, this.growthDirection);
         }
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
index fa22fb66c6484ba644620b0d98f80c5354200e34..6a03ced65a63b27f122b8ca4c5b431786f64dada 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
@@ -28,9 +28,10 @@ public abstract class GrowingPlantBodyBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, this, 1);
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, this, 1);
+            }
 
         GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
         if (direction == this.growthDirection && !neighborState.is(this) && !neighborState.is(growingPlantHeadBlock)) {
@@ -40,8 +41,9 @@ public abstract class GrowingPlantBodyBlock extends GrowingPlantBlock implements
                 world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index b325fdec8eb99ce57152a5c0fefa5059685276e4..f4d9f26526336d99440092d8e96728a3eeb4c2bf 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -40,6 +40,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // Spigot start
         int modifier;
         if (this == Blocks.KELP) {
@@ -86,6 +87,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -99,6 +101,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
index 664ff099fd6f44b4bc2e23d06afe8006931f1aa6..b688558c1e420cec948a93b12d855f3ceea3ac23 100644
--- a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
@@ -50,10 +50,12 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockPos = pos.above();
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, Direction.DOWN);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -62,6 +64,7 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !this.canSurvive(state, world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -71,5 +74,6 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index 4311c97edd2a70e9ed8fed3fdf9471c513ddc1d4..327844aa173bc40ad7692bf4a5c6f31c7389b10f 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -128,7 +128,8 @@ public class HopperBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -140,10 +141,12 @@ public class HopperBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         this.checkPoweredState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
index 1dd44eb0ab977093660e8fe6f49338e7f5ef7b28..feefc94af3015552d4013d002b4a59bfb0d20ae5 100644
--- a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -35,9 +35,11 @@ public class HugeMushroomBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableMushroomBlockUpdates) return state; // Paper - add option to disable block updates
         return neighborState.is(this) ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(false)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index 04089e6f7d6e3d532b00585870283922b6be5246..0b9f336a7737c4fad99c1662fa9cede44bf88aca 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -49,6 +49,7 @@ public class IceBlock extends HalfTransparentBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 83352a3909e892e35f96adea092a8c399ad98463..534cc320a4fc2b471adc6cfda1a375191159363d 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -39,12 +39,14 @@ public class IronBarsBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis().isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
index c031564cd85e18450230bb6b461e11744fbe135e..24e4a1f397f4686e479e992ced042d6b72bded01 100644
--- a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
@@ -60,7 +60,8 @@ public class JigsawBlock extends Block implements EntityBlock, GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof JigsawBlockEntity && player.canUseGameMasterBlocks()) {
             player.openJigsawBlock((JigsawBlockEntity)blockEntity);
@@ -68,6 +69,7 @@ public class JigsawBlock extends Block implements EntityBlock, GameMasterBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     public static boolean canAttach(StructureTemplate.StructureBlockInfo info1, StructureTemplate.StructureBlockInfo info2) {
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 45bec8389721e44a2346b3e31d37c520692fdd17..35e98617a7550566c102df1051f89d7f5c150b58 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -44,7 +44,8 @@ public class JukeboxBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (state.getValue(HAS_RECORD)) {
             BlockEntity var8 = world.getBlockEntity(pos);
             if (var8 instanceof JukeboxBlockEntity) {
@@ -55,6 +56,7 @@ public class JukeboxBlock extends BaseEntityBlock {
         }
 
         return InteractionResult.PASS;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LadderBlock.java b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
index 6bcc83245e8046518921b82d948d45900ae0c8db..d11a24ca4473c11f23f8ff7f6d67401b8c9543b8 100644
--- a/src/main/java/net/minecraft/world/level/block/LadderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
@@ -54,12 +54,15 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         Direction direction = state.getValue(FACING);
         return this.canAttachTo(world, pos.relative(direction.getOpposite()), direction);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -69,6 +72,7 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LanternBlock.java b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
index da143e1d162855e99e7c1bc8db55a8c217f3a3dc..a537b32bd4e418df3475ab4b241dc5469106a422 100644
--- a/src/main/java/net/minecraft/world/level/block/LanternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
@@ -59,8 +59,10 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         Direction direction = getConnectedDirection(state).getOpposite();
         return Block.canSupportCenter(world, pos.relative(direction), direction.getOpposite());
+        });  // MCCLab - Add custom Block behaviour
     }
 
     protected static Direction getConnectedDirection(BlockState state) {
@@ -69,12 +71,14 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index ebee1dfdb1d75381de847834262a66b45fd9f0ce..cbe88904dafd0fd7f4295b1c52efb9d125961623 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -50,6 +50,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.decaying(state)) {
             // CraftBukkit start
             LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
@@ -71,6 +72,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, LeavesBlock.updateDistance(state, world, pos), 3);
     }
 
@@ -81,6 +83,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -92,6 +95,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static BlockState updateDistance(BlockState state, LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 2da67bd990b3f3762dfe089bf543cebac66378db..8dce485650f84258a4be063928c26f39c9baa70e 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -191,6 +191,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         LecternBlock.changePowered(world, pos, state, false);
     }
 
@@ -262,7 +263,8 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
             if (!world.isClientSide) {
                 this.openScreen(world, pos, player);
@@ -274,6 +276,7 @@ public class LecternBlock extends BaseEntityBlock {
 
             return !itemstack.isEmpty() && !itemstack.is(ItemTags.LECTERN_BOOKS) ? InteractionResult.CONSUME : InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index 057ff8ba1c924c032a03389dcf4f99b4b386fb0a..c17f2c6e081d2bfb4793860c74370734ce63046f 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -81,7 +81,8 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         BlockState iblockdata1;
 
         if (world.isClientSide) {
@@ -113,6 +114,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
             world.gameEvent((Entity) player, (Boolean) iblockdata1.getValue(LeverBlock.POWERED) ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     public BlockState pull(BlockState state, Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LightBlock.java b/src/main/java/net/minecraft/world/level/block/LightBlock.java
index 6eec44c484763f877aece6d9676ffc166bc10395..8f556ee2f562a6a5bb9b1ec89959a019d9f0c359 100644
--- a/src/main/java/net/minecraft/world/level/block/LightBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightBlock.java
@@ -44,7 +44,8 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (!world.isClientSide && player.canUseGameMasterBlocks()) {
             if (player.getItemInHand(hand).getItem() != Items.LIGHT || !player.mayInteract(world, pos) || !player.mayUseItemAt(pos, hit.getDirection(), player.getItemInHand(hand))) { return InteractionResult.FAIL; } // Paper
             world.setBlock(pos, state.cycle(LEVEL), 2);
@@ -52,6 +53,7 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
         } else {
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -76,11 +78,13 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index da3b301a42a93c891d083a6e02d1be8ed35adf1d..1cb449215e6604a2c55f27a0b9fd3f0ebe376ff8 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -59,11 +59,13 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
+                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -106,6 +108,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
         this.updateNeighbours(state, world, pos);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 4a1830f85f47014da63e4584f411d13f0f0cd8b3..4de40c3d6425bede6037a6953dc801112409b700 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -65,6 +65,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         state.getFluidState().randomTick(world, pos, random);
     }
 
@@ -135,15 +136,18 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getFluidState().isSource() || neighborState.getFluidState().isSource()) {
             world.scheduleTick(pos, state.getFluidState().getType(), this.fluid.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (this.shouldSpreadLiquid(world, pos, state)) {
             world.scheduleTick(pos, state.getFluidState().getType(), this.getFlowSpeed(world, pos)); // Paper
         }
diff --git a/src/main/java/net/minecraft/world/level/block/LoomBlock.java b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
index df6e87f910b4881d9fec53d4ad26d396886a3e82..a16537ae506d2f787345b8d607eae17437916d19 100644
--- a/src/main/java/net/minecraft/world/level/block/LoomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
@@ -25,7 +25,8 @@ public class LoomBlock extends HorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -33,6 +34,7 @@ public class LoomBlock extends HorizontalDirectionalBlock {
             player.awardStat(Stats.INTERACT_WITH_LOOM);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
index 1b766045687e4dcded5cbcc50b746c55b9a34e22..667064ac5ac3841c9fbfbac080ebdcf27f31d532 100644
--- a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
@@ -22,6 +22,7 @@ public class MagmaBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
             entity.hurt(world.damageSources().hotFloor(), 1.0F);
@@ -33,20 +34,24 @@ public class MagmaBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
             world.scheduleTick(pos, (Block) this, 20);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         world.scheduleTick(pos, (Block) this, 20);
+        blockBehaviour().onPlaceCallback(state, world, pos, oldState, notify); // MCCLab - Add Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index cf240750aecc57d287efc986b471e66a860850ee..97a62b2c59a8bdb58e9f5eda6bfd47db1380e3a2 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -69,17 +69,21 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return isHanging(state) ? world.getBlockState(pos.above()).is(Blocks.MANGROVE_LEAVES) : super.canSurvive(state, world, pos);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.UP && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
@@ -88,6 +92,7 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!isHanging(state)) {
             if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper
                 this.advanceTree(world, pos, state, random);
diff --git a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
index 7fc9ce525c32d32c911c3a027baff37ce93d9bcd..c365c7f2d4fe2fd7715e6354d2dfe09fba68f8b2 100644
--- a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
@@ -36,11 +36,13 @@ public class MangroveRootsBlock extends Block implements SimpleWaterloggedBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
index 51103a88432275b2e5d4351430fea022dbca34de..4d228b203536cca2d92703c6186fbacb587cce64 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
@@ -114,12 +114,14 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!hasAnyFace(state)) {
             return Blocks.AIR.defaultBlockState();
         } else {
             return hasFace(state, direction) && !canAttachTo(world, direction, neighborPos, neighborState) ? removeFace(state, getFaceProperty(direction)) : state;
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -128,6 +130,7 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         boolean bl = false;
 
         for(Direction direction : DIRECTIONS) {
@@ -142,6 +145,7 @@ public abstract class MultifaceBlock extends Block {
         }
 
         return bl;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 302c5a6401facf192677b89cc0e9190bb35b1229..2a37e60710bee7a9de7e37181f3dbb6728d3eb07 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -39,6 +39,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = 5;
             boolean flag = true;
@@ -80,11 +81,13 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is(BlockTags.MUSHROOM_GROW_BLOCK) ? true : world.getRawBrightness(pos, 0) < 13 && this.mayPlaceOn(iblockdata1, world, blockposition1);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     public boolean growMushroom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
         Optional<? extends Holder<ConfiguredFeature<?, ?>>> optional = world.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(this.feature);
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index a6ab0d0defc05e56a91084c49897059670a1324b..40c227a5f3812ef2fc7e6cce784bd0f46eb9f927 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -52,6 +52,7 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.dimensionType().natural() && world.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
             while (world.getBlockState(pos).is((Block) this)) {
                 pos = pos.below();
@@ -73,12 +74,14 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
         Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) state.getValue(NetherPortalBlock.AXIS);
         boolean flag = enumdirection_enumaxis1 != enumdirection_enumaxis && enumdirection_enumaxis.isHorizontal();
 
         return !flag && !neighborState.is((Block) this) && !(new PortalShape(world, pos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index e55720c4d2fbdf6aae526910e87a67c29cf906fd..33da0a88149ca4fdef8bceb081d117411d2b2199 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -42,6 +42,7 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index e46d84750bdd7c940f400efda226e12a3fdc3848..acdf6fa76c292aa4a18f2dcd19ba1fa4b1ab70a3 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -64,14 +64,17 @@ public class NoteBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return state; // Paper - prevent noteblock instrument from updating
         boolean flag = direction.getAxis() == Direction.Axis.Y;
 
         return flag ? this.setInstrument(world, pos, state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Paper - prevent noteblock powered-state from updating
         boolean flag1 = world.hasNeighborSignal(pos);
 
@@ -102,7 +105,9 @@ public class NoteBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(originalState, world, pos, player, hand, hit, () -> {
+        BlockState state = originalState;
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (itemstack.is(ItemTags.NOTE_BLOCK_TOP_INSTRUMENTS) && hit.getDirection() == Direction.UP) {
@@ -116,10 +121,12 @@ public class NoteBlock extends Block {
             player.awardStat(Stats.TUNE_NOTEBLOCK);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(blockBehaviour().isVanillaBlockAttackReplaced(state, world, pos, player)) return;  // MCCLab - Add custom Block behaviour
         if (!world.isClientSide) {
             this.playNote(player, state, world, pos);
             player.awardStat(Stats.PLAY_NOTEBLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index 47a3a9e0f0ba4f8a00828874e73d501d18f0ae1c..87e1cd69ffacb57bf9c172cbe8387540733eb21f 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -32,6 +32,7 @@ public class NyliumBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!NyliumBlock.canBeNylium(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.NETHERRACK.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 7b45d6b9a005036ca5051d089a7be792eb87012f..f32b135ffd90d12868af86ba278310884449565f 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -41,6 +41,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ObserverBlock.POWERED)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
@@ -63,11 +64,13 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(ObserverBlock.FACING) == direction && !(Boolean) state.getValue(ObserverBlock.POWERED)) {
             this.startSignal(world, pos);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private void startSignal(LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 1641453fd17938bc8fcdba7f89a0515ebeef20c5..920ef295f54353184f0fdffe9b4ddc721608785e 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -62,17 +62,21 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (isDouble(state.getValue(AGE))) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
             return state.canSurvive(world, pos) ? state : Blocks.AIR.defaultBlockState();
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return isLower(state) && !sufficientLight(world, pos) ? false : super.canSurvive(state, world, pos);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
@@ -111,6 +115,7 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper
         if (bl) {
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index cd943997f11f5ea5c600fdc6db96043fb0fa713c..c7ae1a28cc8a5e6675c32664cbb5a045172d4347 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -90,11 +90,14 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -121,6 +124,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                 return (BlockState) state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
             }
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -167,6 +171,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (PointedDripstoneBlock.isStalagmite(state) && !this.canSurvive(state, world, pos)) {
             world.destroyBlock(pos, true);
         } else {
@@ -177,6 +182,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         PointedDripstoneBlock.maybeTransferFluid(state, world, pos, random.nextFloat());
         if (random.nextFloat() < 0.011377778F && PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
             PointedDripstoneBlock.growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
diff --git a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
index 4568d1659dda897de5f6c2059629a4718d401e63..a35550e488e635c68d79cc966c80b6f9baa9a780 100644
--- a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
@@ -23,7 +23,8 @@ public class PumpkinBlock extends StemGrownBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemStack = player.getItemInHand(hand);
         if (itemStack.is(Items.SHEARS)) {
             if (!world.isClientSide) {
@@ -56,6 +57,7 @@ public class PumpkinBlock extends StemGrownBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 06760ff3d20bcfdc30f3f3ee65bc2a0d12d28aff..2763653994ffa10f0f921c8b9c381f9804bb097e 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -36,12 +36,14 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(blockBehaviour().isVanillaBlockAttackReplaced(state, world, pos, player)) return;
         RedStoneOreBlock.interact(state, world, pos, player); // CraftBukkit - add entityhuman
         super.attack(state, world, pos, player);
     }
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             // CraftBukkit start
             if (entity instanceof Player) {
@@ -63,7 +65,8 @@ public class RedStoneOreBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             RedStoneOreBlock.spawnParticles(world, pos);
         } else {
@@ -73,6 +76,7 @@ public class RedStoneOreBlock extends Block {
         ItemStack itemstack = player.getItemInHand(hand);
 
         return itemstack.getItem() instanceof BlockItem && (new BlockPlaceContext(player, hand, itemstack, hit)).canPlace() ? InteractionResult.PASS : InteractionResult.SUCCESS;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private static void interact(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) { // CraftBukkit - add Entity
@@ -95,6 +99,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 2b054439b7a763d5a3fbb5dbfe197cb9a9a3525c..a7d8d6943e2aa2bc864b3525c2772a685388ef57 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -166,6 +166,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : state;
         } else if (direction == Direction.UP) {
@@ -175,6 +176,7 @@ public class RedStoneWireBlock extends Block {
 
             return blockpropertyredstoneside.isConnected() == ((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction))).isConnected() && !RedStoneWireBlock.isCross(state) ? (BlockState) state.setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside) : this.getConnectionState(world, (BlockState) ((BlockState) this.crossState.setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER))).setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside), pos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static boolean isCross(BlockState state) {
@@ -242,10 +244,12 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return this.canSurviveOn(world, blockposition1, iblockdata1);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
@@ -526,6 +530,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             // Paper start - optimize redstone (Alternate Current)
             // Alternate Current handles breaking of redstone wires in the WireHandler.
@@ -658,7 +663,8 @@ public class RedStoneWireBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
@@ -676,6 +682,7 @@ public class RedStoneWireBlock extends Block {
 
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private void updatesOnShapeChange(Level world, BlockPos pos, BlockState oldState, BlockState newState) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 64136745aad7ddbfdfbb8040832a58422d24e8ae..1d23a7d8268f1b63167e3ba999729d6c3168dfe0 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -29,6 +29,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;  // MCCLab - Add custom Block behaviour
         if (!world.isClientSide) {
             boolean flag1 = (Boolean) state.getValue(RedstoneLampBlock.LIT);
 
@@ -50,6 +51,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index c91535f6c0bbc870fad7e04b9d341783cfcbbd63..37a42f0b2612d18ba133a63c1871fdc5c3efcd6e 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -72,6 +72,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         boolean flag = this.hasNeighborSignal(world, pos, state);
         // Paper start
         java.util.ArrayDeque<RedstoneTorchBlock.Toggle> redstoneUpdateInfos = world.redstoneUpdateInfos;
@@ -124,6 +125,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if ((Boolean) state.getValue(RedstoneTorchBlock.LIT) == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
             world.scheduleTick(pos, (Block) this, 2);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
index e5a4525ae64454ec1400de1e4e7945b2caa675f8..50dd59f8d2f00507a02e09ba97de7ca96948f061 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
@@ -38,13 +38,17 @@ public class RedstoneWallTorchBlock extends RedstoneTorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return Blocks.WALL_TORCH.canSurvive(state, world, pos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return Blocks.WALL_TORCH.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
index 5121603ab0fe02dafd3893e3ef7c7298d41e4f81..dd20237fdb365d299e83cec4dd4433f188b9bec8 100644
--- a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
@@ -29,13 +29,15 @@ public class RepeaterBlock extends DiodeBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
             world.setBlock(pos, state.cycle(DELAY), 3);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -51,11 +53,14 @@ public class RepeaterBlock extends DiodeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
-            return Blocks.AIR.defaultBlockState();
-        } else {
-            return !world.isClientSide() && direction.getAxis() != state.getValue(FACING).getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
+                return Blocks.AIR.defaultBlockState();
+            } else {
+                return !world.isClientSide() && direction.getAxis() != state.getValue(FACING)
+                                                                            .getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index 2ed78cf83c0ae66a6ddba1ff307da89a24b0d0a8..10516e83e791003a5de90949e2344f90b4798f68 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -55,7 +55,8 @@ public class RespawnAnchorBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (hand == InteractionHand.MAIN_HAND && !RespawnAnchorBlock.isRespawnFuel(itemstack) && RespawnAnchorBlock.isRespawnFuel(player.getItemInHand(InteractionHand.OFF_HAND))) {
@@ -93,6 +94,7 @@ public class RespawnAnchorBlock extends Block {
 
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private static boolean isRespawnFuel(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 53ac4e618fec3fe384d8a106c521f3eace0b5b35..6ff1b71fdcfec65b90f07305a70e3cde52d17f0d 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -42,6 +42,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.advanceTree(world, pos, state, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index e9358522e526505d5c200e19b193bbcf5ee10826..8bf41224cdffd5411d73888fbb6bec3d36773a26 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -80,6 +80,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -89,10 +90,12 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = ScaffoldingBlock.getDistance(world, pos);
         BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, pos, i));
 
@@ -110,7 +113,9 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return ScaffoldingBlock.getDistance(world, pos) < 7;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 031398e6afeec4c9db64a25fc0f55e5a5baa0990..29fc2b8c3afc4b95ecf69a023430f91b82f37509 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -35,6 +35,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, false), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 2ccbf171089ed4d166428445fdfdf1262c1dd65d..9c3a0432c5b278fe2020e2ea46f4559eb9d7358c 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -83,6 +83,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
             if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
                 world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
@@ -98,6 +99,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!world.isClientSide() && SculkSensorBlock.canActivate(state) && entity.getType() != EntityType.WARDEN) {
             // CraftBukkit start
             org.bukkit.event.Cancellable cancellable;
@@ -152,11 +154,13 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static void updateNeighbours(Level world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index 02d01eabb9606ae8c3b76ad9fa4bb9a525e247b1..7ed534c88fc621d11c1823e4805dcb2bb771bd65 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -51,6 +51,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
             ServerPlayer entityplayer = SculkShriekerBlockEntity.tryGetPlayer(entity);
@@ -83,6 +84,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, false), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
@@ -120,11 +122,13 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index 6142ea7b5d46a30b1a923a54410ca9de7cceb2bb..2b158d78b7b39de32500d072854e26a25af07de5 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -174,11 +174,13 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
index 51c464065e506df3ad16d4118b619fed8cf1b303..2f5091835d77cf3c97c77de8e133094b5958b778 100644
--- a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
@@ -61,12 +61,15 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockPos blockPos = pos.below();
         return this.mayPlaceOn(world.getBlockState(blockPos), world, blockPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -76,6 +79,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
index c403ac42e54b92128cc4bd8ce8dd42875271897f..52b28fa4ac4a87ae152797061569befc3657c33f 100644
--- a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
@@ -48,12 +48,14 @@ public class SeagrassBlock extends BushBlock implements BonemealableBlock, Liqui
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        if (!blockState.isAir()) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            if (!blockState.isAir()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return blockState;
+            return blockState;
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
index d5fe3b8e2f5a8899f6afeb0600764284a617f261..cb7f6d153ad25f5c4cd7b97e45b60d6cb968a98e 100644
--- a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
@@ -90,7 +90,8 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else if (player.isSpectator()) {
@@ -110,6 +111,7 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
                 return InteractionResult.PASS;
             }
         }
+        }); // MCCLab - Add custom Block behaviour
     }
 
     private static boolean canOpen(BlockState state, Level world, BlockPos pos, ShulkerBoxBlockEntity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/SignBlock.java b/src/main/java/net/minecraft/world/level/block/SignBlock.java
index 614777d15bcf4141a89d0a0f7bd880526c668ffd..c851ceaff6961723c4dcd9d97137ca1b2575a702 100644
--- a/src/main/java/net/minecraft/world/level/block/SignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SignBlock.java
@@ -52,11 +52,13 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SignBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -75,7 +77,8 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
         Item item1 = itemstack.getItem();
@@ -126,6 +129,7 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
         } else {
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private InteractionResult getInteractionResult(boolean usedSignChanger) {
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index 12013498de68f9176e172c568d527819026da14e..23a7151ea379731831dc12f726f2f5d7b6ce4d9c 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -45,6 +45,7 @@ public class SlimeBlock extends HalfTransparentBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         double d = Math.abs(entity.getDeltaMovement().y);
         if (d < 0.1D && !entity.isSteppingCarefully()) {
             double e = 0.4D + d * 0.2D;
diff --git a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
index ff1121e12e4d74a0c23dca4ee9d741e6d4d7d305..abed984262c2320c8dc9e66e9ecdfbe98ccab452 100644
--- a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
@@ -70,6 +70,7 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -77,15 +78,18 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
             BlockState blockState = world.getBlockState(blockPos);
             return this.mayPlaceOn(blockState, world, blockPos);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java b/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
index 83092896ba160a11e1e46ecd19d9d0b3bb51c46e..15f4095b93548f787eaacb249319f803860fc5d0 100644
--- a/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
@@ -30,7 +30,8 @@ public class SmithingTableBlock extends CraftingTableBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -38,5 +39,6 @@ public class SmithingTableBlock extends CraftingTableBlock {
             player.awardStat(Stats.INTERACT_WITH_SMITHING_TABLE);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
index 16c5be04658a66ff94f2aad8782e34f450e9a729..6657d343884f1ae7db79269418621c1ce123bac3 100644
--- a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
@@ -64,6 +64,7 @@ public class SnifferEggBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isReadyToHatch(state)) {
             // Paper start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(HATCH, Integer.valueOf(this.getHatchLevel(state) + 1)), 2)) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 14e00c7feb1c051d56a3d27cd00dcef072dd771a..4772572bafdbddaac1a6af4f07951ddc88e53dd2 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -79,18 +79,23 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 8);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
index f95284fcf5b9c922227670b9357523eba9b7ffcc..c8a653d1f55972b1d98359bd4a82172a81c13b16 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
@@ -21,7 +21,9 @@ public class SnowyDirtBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
index 853890258cbe12221b588ff37a3a28fdf3f55520..d830f0efe17d3c07c22687c553a5fce6bba9df77 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
@@ -15,12 +15,16 @@ public class SoulFireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return this.canSurvive(state, world, pos) ? this.defaultBlockState() : Blocks.AIR.defaultBlockState();
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return canSurviveOnBlock(world.getBlockState(pos.below()));
+        });  // MCCLab - Add custom Block behaviour
     }
 
     public static boolean canSurviveOnBlock(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
index 1f228adaa95e03bede7865cefe1bbb5127fe4cc9..23974727f6cd0d4ee1b3cf151f5b6199b351aa77 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
@@ -39,16 +39,19 @@ public class SoulSandBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
-            world.scheduleTick(pos, this, 20);
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
+                world.scheduleTick(pos, this, 20);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index d810f6bf9a8a354e5b8994e51ec3672428277dde..facc1ae8359adb8b13bc69ccf1e3ad0b1bf075b4 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -37,6 +37,7 @@ public class SpongeBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         this.tryAbsorbWater(world, pos);
         super.neighborChanged(state, world, pos, sourceBlock, sourcePos, notify);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
index 46fffca9563f7d665df54a3d9cabed1dda67ee6e..bc52f23eee2c90b37d5d9e9aae284a88c808af9f 100644
--- a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
@@ -26,13 +26,17 @@ public class SporeBlossomBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return Block.canSupportCenter(world, pos.above(), Direction.DOWN) && !world.isWaterAt(pos);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index 9bbb9f8e917288bb0d11661a1399a05631ebcce0..81f749cf0d0100f4b288e39779b9103be0930fab 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -51,6 +51,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this instanceof GrassBlock && world.paperConfig().tickRates.grassSpread != 1 && (world.paperConfig().tickRates.grassSpread < 1 || (MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.grassSpread != 0)) { return; } // Paper
         // Paper start
         net.minecraft.world.level.chunk.ChunkAccess cachedBlockChunk = world.getChunkIfLoaded(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/StairBlock.java b/src/main/java/net/minecraft/world/level/block/StairBlock.java
index 827713a332baa6d280cd61d40faf8f6243b3b08c..8dd484ce122a415404f2f90a0320dfcd1404b051 100644
--- a/src/main/java/net/minecraft/world/level/block/StairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StairBlock.java
@@ -109,6 +109,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(blockBehaviour().isVanillaBlockAttackReplaced(state, world, pos, player)) return;  // MCCLab - Add custom Block behaviour
         this.baseState.attack(world, pos, player);
     }
 
@@ -139,6 +140,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         this.base.stepOn(world, pos, state, entity);
     }
 
@@ -149,17 +151,21 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.randomTick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.tick(state, world, pos, random);
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         return this.baseState.use(world, player, hand, hit);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -178,12 +184,14 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getAxis().isHorizontal() ? state.setValue(SHAPE, getStairsShape(state, world, pos)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static StairsShape getStairsShape(BlockState state, BlockGetter world, BlockPos pos) {
         Direction direction = state.getValue(FACING);
diff --git a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
index 51dc1a0e572c7a1bdef99d7cf69ebe699702cc49..7b3b386d0c610629f3ad5b93721a0cfb633c70dd 100644
--- a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
@@ -25,7 +25,9 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return world.getBlockState(pos.below()).isSolid();
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -36,8 +38,10 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 0d9be3b28ba4957c3f4da5455283fca903836c91..ce492842d65684ba9eb0175c8cf6d714152fb9bc 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -50,6 +50,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
index 0a95842c53a9d0286c57bcb42db97e468e30fb7d..a1a696535e043822bfde7980c63b7a8fba1d0b24 100644
--- a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
@@ -40,7 +40,8 @@ public class StonecutterBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -48,6 +49,7 @@ public class StonecutterBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_STONECUTTER);
             return InteractionResult.CONSUME;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/StructureBlock.java b/src/main/java/net/minecraft/world/level/block/StructureBlock.java
index a3dac53b07618819b322b48339d850d80a1c55ba..c7cc82db3fb558d5c3060663b8d93412c6f9c0f1 100644
--- a/src/main/java/net/minecraft/world/level/block/StructureBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StructureBlock.java
@@ -33,13 +33,15 @@ public class StructureBlock extends BaseEntityBlock implements GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof StructureBlockEntity) {
             return ((StructureBlockEntity)blockEntity).usedBy(player) ? InteractionResult.sidedSuccess(world.isClientSide) : InteractionResult.PASS;
         } else {
             return InteractionResult.PASS;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
@@ -67,6 +69,7 @@ public class StructureBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world instanceof ServerLevel) {
             BlockEntity blockEntity = world.getBlockEntity(pos);
             if (blockEntity instanceof StructureBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c3f500580d257e1397f2eb7c47b063a6fe6bb405..31c825f732f9110f55b6a3a6159087c13847c51f 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -37,6 +37,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.isEmptyBlock(pos.above())) {
             int i;
 
@@ -69,16 +71,19 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState iblockdata1 = world.getBlockState(pos.below());
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
+            BlockState iblockdata1 = world.getBlockState(pos.below());
 
         if (iblockdata1.is((Block) this)) {
             return true;
@@ -98,8 +103,9 @@ public class SugarCaneBlock extends Block {
                 }
             }
 
-            return false;
-        }
+                return false;
+            }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 34eb7ba1adb51e394bf46a6f643db3529626d9ec..b2fbbf34f12af8068193ebad6b451af7f63e992c 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -64,6 +64,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
@@ -95,7 +96,8 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
         boolean flag = i == 3;
 
@@ -122,6 +124,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
index ecc58329ca169a8f3ae813ddcbc58a2e28fd837c..4598a7794d3d66123390629f47a80d2e017ab405 100644
--- a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
@@ -60,6 +60,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             BlockState blockState = world.getBlockState(pos.below());
             return blockState.is(this) && blockState.getValue(HALF) == DoubleBlockHalf.LOWER;
@@ -67,6 +68,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
             FluidState fluidState = world.getFluidState(pos);
             return super.canSurvive(state, world, pos) && fluidState.is(FluidTags.WATER) && fluidState.getAmount() == 8;
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 69eaf1341d282c4783dab84533ea2c053deed529..dac3be1a743782485644f0fa11133911d68ace60 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -96,6 +96,7 @@ public class TargetBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (state.getValue(OUTPUT_POWER) != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index d73589ac6076f82f516c368acb17d280fb3c47e5..9e83a0ab1f720d7be9a76638f49e802dd6b10203 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -57,6 +57,7 @@ public class TntBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world.hasNeighborSignal(pos) && CraftEventFactory.callTNTPrimeEvent(world, pos, PrimeCause.REDSTONE, null, sourcePos)) { // CraftBukkit - TNTPrimeEvent
             // Paper start - TNTPrimeEvent
             org.bukkit.block.Block tntBlock = io.papermc.paper.util.MCUtil.toBukkitBlock(world, pos);
@@ -112,7 +113,8 @@ public class TntBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (!itemstack.is(Items.FLINT_AND_STEEL) && !itemstack.is(Items.FIRE_CHARGE)) {
@@ -146,6 +148,7 @@ public class TntBlock extends Block {
             player.awardStat(Stats.ITEM_USED.get(item));
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchBlock.java b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
index 6f85a193e7661cfa61ad169aae1477bc07c9a9ff..4c7629b92d5c644f7ca411c4786e1091c90b85ae 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
@@ -31,12 +31,16 @@ public class TorchBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return canSupportCenter(world, pos.below(), Direction.UP);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 092759184adbf27ce942a148169e60d3a28c2cc7..1a81445b4f068238580ad6f190994f894babd063 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -58,6 +58,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index b9e3c9cd709d42bced85436720ccc7b9c7e49552..db1e3d20f4280ac919b62e864835088ef0447213 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -85,7 +85,9 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(originalState, world, pos, player, hand, hit, () -> {
+        BlockState state = originalState;
         if (!this.type.canOpenByHand()) {
             return InteractionResult.PASS;
         } else {
@@ -98,6 +100,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
             this.playSound(player, world, pos, (Boolean) state.getValue(TrapDoorBlock.OPEN));
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     protected void playSound(@Nullable Player player, Level world, BlockPos pos, boolean open) {
@@ -107,6 +110,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
 
@@ -188,10 +192,12 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index cb2ff8d94308c637a498d2737f86f6af4c9c1b83..53733cd9a646996179c4c992f8ca66b3165f9b28 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -62,9 +62,11 @@ public class TripWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
         return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -144,6 +146,7 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
         if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
             this.checkPressed(world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 004dce26ff073f1de52a84cd425c4f60fdab5e50..06546a69a40796a36669ab2d289f16f441a6ff41 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -64,17 +64,21 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return enumdirection.getAxis().isHorizontal() && iblockdata1.isFaceSturdy(world, blockposition1, enumdirection);
-    }
+        });  // MCCLab - Add custom Block behaviour
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(TripWireHookBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -207,6 +211,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 07157822659288e76b2fba34db8d5d566506f33b..292827e5a028860198bcbf49699ae7b16b672369 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -51,6 +51,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(blockBehaviour().isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             this.destroyEgg(world, state, pos, entity, 100);
         }
@@ -105,6 +106,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
             int i = (Integer) state.getValue(TurtleEggBlock.HATCH);
 
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 698ef6ee1c8d08bb38e2775804c1333222b0d73d..3dc2685fe54ab0c03bf1cb95431ff98431117d5e 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -87,7 +87,9 @@ public class VineBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return this.hasFaces(this.getUpdatedState(state, world, pos));
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private boolean hasFaces(BlockState state) {
@@ -166,6 +168,7 @@ public class VineBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
@@ -173,10 +176,12 @@ public class VineBlock extends Block {
 
             return !this.hasFaces(iblockdata2) ? Blocks.AIR.defaultBlockState() : iblockdata2;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
             if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
                 Direction enumdirection = Direction.getRandom(random);
diff --git a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
index e6719fc04011b9d9378eef128701a289b4507a1f..b018dece2cd1f10f5e12ea76d9dc4adf7fe527ea 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
@@ -33,13 +33,17 @@ public class WallBannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(FACING).getOpposite() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallBlock.java b/src/main/java/net/minecraft/world/level/block/WallBlock.java
index d1d0fa66aa0c3e481b6d68fe36147040a730293f..807804ae7bc07698ad3777279f368a1a1b352984 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBlock.java
@@ -149,15 +149,17 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        if (direction == Direction.DOWN) {
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        } else {
-            return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
-        }
+            if (direction == Direction.DOWN) {
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            } else {
+                return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
+            }
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private static boolean isConnected(BlockState state, Property<WallSide> property) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
index ae232311f12c72ff62d3d18f25e3ebf46ce1ace2..6ffb3d7326f1815ddb1b570391f092757df5424b 100644
--- a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
@@ -49,7 +49,8 @@ public class WallHangingSignBlock extends SignBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> {  // MCCLab - Add custom Block behaviour
         BlockEntity itemStack = world.getBlockEntity(pos);
         if (itemStack instanceof SignBlockEntity signBlockEntity) {
             // Paper start - decompile fixes
@@ -61,6 +62,7 @@ public class WallHangingSignBlock extends SignBlock {
         }
 
         return super.use(state, world, pos, player, hand, hit);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     private boolean shouldTryToChainAnotherHangingSign(BlockState state, Player player, BlockHitResult hitResult, SignBlockEntity sign, ItemStack stack) {
@@ -131,8 +133,10 @@ public class WallHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getAxis() == state.getValue(FACING).getClockWise().getAxis() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
index 0065941d41830309a27eed7643b213b0215d395e..44cb6f3803fe974b57af5d22f2c621e45e65fb94 100644
--- a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
@@ -45,7 +45,9 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> {  // MCCLab - Add custom Block behaviour
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Nullable
@@ -72,8 +74,10 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
index 5f8d2d9e0763c50ec1ca3e06a71f7ecf35d4c46a..3b4020717418d166adfe94ae282fa11b60e62374 100644
--- a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
@@ -47,10 +47,12 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCClab start - Add Block behaviour
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });  // MCCLab - Add custom Block behaviour
     }
 
     @Nullable
@@ -76,8 +78,10 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
index 05cccc33e7745eb3a905a804b318aaa6bd440d04..d86e35f1542abe2699c010b92e08f7e2323de478 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperFullBlock extends Block implements WeatheringCopper
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
index 37d7fb85a05521e4acb6a79997b661c1895bb7ed..c87da069730ac26c6df7bca97b4576e6076ebf80 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperSlabBlock extends SlabBlock implements WeatheringCo
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
index 728a607bb28f10955397744970554efe297ea5ca..f151cdc8615e0d1b91023ad860fce6bc357a08cd 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -16,6 +17,7 @@ public class WeatheringCopperStairBlock extends StairBlock implements Weathering
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 5acf0e1fba2967e67bdb208ef73ae8fa84ffe35d..02f8447ebe34b7410b9dd9b9912b93e42bf2a804 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -38,7 +38,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 // CraftBukkit start
-import com.google.common.collect.ImmutableList;
 import java.util.AbstractList;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
@@ -99,6 +98,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Add BlockBehaviour
         if (!world.isClientSide) {
             this.checkIfExtend(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index 6091e3c3adbcc92c9ca438c301a99f646e3cb549..28b4ea521753619484be79af199d1745e1b5d87b 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -126,17 +126,22 @@ public class PistonHeadBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
-        return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
-    }
+        return blockBehaviour().canSurvive(state, world, pos, () -> { // MCCLab - Add BlockBehaviour
+            BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
+            return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return; // MCCLab - Add BlockBehaviour
         if (state.canSurvive(world, pos)) {
             world.neighborChanged(pos.relative(state.getValue(FACING).getOpposite()), sourceBlock, sourcePos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e6a4a5898ffdcb2aa2bc01371a6d7dbc06d610ce..ce6fb51f27894b84cf3882b223d66291f2c898c0 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -13,6 +13,7 @@ import java.util.function.Predicate;
 import java.util.function.ToIntFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -129,7 +130,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return state;
+        return blockBehaviour().updateShape(state, direction, neighborState, world, pos, neighborPos, state); // MCCLab start - Add BlockBehaviour
     }
 
     /** @deprecated */
@@ -141,6 +142,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(blockBehaviour().isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         DebugPackets.sendNeighborsUpdatePacket(world, pos);
     }
 
@@ -163,13 +165,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
-
+        blockBehaviour().onRemoveCallback(state, world, pos, state, moved); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
     @Deprecated
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        return InteractionResult.PASS;
+        return blockBehaviour().use(state, world, pos, player, hand, hit, () -> InteractionResult.PASS); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -301,7 +303,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return true;
+        return blockBehaviour().canSurvive(state, world, pos, true); // MCClab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -349,12 +351,15 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     /** @deprecated */
     @Deprecated
-    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
+    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(blockBehaviour().isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
+    }
 
     /** @deprecated */
     @Deprecated
@@ -376,7 +381,8 @@ public abstract class BlockBehaviour implements FeatureElement {
 
     /** @deprecated */
     @Deprecated
-    public void attack(BlockState state, Level world, BlockPos pos, Player player) {}
+    public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(blockBehaviour().isVanillaBlockAttackReplaced(state, world, pos, player)) return;}
 
     /** @deprecated */
     @Deprecated
@@ -420,6 +426,12 @@ public abstract class BlockBehaviour implements FeatureElement {
         return this.properties.destroyTime;
     }
 
+    // MCCLab start - Adding BlockBehaviour
+    public static de.verdox.mccreativelab.behaviour.BlockBehaviourUtil blockBehaviour(){
+        return de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance();
+    }
+    // MCCLab end - Adding BlockBehaviour
+
     public static class Properties {
 
         Function<BlockState, MapColor> mapColor = (iblockdata) -> {
@@ -916,7 +928,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void initCache() {
             this.fluidState = ((Block) this.owner).getFluidState(this.asState());
-            this.isRandomlyTicking = ((Block) this.owner).isRandomlyTicking(this.asState());
+            this.isRandomlyTicking = blockBehaviour().isRandomlyTicking(this.asState(), ((Block) this.owner).isRandomlyTicking(this.asState()));
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
@@ -1195,6 +1207,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void onPlace(Level world, BlockPos pos, BlockState state, boolean notify) {
             this.getBlock().onPlace(this.asState(), world, pos, state, notify);
+            blockBehaviour().onPlaceCallback(this.asState(), world, pos, state, notify); // MCCLab - Add Block behaviour
         }
 
         public void onRemove(Level world, BlockPos pos, BlockState state, boolean moved) {
@@ -1296,6 +1309,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         @Nullable
         public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockEntityType<T> blockEntityType) {
+            //TODO: Enable / disable block entity ticking in BlockBehaviour
             return this.getBlock() instanceof EntityBlock ? ((EntityBlock) this.getBlock()).getTicker(world, this.asState(), blockEntityType) : null;
         }
 
@@ -1311,6 +1325,15 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // MCCLab start - Add BlockBehaviour
+        public final boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState){
+            if(world == null || x == -1 || z == -1 || blockState == null)
+                return this.isRandomlyTicking();
+            return blockBehaviour().isRandomlyTicking(world, x, y,z,blockState, this.isRandomlyTicking());
+        }
+
+        // MCCLab end - Add BlockBehaviour
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index f0de72afad4bb571153436399386a6a8a70582a6..f5bc52019b0e4748cc97c3098dcb559860a42d73 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -28,6 +28,11 @@ public class LevelChunkSection {
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
     // Paper start - optimise collisions
     private int specialCollidingBlocks;
+    // MCCLab start - Add BlockBehaviour
+    private net.minecraft.world.level.Level level;
+    private net.minecraft.world.level.ChunkPos chunkPos;
+    private int chunkSectionY;
+    // MCCLab end - Add BlockBehaviour
 
     private void updateBlockCallback(final int x, final int y, final int z, final BlockState oldState, final BlockState newState) {
         if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(newState)) {
@@ -53,6 +58,11 @@ public class LevelChunkSection {
     // Paper start - Anti-Xray - Add parameters
     @Deprecated @io.papermc.paper.annotation.DoNotUse public LevelChunkSection(Registry<Biome> biomeRegistry) { this(biomeRegistry, null, null, 0); }
     public LevelChunkSection(Registry<Biome> biomeRegistry, net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, int chunkSectionY) {
+        // MCCLab start - Add BlockBehaviour
+        this.level = level;
+        this.chunkPos = chunkPos;
+        this.chunkSectionY = chunkSectionY;
+        // MCCLab end - Add BlockBehaviour
         // Paper end
         this.states = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, level == null || level.chunkPacketBlockController == null ? null : level.chunkPacketBlockController.getPresetBlockStates(level, chunkPos, chunkSectionY)); // Paper - Anti-Xray - Add preset block states
         this.biomes = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null); // Paper - Anti-Xray - Add preset biomes
@@ -87,12 +97,18 @@ public class LevelChunkSection {
             iblockdata1 = (BlockState) this.states.getAndSetUnchecked(x, y, z, state);
         }
 
+        // MCCLab start - Add BlockBehaviour
+        int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+        int globalY = chunkSectionY << 4 + y;
+        int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+        // MCCLab end - Add BlockBehaviour
+
         FluidState fluid = iblockdata1.getFluidState();
         FluidState fluid1 = state.getFluidState();
 
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
-            if (iblockdata1.isRandomlyTicking()) {
+            if (iblockdata1.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
@@ -106,7 +122,7 @@ public class LevelChunkSection {
 
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
-            if (state.isRandomlyTicking()) {
+            if (state.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
@@ -148,9 +164,20 @@ public class LevelChunkSection {
         this.states.forEachLocation((BlockState iblockdata, int i) -> {
             FluidState fluid = iblockdata.getFluidState();
 
+            // MCCLab start - Add BlockBehaviour
+            int sizedBitsOfBlockStatePalette = 4;
+            int x = i & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int z = (i >> sizedBitsOfBlockStatePalette) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int y = (i >> (sizedBitsOfBlockStatePalette * 2)) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+
+            int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+            int globalY = chunkSectionY << 4 + y;
+            int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+            // MCCLab end - Add BlockBehaviour
+
             if (!iblockdata.isAir()) {
                 this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
-                if (iblockdata.isRandomlyTicking()) {
+                if (iblockdata.isRandomlyTicking(level, globalX, globalY, globalZ, iblockdata)) { // MCCLab start - Add BlockBehaviour
                     this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                     this.tickingList.add(i, iblockdata);
                 }
diff --git a/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
index 4ee48ef89f0e31a7bda4b04453fca8177874f540..d85daf2cebfa7be64914b07092fec2b2eee51f44 100644
--- a/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
+++ b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
@@ -2,7 +2,6 @@ package io.papermc.paper.entity;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import net.minecraft.world.entity.MobType;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.EntityCategory;
@@ -10,7 +9,6 @@ import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.util.Map;
-import java.util.Set;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
