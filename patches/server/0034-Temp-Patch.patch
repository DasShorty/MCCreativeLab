From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 7 Apr 2024 22:16:43 +0200
Subject: [PATCH] Temp Patch


diff --git a/src/main/java/de/verdox/mccreativelab/Benchmark.java b/src/main/java/de/verdox/mccreativelab/Benchmark.java
new file mode 100644
index 0000000000000000000000000000000000000000..63609d679e4d3f364d488a6e7470050512730e77
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/Benchmark.java
@@ -0,0 +1,27 @@
+package de.verdox.mccreativelab;
+
+import net.minecraft.server.MinecraftServer;
+
+public class Benchmark {
+    private final String name;
+    private long start;
+    public Benchmark(String name){
+        this.name = name;
+    }
+
+    public void start(){
+        start = System.currentTimeMillis();
+    }
+
+    public void stop(){
+        long end = System.currentTimeMillis() - start;
+        MinecraftServer.LOGGER.warn("Benchmark "+name+" took "+end+"ms");
+    }
+
+    public static void doBenchmark(String name, Runnable runnable){
+        Benchmark benchmark = new Benchmark(name);
+        benchmark.start();
+        runnable.run();
+        benchmark.stop();
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/worldgen/CircularDensity.java b/src/main/java/de/verdox/mccreativelab/worldgen/CircularDensity.java
index 0a90b7ed6ad94392cd5bc36e83c6fb260af5a6bb..2d0c5a7e1b6024e541d4db3628bd9b4124d8a18f 100644
--- a/src/main/java/de/verdox/mccreativelab/worldgen/CircularDensity.java
+++ b/src/main/java/de/verdox/mccreativelab/worldgen/CircularDensity.java
@@ -3,10 +3,12 @@ package de.verdox.mccreativelab.worldgen;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.KeyDispatchDataCodec;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.levelgen.DensityFunction;
+import net.minecraft.world.level.levelgen.NoiseRouter;
 import net.minecraft.world.level.levelgen.synth.ImprovedNoise;
 
 public class CircularDensity implements DensityFunction.SimpleFunction {
@@ -38,13 +40,21 @@ public class CircularDensity implements DensityFunction.SimpleFunction {
     }
 
     private double computeRaw(int x, int z) {
-        double distance = Mth.sqrt(x * x + z * z);
-        double angle = distance * scale;
-        return Math.cos(angle + Math.PI) + improvedNoise.noise(x, 0, z) * 0.05;
-    }
+        double a = patternRadius * 100 * 2;
+        double b = 1.0 / 700;
+
+        int radius = (int) Math.sqrt(
+            Math.pow(patternRadius, 2) +
+                a * Math.sin(b * x) +
+                a * Math.sin(b * Math.PI * x) +
+                a * Math.sin(b * Math.E * x) +
+                a * Math.sin(b * z) +
+                a * Math.sin(b * Math.PI * z) +
+                a * Math.sin(b * Math.E * z)
+        );
 
-    private double noise(int x, int z) {
-        return Math.sin(x * 0.1) + Math.cos(z * 0.1);
+        double value = /* Distance to center -> */ Math.sqrt(x * x + z * z) * /* SCALE -> */ 2 * Math.PI / radius;
+        return Math.cos(value + (13.0 / 16 * Math.PI));
     }
 
     @Override
diff --git a/src/main/java/io/papermc/paper/world/worldgen/CraftDensityFunction.java b/src/main/java/io/papermc/paper/world/worldgen/CraftDensityFunction.java
new file mode 100644
index 0000000000000000000000000000000000000000..2cb1aebee45d612f0ddb50d6daba33c992703251
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/worldgen/CraftDensityFunction.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.world.worldgen;
+
+public class CraftDensityFunction implements DensityFunction {
+    private final net.minecraft.world.level.levelgen.DensityFunction handle;
+
+    public CraftDensityFunction(net.minecraft.world.level.levelgen.DensityFunction handle) {
+        this.handle = handle;
+    }
+
+    @Override
+    public double compute(int x, int y, int z) {
+        return handle.compute(new net.minecraft.world.level.levelgen.DensityFunction.SinglePointContext(x,y,z));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/worldgen/CraftNoiseRouter.java b/src/main/java/io/papermc/paper/world/worldgen/CraftNoiseRouter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e581caca5e5fda7b07eb1822705d45cd54cb3c8f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/worldgen/CraftNoiseRouter.java
@@ -0,0 +1,84 @@
+package io.papermc.paper.world.worldgen;
+
+public class CraftNoiseRouter implements NoiseRouter{
+    private final net.minecraft.world.level.levelgen.NoiseRouter handle;
+
+    public CraftNoiseRouter(net.minecraft.world.level.levelgen.NoiseRouter handle){
+        this.handle = handle;
+    }
+
+    @Override
+    public DensityFunction barrierNoise() {
+        return new CraftDensityFunction(handle.barrierNoise());
+    }
+
+    @Override
+    public DensityFunction fluidLevelFloodednessNoise() {
+        return new CraftDensityFunction(handle.fluidLevelFloodednessNoise());
+    }
+
+    @Override
+    public DensityFunction fluidLevelSpreadNoise() {
+        return new CraftDensityFunction(handle.fluidLevelSpreadNoise());
+    }
+
+    @Override
+    public DensityFunction lavaNoise() {
+        return new CraftDensityFunction(handle.lavaNoise());
+    }
+
+    @Override
+    public DensityFunction temperature() {
+        return new CraftDensityFunction(handle.temperature());
+    }
+
+    @Override
+    public DensityFunction vegetation() {
+        return new CraftDensityFunction(handle.vegetation());
+    }
+
+    @Override
+    public DensityFunction continents() {
+        return new CraftDensityFunction(handle.continents());
+    }
+
+    @Override
+    public DensityFunction erosion() {
+        return new CraftDensityFunction(handle.erosion());
+    }
+
+    @Override
+    public DensityFunction depth() {
+        return new CraftDensityFunction(handle.depth());
+    }
+
+    @Override
+    public DensityFunction ridges() {
+        return new CraftDensityFunction(handle.ridges());
+    }
+
+    @Override
+    public DensityFunction initialDensityWithoutJaggedness() {
+        return new CraftDensityFunction(handle.initialDensityWithoutJaggedness());
+    }
+
+    @Override
+    public DensityFunction finalDensity() {
+        return new CraftDensityFunction(handle.finalDensity());
+    }
+
+    @Override
+    public DensityFunction veinToggle() {
+        return new CraftDensityFunction(handle.veinToggle());
+    }
+
+    @Override
+    public DensityFunction veinRidged() {
+        return new CraftDensityFunction(handle.veinRidged());
+    }
+
+    @Override
+    public DensityFunction veinGap() {
+        return new CraftDensityFunction(handle.veinGap());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/worldgen/CraftWorldGenData.java b/src/main/java/io/papermc/paper/world/worldgen/CraftWorldGenData.java
new file mode 100644
index 0000000000000000000000000000000000000000..0efa9f3d64eaac6059d39920cb9394a80803a970
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/worldgen/CraftWorldGenData.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.world.worldgen;
+
+import net.minecraft.server.level.ServerLevel;
+
+public class CraftWorldGenData implements WorldGenData{
+    private final ServerLevel serverLevel;
+
+    public CraftWorldGenData(ServerLevel serverLevel){
+        this.serverLevel = serverLevel;
+    }
+
+    @Override
+    public NoiseRouter getNoiseRouter() {
+        return new CraftNoiseRouter(this.serverLevel.chunkSource.randomState().router());
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ae1d8b5cb973ae6a4001bc0d19e8cee2029214ac..4a78000eeda96cfebb1c4a65795ca4b0de2f5cc4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
+import de.verdox.mccreativelab.Benchmark;
 import de.verdox.mccreativelab.ai.builder.AIFactory;
 import de.verdox.mccreativelab.ai.builder.CraftAIFactory;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -1252,6 +1253,7 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
+        long start = System.currentTimeMillis();
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1370,6 +1372,7 @@ public final class CraftServer implements Server {
             worlddata = new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             iregistry = worlddimensions_b.dimensions();
         }
+
         worlddata.customDimensions = iregistry;
         worlddata.checkName(name);
         worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
@@ -1411,13 +1414,13 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - Put world into worldlist before initing the world; move up
-        this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
+        this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions()); // TODO: <- Performance Problem
 
         internal.setSpawnSettings(true, true);
         // Paper - Put world into worldlist before initing the world; move up
 
         internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
-        this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
+        this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal); // TODO: <- Performance Problem
 
         this.pluginManager.callEvent(new WorldLoadEvent(internal.getWorld()));
         return internal.getWorld();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 2524e78240182507aa25a228e1b49366396d34e3..aee69c1b6ea20fc3b6dce487d0dcd212139976ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -5,6 +5,8 @@ import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
+import io.papermc.paper.world.worldgen.CraftWorldGenData;
+import io.papermc.paper.world.worldgen.WorldGenData;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -1427,6 +1429,11 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.getHandle().playerChunkLoader.getAPITickDistance(); // Paper - replace player chunk loader
     }
 
+    @Override
+    public WorldGenData getWorldGenData() {
+        return new CraftWorldGenData(getHandle());
+    }
+
     public BlockMetadataStore getBlockMetadata() {
         return this.blockMetadata;
     }
