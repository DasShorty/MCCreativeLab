From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Fri, 5 Jan 2024 21:11:39 +0100
Subject: [PATCH] New Patches


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..88378b6bfa460be116d48417d2a1a4d527825941
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
@@ -0,0 +1,205 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.MultiCustomBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftFoodProperties;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.inventory.FoodProperties;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+public class BehaviourUtil {
+    public static final BehaviourResult.Object<Float> FLOAT_DEFAULT = new BehaviourResult.Object<>(0f, BehaviourResult.Object.Type.USE_VANILLA);
+    public static <I, R, K, V> void evaluateObject(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Object<I>> logicFunction, Supplier<R> vanillaLogic, Converter<I,R> converter) {
+        evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, converter);
+    }
+
+    public static <R, K, V> void evaluateObject(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Object<R>> logicFunction) {
+        evaluateObject(multiCustomBehaviour, key, logicFunction, () -> null, null);
+    }
+
+    public static <K, V> boolean evaluateBoolean(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Bool> logicFunction, Supplier<Boolean> vanillaLogic) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Boolean.class));
+    }
+
+    public static <K, V> int evaluateInteger(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Object<Integer>> logicFunction, Supplier<Integer> vanillaLogic) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Integer.class));
+    }
+
+    public static <K, V> boolean evaluateBoolean(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Bool> logicFunction) {
+        return evaluateBoolean(multiCustomBehaviour, key, logicFunction, () -> false);
+    }
+
+    public static <K, V> void evaluateVoid(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Void> logicFunction, Runnable vanillaLogic) {
+        evaluate(multiCustomBehaviour, key, logicFunction, () -> {
+            vanillaLogic.run();
+            return null;
+        }, Converter.DummyConverter.getInstance(Void.class));
+    }
+
+    public static <K, V> void evaluateVoid(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Void> logicFunction) {
+        evaluate(multiCustomBehaviour, key, logicFunction);
+    }
+
+    public static <K, V> void evaluateCallback(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Callback> logicFunction, Supplier<Void> vanillaLogic) {
+        evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Void.class));
+    }
+
+    public static <K, V> void evaluateCallback(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Callback> logicFunction) {
+        evaluate(multiCustomBehaviour, key, logicFunction);
+    }
+
+    public static <I, R, T extends BehaviourResult<I, ?>, K, V> R evaluate(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction, Supplier<R> vanillaLogic, @Nullable Converter<I, R> converter) {
+        if (!multiCustomBehaviour.isImplemented(key))
+            return vanillaLogic.get();
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+        try {
+            BehaviourResult<I, ?> behaviourResult = logicFunction.apply(behaviour);
+            if(converter == null)
+                return vanillaLogic.get();
+
+            var vanillaValue = vanillaLogic.get();
+            if(vanillaValue == null)
+                return null;
+            var evaluatedValue = behaviourResult.evaluateReturnValue(() -> converter.nmsToBukkitValue(vanillaValue));
+            if(evaluatedValue == null)
+                return null;
+            return converter.bukkitToNMS(evaluatedValue);
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return vanillaLogic.get();
+        }
+    }
+
+    public static <T extends BehaviourResult<?, ?>, K, V> boolean runIfVanillaLogicReplaced(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction) {
+        if (!multiCustomBehaviour.isImplemented(key))
+            return false;
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+
+        try {
+            BehaviourResult<?, ?> behaviourResult = logicFunction.apply(behaviour);
+            return behaviourResult.replaceVanillaLogic();
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return false;
+        }
+    }
+
+    private static <I, R, T extends BehaviourResult<I, ?>, K, V> R evaluate(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, () -> null, new Converter<>() {
+            @Override
+            public R bukkitToNMS(I bukkitValue) {
+                return null;
+            }
+
+            @Override
+            public I nmsToBukkitValue(R nmsValue) {
+                return null;
+            }
+        });
+    }
+
+    /**
+     * @param <I> The bukkit value
+     * @param <R> The nms value
+     */
+    public interface Converter<I, R> {
+        class DummyConverter<T> implements Converter<T, T> {
+            private static final Map<Class<?>, DummyConverter<?>> cache = new HashMap<>();
+            public static <T> DummyConverter<T> getInstance(Class<? extends T> type){
+                return (DummyConverter<T>) cache.computeIfAbsent(type, aClass -> new DummyConverter<T>());
+            }
+
+            @Override
+            public T bukkitToNMS(T bukkitValue) {
+                return bukkitValue;
+            }
+
+            @Override
+            public T nmsToBukkitValue(T nmsValue) {
+                return nmsValue;
+            }
+        }
+        class ItemStack implements Converter<org.bukkit.inventory.ItemStack, net.minecraft.world.item.ItemStack> {
+            public static final ItemStack INSTANCE = new ItemStack();
+
+            @Override
+            public net.minecraft.world.item.ItemStack bukkitToNMS(org.bukkit.inventory.ItemStack bukkitValue) {
+                if (bukkitValue instanceof CraftItemStack craftItemStack)
+                    return craftItemStack.handle;
+                return CraftItemStack.asNMSCopy(bukkitValue);
+            }
+
+            @Override
+            public org.bukkit.inventory.ItemStack nmsToBukkitValue(net.minecraft.world.item.ItemStack nmsValue) {
+                return nmsValue.getBukkitStack();
+            }
+        }
+        class InteractionResult implements Converter<de.verdox.mccreativelab.InteractionResult, net.minecraft.world.InteractionResult>{
+            public static final InteractionResult INSTANCE = new InteractionResult();
+            private InteractionResult(){}
+            @Override
+            public net.minecraft.world.InteractionResult bukkitToNMS(de.verdox.mccreativelab.InteractionResult bukkitValue) {
+                if(bukkitValue == null)
+                    return net.minecraft.world.InteractionResult.PASS;
+                return switch (bukkitValue){
+                    case SUCCESS -> net.minecraft.world.InteractionResult.SUCCESS;
+                    case CONSUME -> net.minecraft.world.InteractionResult.CONSUME;
+                    case CONSUME_PARTIAL -> net.minecraft.world.InteractionResult.CONSUME_PARTIAL;
+                    case PASS -> net.minecraft.world.InteractionResult.PASS;
+                    case FAIL -> net.minecraft.world.InteractionResult.FAIL;
+                };
+            }
+
+            @Override
+            public de.verdox.mccreativelab.InteractionResult nmsToBukkitValue(net.minecraft.world.InteractionResult nmsValue) {
+                return switch (nmsValue){
+                    case SUCCESS -> de.verdox.mccreativelab.InteractionResult.SUCCESS;
+                    case CONSUME -> de.verdox.mccreativelab.InteractionResult.CONSUME;
+                    case CONSUME_PARTIAL -> de.verdox.mccreativelab.InteractionResult.CONSUME_PARTIAL;
+                    case PASS -> de.verdox.mccreativelab.InteractionResult.PASS;
+                    case FAIL -> de.verdox.mccreativelab.InteractionResult.FAIL;
+                };
+            }
+        }
+        class BlockData implements Converter<org.bukkit.block.data.BlockData, BlockState>{
+            public static final BlockData INSTANCE = new BlockData();
+
+            @Override
+            public BlockState bukkitToNMS(org.bukkit.block.data.BlockData bukkitValue) {
+                return ((CraftBlockData)bukkitValue).getState();
+            }
+
+            @Override
+            public CraftBlockData nmsToBukkitValue(BlockState nmsValue) {
+                return nmsValue.createCraftBlockData();
+            }
+        }
+        class FoodProperties implements Converter<org.bukkit.inventory.FoodProperties, net.minecraft.world.food.FoodProperties>{
+            public static final FoodProperties INSTANCE = new FoodProperties();
+
+            @Override
+            public net.minecraft.world.food.FoodProperties bukkitToNMS(org.bukkit.inventory.FoodProperties bukkitValue) {
+                return CraftFoodProperties.toNMS(bukkitValue);
+            }
+
+            @Override
+            public org.bukkit.inventory.FoodProperties nmsToBukkitValue(net.minecraft.world.food.FoodProperties nmsValue) {
+                return CraftFoodProperties.toBukkit(nmsValue);
+            }
+        }
+
+        R bukkitToNMS(I bukkitValue);
+
+        I nmsToBukkitValue(R nmsValue);
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d102398a329fd6d51f566582e7df791afaad628
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
@@ -0,0 +1,175 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.random.CraftVanillaRandomSource;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.util.RayTraceResult;
+import org.bukkit.util.Vector;
+
+import java.util.Locale;
+import java.util.function.Supplier;
+
+public class BlockBehaviourUtil extends BehaviourUtil{
+    public static boolean isVanillaRandomTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.randomTick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+    }
+
+    public static boolean isStepOnLogicReplaced(Level world, BlockPos pos, BlockState state, Entity entity) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.stepOn(world
+            .getWorld()
+            .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), entity.getBukkitEntity()));
+    }
+
+    public static boolean isVanillaTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.tick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+    }
+
+    public static boolean isVanillaBlockAttackReplaced(BlockState state, Level world, BlockPos pos, Player player){
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour ->
+            blockBehaviour.attack(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (org.bukkit.entity.Player) player.getBukkitEntity()));
+    }
+
+    public static boolean isVanillaNeighbourBlockUpdateReplaced(BlockState state, Level world, BlockPos pos, net.minecraft.world.level.block.Block sourceBlock, BlockPos sourcePos, boolean notify){
+        return runIfVanillaLogicReplaced(BlockBehaviour.BLOCK_BEHAVIOUR, BlockBehaviourUtil.getMaterial(state), blockBehaviour ->
+            blockBehaviour.onNeighbourBlockUpdate(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), world.getWorld().getBlockAt(sourcePos.getX(), sourcePos.getY(), sourcePos.getZ()), notify));
+    }
+
+    public static boolean isRandomlyTicking(BlockState blockState, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockDataRandomlyTicking(blockState.createCraftBlockData()));
+    }
+
+    public static boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockRandomlyTicking(world
+            .getWorld().getBlockAt(x, y, z), blockState.createCraftBlockData()));
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, boolean vanillaValue) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        });
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, Supplier<Boolean> vanillaLogic) {
+        return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        }, vanillaLogic);
+    }
+
+    public static InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit, Supplier<InteractionResult> vanillaLogic){
+        return BlockBehaviourUtil.evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation()
+                                                                                                    .y(), hit
+                .getLocation().z()), block, blockFace);
+            return blockBehaviour.use(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        }, vanillaLogic, Converter.InteractionResult.INSTANCE);
+    }
+
+    public static void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify));
+    }
+
+    public static void onPlayerPlaceCallback(Player player, BlockState placedState, Level world, BlockPos pos) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(placedState), blockBehaviour ->
+            blockBehaviour.onPlayerPlace((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), placedState.createCraftBlockData()));
+    }
+
+    public static void onPlayerBreakCallback(Player player, BlockState brokenState, Level world, BlockPos pos) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(brokenState), blockBehaviour ->
+            blockBehaviour.onPlayerBreak((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), brokenState.createCraftBlockData()));
+    }
+
+    public static float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState, float vanillaValue) {
+        return BlockBehaviourUtil
+            .evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return FLOAT_DEFAULT;
+                Block block = ((ServerLevel) world).getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+                return blockBehaviour.getExplosionResistance(block, blockState.createCraftBlockData());
+            }, () -> vanillaValue, Converter.DummyConverter.getInstance(Float.class));
+    }
+
+    public static BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, BlockState vanillaValue) {
+        return updateShape(state, direction, neighborState, world, pos, neighborPos, () -> vanillaValue);
+    }
+
+    public static BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, Supplier<BlockState> vanillaLogic) {
+        return BlockBehaviourUtil.evaluate(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return BehaviourResult.Object.DEFAULT_INSTANCE;
+                BlockFace blockFace = toBukkitBlockFace(direction);
+                return blockBehaviour.blockUpdate(new Location(serverLevel.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), blockFace, neighborState.createCraftBlockData(), new Location(serverLevel.getWorld(), neighborPos.getX(), neighborPos.getY(), neighborPos.getZ()));
+            }, vanillaLogic, Converter.BlockData.INSTANCE);
+    }
+
+    public static void onRemoveCallback(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onRemove(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), newState.createCraftBlockData(), state.createCraftBlockData(), moved));
+    }
+
+    public static void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation().y(), hit.getLocation().z()), block, blockFace);
+            return blockBehaviour.onUse(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        });
+    }
+
+    private static BlockFace toBukkitBlockFace(Direction direction) {
+        return switch (direction) {
+            case DOWN -> BlockFace.DOWN;
+            case UP -> BlockFace.UP;
+            case NORTH -> BlockFace.NORTH;
+            case SOUTH -> BlockFace.SOUTH;
+            case WEST -> BlockFace.WEST;
+            case EAST -> BlockFace.EAST;
+        };
+    }
+
+
+
+    private static Material getMaterial(BlockState blockState) {
+        Material material;
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isReady())
+            material = blockState.getBukkitMaterial();
+        else
+            material = Material.getMaterial(BuiltInRegistries.BLOCK.getKey(blockState.getBlock()).getPath()
+                                                                   .toUpperCase(Locale.ROOT));
+        return material;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..d24c6372973996a34bd75128dd68e036d0a3d07f
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
@@ -0,0 +1,135 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.recipe.CustomItemData;
+import net.minecraft.core.BlockPos;
+import net.minecraft.stats.Stats;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.inventory.EquipmentSlot;
+
+import javax.annotation.Nullable;
+
+public class ItemBehaviourUtil extends BehaviourUtil {
+    public static void main(String[] args) {
+
+    }
+    public static ItemStack finishUsingItem(ItemStack stack, Level world, LivingEntity user) {
+        return evaluate(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.finishUsingItem(user.getBukkitLivingEntity(), stack.asBukkitMirror()),
+            () -> stack.getItem().finishUsingItem(stack, world, user),
+            Converter.ItemStack.INSTANCE
+        );
+    }
+
+    public static int getMaxStackSize(ItemStack stack){
+        return evaluateInteger(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.getMaxStackSize(stack.asBukkitMirror()),
+            () -> stack.getItem().getMaxStackSize()
+        );
+    }
+
+    public static int getMaxDamage(ItemStack stack){
+        return evaluateInteger(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.getMaxDamage(stack.asBukkitMirror()),
+            () -> stack.getItem().getMaxDamage()
+        );
+    }
+
+    public static boolean isCorrectToolForDrops(ItemStack stack, BlockState blockState){
+        return evaluateBoolean(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.isCorrectToolForDrops(stack.asBukkitMirror(), blockState.createCraftBlockData()),
+            () -> stack.getItem().isCorrectToolForDrops(blockState)
+        );
+    }
+
+    public static void mineBlock(ItemStack stack, Level world, net.minecraft.world.level.block.state.BlockState state, BlockPos pos, Player miner){
+        boolean mined = evaluateBoolean(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.mineBlock(stack.asBukkitMirror(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (CraftPlayer) miner.getBukkitEntity()),
+            () -> {
+                Item item = stack.getItem();
+                return item.mineBlock(stack, world, state, pos, miner);
+            });
+        if(mined)
+            miner.awardStat(Stats.ITEM_USED.get(stack.getItem()));
+    }
+
+    public static InteractionResult interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, InteractionHand interactionHand){
+        return evaluate(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.interactLivingEntity(stack.asBukkitMirror(), (CraftPlayer) player.getBukkitEntity(), livingEntity.getBukkitLivingEntity(),
+            interactionHand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND),
+            () -> stack.getItem().interactLivingEntity(stack, player, livingEntity, interactionHand)
+            , Converter.InteractionResult.INSTANCE);
+    }
+
+    public static void onCraftedBy(ItemStack stack, Level world, Player player, int amount){
+        evaluateVoid(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.onCraftedBy(stack.asBukkitMirror(), (CraftPlayer) player.getBukkitEntity(), amount),
+            () -> stack.getItem().onCraftedBy(stack, world, player));
+        player.awardStat(Stats.ITEM_CRAFTED.get(stack.getItem()), amount);
+    }
+
+    public static void onDestroyed(ItemStack stack, ItemEntity entity){
+        evaluateVoid(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.onDestroyed(stack.asBukkitMirror(), (CraftItem) entity.getBukkitEntity()),
+            () -> stack.getItem().onDestroyed(entity));
+    }
+
+    public static boolean isEdible(ItemStack stack){
+        return evaluateBoolean(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.isEdible(stack.asBukkitMirror()),
+            () -> stack.getItem().isEdible());
+    }
+
+    public static FoodProperties getFoodProperties(ItemStack stack){
+        return evaluate(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.getFoodProperties(stack.asBukkitMirror()),
+            () -> stack.getItem().getFoodProperties(),
+            Converter.FoodProperties.INSTANCE
+        );
+    }
+
+    public static @Nullable ItemStack getCraftRemainingItem(ItemStack stack){
+        return evaluate(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.getCraftRemainingItem(stack.asBukkitMirror()),
+            () -> {
+            Item item = stack.getItem().getCraftingRemainingItem();
+            if(item != null)
+                return new ItemStack(item);
+            else return null;
+            },
+            Converter.ItemStack.INSTANCE
+        );
+    }
+
+    public static boolean isFireResistant(ItemStack stack){
+        return evaluateBoolean(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.isFireResistant(stack.asBukkitMirror()),
+            () -> stack.getItem().isFireResistant());
+    }
+
+    public static boolean canFitInsideContainerItems(ItemStack stack){
+        return evaluateBoolean(ItemBehaviour.ITEM_BEHAVIOUR, fromStack(stack),
+            itemBehaviour -> itemBehaviour.canFitInsideContainerItems(stack.asBukkitMirror()),
+            () -> stack.getItem().canFitInsideContainerItems());
+    }
+
+
+
+
+
+    public static CustomItemData fromStack(ItemStack stack) {
+        return CustomItemData.fromItemStack(stack.getBukkitStack());
+    }
+
+
+}
diff --git a/src/main/java/de/verdox/mccreativelab/event/EventToPacketFactory.java b/src/main/java/de/verdox/mccreativelab/event/EventToPacketFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..54d523c62380a43c7b59d16526d273937db8b735
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/event/EventToPacketFactory.java
@@ -0,0 +1,117 @@
+package de.verdox.mccreativelab.event;
+
+import io.papermc.paper.event.world.WorldEffectEvent;
+import io.papermc.paper.event.world.WorldSoundEvent;
+import net.kyori.adventure.sound.Sound;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
+import net.minecraft.network.protocol.game.ClientboundSoundPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.GameRules;
+import org.bukkit.Effect;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Optional;
+
+public class EventToPacketFactory {
+    public static void globalLevelEvent(ServerLevel serverLevel, int eventId, BlockPos pos, int data) {
+        if (serverLevel.getGameRules().getBoolean(GameRules.RULE_GLOBAL_SOUND_EVENTS)) {
+            WorldEffectEvent worldEffectEvent = createWorldEffectEvent(serverLevel, null, eventId, pos, data, true);
+            callEventAndBroadcastPacket(worldEffectEvent);
+        } else {
+            levelEvent(serverLevel, null, eventId, pos, data);
+        }
+    }
+
+    public static void levelEvent(ServerLevel serverLevel, @javax.annotation.Nullable net.minecraft.world.entity.player.Player except, int eventId, BlockPos pos, int data) {
+        WorldEffectEvent worldEffectEvent = createWorldEffectEvent(serverLevel, except, eventId, pos, data, false);
+        callEventAndBroadcastPacket(worldEffectEvent);
+    }
+
+    public static void playSeededSound(ServerLevel serverLevel, @javax.annotation.Nullable net.minecraft.world.entity.player.Player except, double x, double y, double z, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed) {
+        WorldSoundEvent worldSoundEvent = createWorldSoundEvent(serverLevel, except, null, x, y, z, sound, category, volume, pitch, seed);
+        if (worldSoundEvent != null) callEventAndBroadcastPacket(worldSoundEvent, false);
+    }
+
+    public static void playSeededSound(ServerLevel serverLevel, @javax.annotation.Nullable net.minecraft.world.entity.player.Player except, Entity entity, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed) {
+        WorldSoundEvent worldSoundEvent = createWorldSoundEvent(serverLevel, except, entity, entity.getX(), entity.getY(), entity.getZ(), sound, category, volume, pitch, seed);
+        if (worldSoundEvent != null) callEventAndBroadcastPacket(worldSoundEvent, false);
+    }
+
+    public static WorldSoundEvent createWorldSoundEvent(ServerLevel serverLevel, @Nullable net.minecraft.world.entity.player.Player except, @Nullable Entity entity, double x, double y, double z, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed) {
+        if (sound.unwrapKey().isEmpty())
+            return null;
+        NamespacedKey soundType = CraftNamespacedKey.fromMinecraft(sound.unwrapKey().get().location());
+        Player player = except != null ? (Player) except.getBukkitEntity() : null;
+        Sound.Source adventureSource = io.papermc.paper.adventure.PaperAdventure.asAdventure(category);
+        Location location = new Location(serverLevel.getWorld(), x, y, z);
+
+        return new WorldSoundEvent(serverLevel.getWorld(), location, player, entity != null ? entity.getBukkitEntity() : null, soundType, adventureSource, volume, pitch, seed);
+    }
+
+    public static WorldEffectEvent createWorldEffectEvent(ServerLevel serverLevel, @Nullable net.minecraft.world.entity.player.Player except, int eventId, BlockPos pos, int data, boolean global) {
+        Effect bukkitEffect = Effect.getById(eventId);
+        Player player = except != null ? (Player) except.getBukkitEntity() : null;
+        Location location = new Location(serverLevel.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+
+        return new WorldEffectEvent(serverLevel.getWorld(), location, player, bukkitEffect, data, global);
+    }
+
+    public static void callEventAndBroadcastPacket(WorldEffectEvent event) {
+        if (!event.callEvent()) return;
+        ServerLevel serverLevel = ((CraftWorld) event.getWorld()).getHandle();
+
+        ClientboundLevelEventPacket clientboundLevelEventPacket = new ClientboundLevelEventPacket(event.getEffect()
+                                                                                                       .getId(), new BlockPos(event
+            .getSoundLocation().getBlockX(), event.getSoundLocation().getBlockY(), event.getSoundLocation()
+                                                                                        .getBlockZ()), event.getData(), event.isGlobal());
+
+        if (event.isGlobal())
+            serverLevel.getServer().getPlayerList().broadcastAll(clientboundLevelEventPacket);
+        else {
+            ServerPlayer serverPlayer = event.getExcept() != null ? ((CraftPlayer) event.getExcept()).getHandle() : null;
+            serverLevel.getServer().getPlayerList()
+                       .broadcast(serverPlayer, event.getSoundLocation().getX(), event.getSoundLocation().getY(), event
+                           .getSoundLocation().getZ(), 64.0D, serverLevel.dimension(), clientboundLevelEventPacket);
+        }
+    }
+
+    public static void callEventAndBroadcastPacket(WorldSoundEvent event, boolean global) {
+        if (!event.callEvent()) return;
+        ServerLevel serverLevel = ((CraftWorld) event.getWorld()).getHandle();
+        final double posX = event.getEmitter() != null ? event.getEmitter().getLocation().getX() : event
+            .getSoundLocation().getX();
+        final double posY = event.getEmitter() != null ? event.getEmitter().getLocation().getY() : event
+            .getSoundLocation().getY();
+        final double posZ = event.getEmitter() != null ? event.getEmitter().getLocation().getZ() : event
+            .getSoundLocation().getZ();
+        final ResourceLocation name = io.papermc.paper.adventure.PaperAdventure.asVanilla(event.getSound());
+        final Optional<SoundEvent> soundEvent = BuiltInRegistries.SOUND_EVENT.getOptional(name);
+        final SoundSource source = io.papermc.paper.adventure.PaperAdventure.asVanilla(event.getSoundCategory());
+        final Holder<SoundEvent> soundEventHolder = soundEvent.map(BuiltInRegistries.SOUND_EVENT::wrapAsHolder)
+                                                              .orElseGet(() -> Holder.direct(SoundEvent.createVariableRangeEvent(name)));
+
+        ClientboundSoundPacket packet = new ClientboundSoundPacket(soundEventHolder, source, posX, posY, posZ, event.getVolume(), event.getPitch(), event.getSeed());
+        ServerPlayer serverPlayer = event.getExcept() != null ? ((CraftPlayer) event.getExcept()).getHandle() : null;
+
+        if (global)
+            serverLevel.getServer().getPlayerList().broadcastAll(packet, serverPlayer);
+        else
+            serverLevel.getServer().getPlayerList().broadcast(serverPlayer, posX, posY, posZ, soundEventHolder.value()
+                                                                                                              .getRange(event.getVolume()), serverLevel.dimension(), packet);
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index c9a6b5be8f0e382c373bd4ecbff1269d5cf6c850..98ff659fa27417278cecfef189f9a3181db96146 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -7,6 +7,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+
 import java.util.EnumMap;
 import java.util.HashSet;
 import java.util.List;
@@ -14,6 +15,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+
 import net.minecraft.Util;
 import net.minecraft.network.protocol.BundleDelimiterPacket;
 import net.minecraft.network.protocol.BundlePacket;
@@ -211,11 +213,215 @@ import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
 public enum ConnectionProtocol {
-    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet()).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY("play", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new).addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new).addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new).addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new).addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new).addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS("status", protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN("login", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read).addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
-    CONFIGURATION("configuration", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>()).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>()).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new))); // Paper - decompile fix, use subclass
+    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet())
+                                       .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY("play", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>())
+            .withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new)
+            .addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new)
+            .addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new)
+            .addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new)
+            .addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new)
+            .addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new)
+            .addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new)
+            .addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new)
+            .addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new)
+            .addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new)
+            .addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new)
+            .addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new)
+            .addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new)
+            .addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new)
+            .addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new)
+            .addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new)
+            .addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new)
+            .addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new)
+            .addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new)
+            .addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new)
+            .addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new)
+            .addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new)
+            .addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new)
+            .addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new)
+            .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+            .addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new)
+            .addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new)
+            .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
+            .addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new)
+            .addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new)
+            .addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new)
+            .addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new)
+            .addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new)
+            .addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new)
+            .addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new)
+            .addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new)
+            .addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new)
+            .addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new)
+            .addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new)
+            .addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new)
+            .addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new)
+            .addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new)
+            .addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new)
+            .addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new)
+            .addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read)
+            .addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read)
+            .addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read)
+            .addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new)
+            .addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new)
+            .addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new)
+            .addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new)
+            .addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new)
+            .addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new)
+            .addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new)
+            .addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new)
+            .addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new)
+            .addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new)
+            .addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new)
+            .addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new)
+            .addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new)
+            .addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new)
+            .addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new)
+            .addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new)
+            .addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new)
+            .addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new)
+            .addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new)
+            .addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new)
+            .addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new)
+            .addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new)
+            .addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new)
+            .addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new)
+            .addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new)
+            .addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new)
+            .addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new)
+            .addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new)
+            .addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new)
+            .addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new)
+            .addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new)
+            .addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new)
+            .addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new)
+            .addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new)
+            .addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new)
+            .addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new)
+            .addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new)
+            .addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new)
+            .addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new)
+            .addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new)
+            .addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new)
+            .addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new)
+            .addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new)
+            .addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new)
+            .addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new)
+            .addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new)
+            .addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new)
+            .addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new)
+            .addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new)
+            .addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new)
+            .addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new)
+            .addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new)
+            .addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new)
+            .addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new)
+            .addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new)
+            .addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new)
+            .addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new)
+            .addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new)
+            .addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new)
+            .addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new)
+            .addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new)
+            .addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new)
+            .addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new)
+            .addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new)
+            .addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new)
+            .addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>())
+            .addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new)
+            .addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new)
+            .addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new)
+            .addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new)
+            .addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new)
+            .addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new)
+            .addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new)
+            .addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new)
+            .addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new)
+            .addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new)
+            .addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new)
+            .addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new)
+            .addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new)
+            .addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new)
+            .addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new)
+            .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+            .addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new)
+            .addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new)
+            .addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new)
+            .addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new)
+            .addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new)
+            .addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new)
+            .addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read)
+            .addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read)
+            .addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read)
+            .addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read)
+            .addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new)
+            .addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new)
+            .addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new)
+            .addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)
+            .addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new)
+            .addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new)
+            .addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new)
+            .addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new)
+            .addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new)
+            .addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new)
+            .addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new)
+            .addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new)
+            .addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new)
+            .addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new)
+            .addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new)
+            .addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new)
+            .addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new)
+            .addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new)
+            .addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new)
+            .addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new)
+            .addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new)
+            .addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new)
+            .addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new)
+            .addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new)
+            .addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new)
+            .addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new)
+            .addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new)
+            .addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS("status", protocol()
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>())
+            .addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new)
+            .addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new))
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>())
+            .addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new)
+            .addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN("login", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>())
+            .addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new)
+            .addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new)
+            .addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new)
+            .addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new)
+            .addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>())
+            .addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new)
+            .addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new)
+            .addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read)
+            .addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
+    CONFIGURATION("configuration", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>())
+            .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+            .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
+            .addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new)
+            .addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new)
+            .addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new)
+            .addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new)
+            .addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new)
+            .addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new)
+            .addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>())
+            .addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new)
+            .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+            .addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new)
+            .addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new)
+            .addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new)
+            .addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new))); // Paper - decompile fix, use subclass
 
     public static final int NOT_REGISTERED = -1;
     private final String id;
@@ -357,7 +563,7 @@ public enum ConnectionProtocol {
         public Map<PacketFlow, ConnectionProtocol.CodecData<?>> buildCodecs(ConnectionProtocol state) {
             Map<PacketFlow, ConnectionProtocol.CodecData<?>> map = new EnumMap<>(PacketFlow.class);
 
-            for(PacketFlow packetFlow : PacketFlow.values()) {
+            for (PacketFlow packetFlow : PacketFlow.values()) {
                 ConnectionProtocol.PacketSet<?> packetSet = this.flows.get(packetFlow);
                 if (packetSet == null) {
                     throw new IllegalStateException("Missing packets for flow " + packetFlow + " in protocol " + state);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dbccbcb9b44e4efacdf53c2d161115cc20b36cff..64c6fcb01739f59d79f828969f9083a593c5767a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -272,6 +272,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache(); // MCCLab
         // CraftBukkit end
 
         // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 17610196db7a1c6feb2cf74a02479a8691aa323f..55486d0b11e974eadee535f845b15664ed720743 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1787,27 +1787,22 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @Override
     public void playSeededSound(@Nullable Player except, double x, double y, double z, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed) {
-        this.server.getPlayerList().broadcast(except, x, y, z, (double) ((SoundEvent) sound.value()).getRange(volume), this.dimension(), new ClientboundSoundPacket(sound, category, x, y, z, volume, pitch, seed));
+        de.verdox.mccreativelab.event.EventToPacketFactory.playSeededSound(this, except, x, y, z, sound, category, volume, pitch, seed); // Paper - add WorldSoundEvent
     }
 
     @Override
     public void playSeededSound(@Nullable Player except, Entity entity, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed) {
-        this.server.getPlayerList().broadcast(except, entity.getX(), entity.getY(), entity.getZ(), (double) ((SoundEvent) sound.value()).getRange(volume), this.dimension(), new ClientboundSoundEntityPacket(sound, category, entity, volume, pitch, seed));
+        de.verdox.mccreativelab.event.EventToPacketFactory.playSeededSound(this, except, entity, sound, category, volume, pitch, seed); // Paper - add WorldSoundEvent
     }
 
     @Override
     public void globalLevelEvent(int eventId, BlockPos pos, int data) {
-        if (this.getGameRules().getBoolean(GameRules.RULE_GLOBAL_SOUND_EVENTS)) {
-            this.server.getPlayerList().broadcastAll(new ClientboundLevelEventPacket(eventId, pos, data, true));
-        } else {
-            this.levelEvent((Player) null, eventId, pos, data);
-        }
-
+        de.verdox.mccreativelab.event.EventToPacketFactory.globalLevelEvent(this, eventId, pos ,data); // Paper - add WorldEffectEvent
     }
 
     @Override
     public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {
-        this.server.getPlayerList().broadcast(player, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), 64.0D, this.dimension(), new ClientboundLevelEventPacket(eventId, pos, data, false));
+        de.verdox.mccreativelab.event.EventToPacketFactory.levelEvent(this, player, eventId, pos ,data); // Paper - add WorldEffectEvent
     }
 
     public int getLogicalHeight() {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d4aec99cac3f83d764e21946cc904c00e084704e..e6893ca46322ebf04703cdd6931fee5e24f31e69 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -321,6 +321,8 @@ public class ServerPlayer extends Player {
     public double lastEntitySpawnRadiusSquared = -1.0;
     // Paper end - optimise chunk tick iteration
 
+    public boolean pauseInventorySynchronization; // MCCLab - Fake Inventory
+
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
         this.chatVisibility = ChatVisiblity.FULL;
@@ -336,7 +338,9 @@ public class ServerPlayer extends Player {
         this.containerSynchronizer = new ContainerSynchronizer() {
             @Override
             public void sendInitialData(AbstractContainerMenu handler, NonNullList<ItemStack> stacks, ItemStack cursorStack, int[] properties) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.incrementStateId(), stacks, cursorStack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.getStateId(), stacks, cursorStack));
 
                 for (int i = 0; i < properties.length; ++i) {
                     this.broadcastDataValue(handler, i, properties[i]);
@@ -347,26 +351,34 @@ public class ServerPlayer extends Player {
             // Paper start
             @Override
             public void sendOffHandSlotChange() {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
+                ServerPlayer.this.inventoryMenu.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.getStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
             }
             // Paper end
 
             @Override
             public void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.incrementStateId(), slot, stack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.getStateId(), slot, stack));
             }
 
             @Override
             public void sendCarriedChange(AbstractContainerMenu handler, ItemStack stack) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(-1, handler.incrementStateId(), -1, stack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(-1, handler.getStateId(), -1, stack));
             }
 
             @Override
             public void sendDataChange(AbstractContainerMenu handler, int property, int value) {
+                if(pauseInventorySynchronization) return;
                 this.broadcastDataValue(handler, property, value);
             }
 
             private void broadcastDataValue(AbstractContainerMenu handler, int property, int value) {
+                if(pauseInventorySynchronization) return;
                 ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(handler.containerId, property, value));
             }
         };
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index b2c2bd5ec0afd479973f7237a5c610f21231c505..6d513facbfeef77b5126c9cedefd53992267af14 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -464,6 +464,7 @@ public class ServerPlayerGameMode {
                 }
                 // Paper end
 
+                de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.onPlayerBreakCallback(player, iblockdata, level, pos);
                 return true;
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index f20ae9153b7098980ce6c0e75fcbbb4da652661b..7484cc8b4458590aebd939326227fe327c9e6c90 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1650,21 +1650,23 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return !iblockdata.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) && !iblockdata.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS) ? pos : blockposition1;
     }
 
-    protected void playCombinationStepSounds(BlockState primaryState, BlockState secondaryState) {
+    protected void playCombinationStepSounds(BlockPos pos, BlockState primaryState, BlockState secondaryState) {
         SoundType soundeffecttype = primaryState.getSoundType();
 
         this.playSound(soundeffecttype.getStepSound(), soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
-        this.playMuffledStepSound(secondaryState);
+        this.playMuffledStepSound(pos, secondaryState);
     }
 
-    protected void playMuffledStepSound(BlockState state) {
+    protected void playMuffledStepSound(BlockPos pos, BlockState state) {
         SoundType soundeffecttype = state.getSoundType();
+        //TODO: SoundBehaviour
 
         this.playSound(soundeffecttype.getStepSound(), soundeffecttype.getVolume() * 0.05F, soundeffecttype.getPitch() * 0.8F);
     }
 
     protected void playStepSound(BlockPos pos, BlockState state) {
         SoundType soundeffecttype = state.getSoundType();
+        //TODO: SoundBehaviour
 
         this.playSound(soundeffecttype.getStepSound(), soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
     }
@@ -1704,7 +1706,6 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (!this.isSilent()) {
             this.playSound(event, 1.0F, 1.0F);
         }
-
     }
 
     public boolean isSilent() {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 77a1c7dfbaccc2e74da5c78ce4dfcd1717a7ac65..0442f018200b502a503bc23db319eab5cf759505 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3836,7 +3836,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
         // Paper start - lag compensate eating
         // we add 1 to the expected time to avoid lag compensating when we should not
-        boolean shouldLagCompensate = this.useItem.getItem().isEdible() && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((1 + this.totalEatTimeTicks) * 50 * (1000 * 1000));
+        boolean shouldLagCompensate = this.useItem.isEdible() && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((1 + this.totalEatTimeTicks) * 50 * (1000 * 1000));
         if ((--this.useItemRemaining == 0 || shouldLagCompensate) && !this.level().isClientSide && !stack.useOnRelease()) {
             this.useItemRemaining = 0;
             // Paper end
@@ -3847,7 +3847,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
     private boolean shouldTriggerItemUseEffects() {
         int i = this.getUseItemRemainingTicks();
-        FoodProperties foodinfo = this.useItem.getItem().getFoodProperties();
+        FoodProperties foodinfo = this.useItem.getFoodProperties();
         boolean flag = foodinfo != null && foodinfo.isFastFood();
 
         flag |= i <= this.useItem.getUseDuration() - 7;
@@ -4382,8 +4382,8 @@ public abstract class LivingEntity extends Entity implements Attackable {
     private void addEatEffect(ItemStack stack, Level world, LivingEntity targetEntity) {
         Item item = stack.getItem();
 
-        if (item.isEdible()) {
-            List<Pair<MobEffectInstance, Float>> list = item.getFoodProperties().getEffects();
+        if (stack.isEdible()) {
+            List<Pair<MobEffectInstance, Float>> list = stack.getFoodProperties().getEffects();
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index de51ce9875e12961e6e549e87d76f492d2f19787..4c7460de115b8cf7193f6a38f9cf7f38b8749db0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -385,9 +385,9 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
             if (this.isTame()) {
                 if (this.isOwnedBy(player)) {
                     if (!(item instanceof DyeItem)) {
-                        if (item.isEdible() && this.isFood(itemstack) && this.getHealth() < this.getMaxHealth()) {
+                        if (itemstack.isEdible() && this.isFood(itemstack) && this.getHealth() < this.getMaxHealth()) {
                             this.usePlayerItem(player, hand, itemstack);
-                            this.heal((float) item.getFoodProperties().getNutrition(), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING); // Paper
+                            this.heal((float) itemstack.getFoodProperties().getNutrition(), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING); // Paper
                             return InteractionResult.CONSUME;
                         }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 31d4683f5e158f076ce9a416b7003478af293688..c92ccddfcb8ad488c77fde453d337f0561ecec17 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -247,7 +247,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
     }
 
     private boolean canEat(ItemStack stack) {
-        return stack.getItem().isEdible() && this.getTarget() == null && this.onGround() && !this.isSleeping();
+        return stack.isEdible() && this.getTarget() == null && this.onGround() && !this.isSleeping();
     }
 
     @Override
@@ -505,7 +505,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         Item item = stack.getItem();
         ItemStack itemstack1 = this.getItemBySlot(EquipmentSlot.MAINHAND);
 
-        return itemstack1.isEmpty() || this.ticksSinceEaten > 0 && item.isEdible() && !itemstack1.getItem().isEdible();
+        return itemstack1.isEmpty() || this.ticksSinceEaten > 0 && stack.isEdible() && !itemstack1.isEdible();
     }
 
     private void spitOutItem(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index eecb7511582e5e316b71fa4a4734881424be5ca7..e541f7551e1640f2a5bea28c3444152909a9c770 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -359,7 +359,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
                     itemstack.shrink(1);
                 }
 
-                this.heal((float) item.getFoodProperties().getNutrition(), EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
+                this.heal((float) itemstack.getFoodProperties().getNutrition(), EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
                 return InteractionResult.SUCCESS;
             } else {
                 if (item instanceof DyeItem) {
@@ -445,7 +445,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     public boolean isFood(ItemStack stack) {
         Item item = stack.getItem();
 
-        return item.isEdible() && item.getFoodProperties().isMeat();
+        return stack.isEdible() && stack.getFoodProperties().isMeat();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index eb0351aa12eebcefab1d1d14641fc3c60cbbcab8..9d017797a34b44cff6e2e7c48d28c6fe13d230e2 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -341,7 +341,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
 
     @Override
     public boolean fireImmune() {
-        return this.getItem().getItem().isFireResistant() || super.fireImmune();
+        return this.getItem().isFireResistant() || super.fireImmune();
     }
 
     @Override
@@ -350,7 +350,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
             return false;
         } else if (!this.getItem().isEmpty() && this.getItem().is(Items.NETHER_STAR) && source.is(DamageTypeTags.IS_EXPLOSION)) {
             return false;
-        } else if (!this.getItem().getItem().canBeHurtBy(source)) {
+        } else if (!this.getItem().canBeHurtBy(source)) {
             return false;
         } else if (this.level().isClientSide) {
             return true;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index fd1b5a1beea7594fa65decfdcccfa15781fc005b..16a6ea45b3e0c8266988e1c2f0f4149f4968a760 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -248,7 +248,7 @@ public class Creeper extends Monster implements PowerableMob {
             this.level().playSound(player, this.getX(), this.getY(), this.getZ(), soundeffect, this.getSoundSource(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             if (!this.level().isClientSide) {
                 this.ignite();
-                if (itemstack.getItem().getMaxDamage() == 0) { // Paper - fix MC-264285, only shrink the stack if the item type actually has no durability
+                if (itemstack.getMaxDamage() == 0) { // Paper - fix MC-264285, only shrink the stack if the item type actually has no durability
                     itemstack.shrink(1);
                 } else {
                     itemstack.hurtAndBreak(1, player, (entityhuman1) -> {
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 96d664c28738d6090f7067761c2978dd1aa0fd0e..e7b87c3a926a657cafc99dcf3f1e7bba234244f6 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -644,7 +644,7 @@ public class Inventory implements Container, Nameable {
                 int k = aint1[j];
                 ItemStack itemstack = (ItemStack) this.armor.get(k);
 
-                if ((!damageSource.is(DamageTypeTags.IS_FIRE) || !itemstack.getItem().isFireResistant()) && itemstack.getItem() instanceof ArmorItem) {
+                if ((!damageSource.is(DamageTypeTags.IS_FIRE) || !itemstack.isFireResistant()) && itemstack.getItem() instanceof ArmorItem) {
                     itemstack.hurtAndBreak((int) amount, this.player, (entityhuman) -> {
                         entityhuman.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, k));
                     });
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index d58b4c0dbe651b5068212e5f14dce3164ee520f5..1ae3876c4d14254caef5ecf9373bb2c3d4a10995 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1292,12 +1292,14 @@ public abstract class Player extends LivingEntity {
                     }
 
                     f += f1;
+
                     boolean flag3 = false;
                     double d0 = (double) (this.walkDist - this.walkDistO);
 
                     if (flag && !flag2 && !flag1 && this.onGround() && d0 < (double) this.getSpeed()) {
                         ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
 
+                        //TODO: MCCreativeLab Custom Sweep Attack Logic
                         if (itemstack.getItem() instanceof SwordItem) {
                             flag3 = true;
                         }
@@ -1342,6 +1344,7 @@ public abstract class Player extends LivingEntity {
                         }
 
                         if (flag3) {
+                            //TODO: MCCreativeLab Custom Sweep Attack Logic
                             float f4 = 1.0F + EnchantmentHelper.getSweepingDamageRatio(this) * f;
                             List<LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, target.getBoundingBox().inflate(1.0D, 0.25D, 1.0D));
                             Iterator iterator = list.iterator();
@@ -1822,7 +1825,7 @@ public abstract class Player extends LivingEntity {
     protected void playStepSound(BlockPos pos, BlockState state) {
         if (this.isInWater()) {
             this.waterSwimSound();
-            this.playMuffledStepSound(state);
+            this.playMuffledStepSound(pos, state);
         } else {
             BlockPos blockposition1 = this.getPrimaryStepSoundBlockPos(pos);
 
@@ -1830,7 +1833,7 @@ public abstract class Player extends LivingEntity {
                 BlockState iblockdata1 = this.level().getBlockState(blockposition1);
 
                 if (iblockdata1.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS)) {
-                    this.playCombinationStepSounds(iblockdata1, state);
+                    this.playCombinationStepSounds(blockposition1, iblockdata1, state);
                 } else {
                     super.playStepSound(blockposition1, iblockdata1);
                 }
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index b130a06ea984dde1704d650645d59385334e4b65..2965012e78d757d7e618aa20761f12f54655a029 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -38,8 +38,8 @@ public class FoodData {
     }
 
     public void eat(Item item, ItemStack stack) {
-        if (item.isEdible()) {
-            FoodProperties foodinfo = item.getFoodProperties();
+        if (stack.isEdible()) {
+            FoodProperties foodinfo = stack.getFoodProperties();
             // CraftBukkit start
             int oldFoodLevel = this.foodLevel;
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index ffd349c1b80df0f1e8c02bda23700184825170fd..17c58b8c3310e380a03442ac6f94fc8ef836c411 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -925,7 +925,7 @@ public abstract class AbstractContainerMenu {
                 j = 1;
                 break;
             case 2:
-                j = stack.getItem().getMaxStackSize();
+                j = stack.getMaxStackSize();
                 break;
             default:
                 j = stack.getCount();
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index 09be5db3c09262e8bc56c4e20a48fe648f09237c..f276e82f281096b1b1755922d715139b9e8f9140 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -103,7 +103,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
             public void onTake(net.minecraft.world.entity.player.Player player, ItemStack stack) {
                 ((Slot) CartographyTableMenu.this.slots.get(0)).remove(1);
                 ((Slot) CartographyTableMenu.this.slots.get(1)).remove(1);
-                stack.getItem().onCraftedBy(stack, player.level(), player);
+                stack.onCraftedBy(player.level(), player);
                 context.execute((world, blockposition) -> {
                     long j = world.getGameTime();
 
@@ -203,7 +203,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
 
             itemstack = itemstack1.copy();
             if (slot == 2) {
-                itemstack1.getItem().onCraftedBy(itemstack1, player.level(), player);
+                itemstack1.onCraftedBy(player.level(), player);
                 if (!this.moveItemStackTo(itemstack1, 3, 39, true)) {
                     return ItemStack.EMPTY;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
index 4c8ce073094e55ea0df67fe02c0d1cc8aef76562..aad33f40a579717594e552df0904a399c9394f6a 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
@@ -147,7 +147,7 @@ public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
             itemstack = itemstack1.copy();
             if (slot == 0) {
                 this.access.execute((world, blockposition) -> {
-                    itemstack1.getItem().onCraftedBy(itemstack1, world, player);
+                    itemstack1.onCraftedBy(world, player);
                 });
                 if (!this.moveItemStackTo(itemstack1, 10, 46, true)) {
                     return ItemStack.EMPTY;
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index a21eadcdfbdc4be803c5793bc97996db3e706071..0d1f9ab79ce94d86ba970361ad8720d8e8073e78 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -191,11 +191,11 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                 }
 
                 Item item = itemstack.getItem();
-                int j = item.getMaxDamage() - itemstack.getDamageValue();
-                int k = item.getMaxDamage() - itemstack1.getDamageValue();
-                int l = j + k + item.getMaxDamage() * 5 / 100;
+                int j = itemstack.getMaxDamage() - itemstack.getDamageValue();
+                int k = itemstack.getMaxDamage() - itemstack1.getDamageValue();
+                int l = j + k + itemstack.getMaxDamage() * 5 / 100;
 
-                i = Math.max(item.getMaxDamage() - l, 0);
+                i = Math.max(itemstack.getMaxDamage() - l, 0);
                 itemstack2 = this.mergeEnchants(itemstack, itemstack1);
                 if (!itemstack2.isDamageableItem()) {
                     if (!ItemStack.matches(itemstack, itemstack1) || (itemstack2.getMaxStackSize() == 1 && !io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowGrindstoneOverstacking)) { // Paper - add max stack size check & config value
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index f8129dcdcae12ed66ec58e8c749fa88ec3cd85d8..28a3dbddf9697613daf5c77571913c690c6fc1fb 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -259,7 +259,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
 
             itemstack = itemstack1.copy();
             if (slot == 1) {
-                item.onCraftedBy(itemstack1, player.level(), player);
+                itemstack1.onCraftedBy(player.level(), player);
                 if (!this.moveItemStackTo(itemstack1, 2, 38, true)) {
                     return ItemStack.EMPTY;
                 }
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index e483186a5292b3b53bfb1af4d56f55fcc1a6106c..3f29e5140f5e525544b4ad2c6a7a284a0e9514fd 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -6,6 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -137,6 +139,8 @@ public class BlockItem extends Item {
                         itemstack.shrink(1);
                     }
 
+
+                    if(entityhuman != null) BlockBehaviourUtil.onPlayerPlaceCallback(entityhuman, iblockdata, world, blockposition);
                     return InteractionResult.sidedSuccess(world.isClientSide);
                 }
             }
diff --git a/src/main/java/net/minecraft/world/item/BundleItem.java b/src/main/java/net/minecraft/world/item/BundleItem.java
index ac0bc87f60c4e1562d1301522183e449558d42f8..d78bca25d9c954b90e8012adb02afef04471bef4 100644
--- a/src/main/java/net/minecraft/world/item/BundleItem.java
+++ b/src/main/java/net/minecraft/world/item/BundleItem.java
@@ -50,7 +50,7 @@ public class BundleItem extends Item {
                 removeOne(stack).ifPresent((removedStack) -> {
                     add(stack, slot.safeInsert(removedStack));
                 });
-            } else if (itemStack.getItem().canFitInsideContainerItems()) {
+            } else if (itemStack.canFitInsideContainerItems()) {
                 int i = (64 - getContentWeight(stack)) / getWeight(itemStack);
                 int j = add(stack, slot.safeTake(itemStack.getCount(), Math.max(0, i), player)); // Paper - prevent item addition on overfilled bundles - safeTake will yield EMPTY for amount == 0.
                 if (j > 0) {
@@ -112,7 +112,7 @@ public class BundleItem extends Item {
     }
 
     private static int add(ItemStack bundle, ItemStack stack) {
-        if (!stack.isEmpty() && stack.getItem().canFitInsideContainerItems()) {
+        if (!stack.isEmpty() && stack.canFitInsideContainerItems()) {
             CompoundTag compoundTag = bundle.getOrCreateTag();
             if (!compoundTag.contains("Items")) {
                 compoundTag.put("Items", new ListTag());
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index dd2f6c67533cc3344a171fe3ae9b3704796d8c50..b3b37cd4f271281a3ee92f040056d5f4c82f0400 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -135,9 +135,9 @@ public class Item implements FeatureElement, ItemLike {
     }
 
     public InteractionResultHolder<ItemStack> use(Level world, Player user, InteractionHand hand) {
-        if (this.isEdible()) {
-            ItemStack itemStack = user.getItemInHand(hand);
-            if (user.canEat(this.getFoodProperties().canAlwaysEat())) {
+        ItemStack itemStack = user.getItemInHand(hand);
+        if (itemStack.isEdible()) {
+            if (user.canEat(itemStack.getFoodProperties().canAlwaysEat())) {
                 user.startUsingItem(hand);
                 return InteractionResultHolder.consume(itemStack);
             } else {
@@ -250,12 +250,12 @@ public class Item implements FeatureElement, ItemLike {
     }
 
     public UseAnim getUseAnimation(ItemStack stack) {
-        return stack.getItem().isEdible() ? UseAnim.EAT : UseAnim.NONE;
+        return stack.isEdible() ? UseAnim.EAT : UseAnim.NONE;
     }
 
     public int getUseDuration(ItemStack stack) {
-        if (stack.getItem().isEdible()) {
-            return this.getFoodProperties().isFastFood() ? 16 : 32;
+        if (stack.isEdible()) {
+            return stack.getFoodProperties().isFastFood() ? 16 : 32;
         } else {
             return 0;
         }
@@ -352,15 +352,17 @@ public class Item implements FeatureElement, ItemLike {
         return SoundEvents.GENERIC_EAT;
     }
 
+
     public boolean isFireResistant() {
         return this.isFireResistant;
     }
 
     public boolean canBeHurtBy(DamageSource source) {
-        return !this.isFireResistant || !source.is(DamageTypeTags.IS_FIRE);
+        return !this.isFireResistant() || !source.is(DamageTypeTags.IS_FIRE);
     }
 
     public boolean canFitInsideContainerItems() {
+        //TODO: ItemBehaviour
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index c057c0138cad7c3ee221b3a30d8713231ccd03ab..24cd911deeb4e4a2b7d14269a521a7216a8bdd40 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -21,6 +21,8 @@ import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
@@ -44,12 +46,14 @@ import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
@@ -61,6 +65,7 @@ import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.flag.FeatureFlagSet;
+import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.inventory.tooltip.TooltipComponent;
@@ -80,7 +85,7 @@ import org.slf4j.Logger;
 // CraftBukkit start
 import com.mojang.serialization.Dynamic;
 import java.util.Map;
-import java.util.Objects;
+
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -369,6 +374,7 @@ public final class ItemStack {
             }
             InteractionResult enuminteractionresult;
             try {
+                //TODO: ItemStack Behaviour alternative useon behaviour
                 enuminteractionresult = item.useOn(context);
             } finally {
                 world.captureBlockStates = false;
@@ -443,6 +449,8 @@ public final class ItemStack {
                         ((ServerPlayer) entityhuman).connection.send(new ClientboundBlockUpdatePacket(world, placedPos.relative(dir)));
                     }
                     SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+
+                    BlockBehaviourUtil.onPlayerPlaceCallback(entityhuman, world.getBlockState(blockposition), world, blockposition);
                 } else {
                     // Change the stack to its new contents if it hasn't been tampered with.
                     if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
@@ -550,11 +558,12 @@ public final class ItemStack {
     }
 
     public InteractionResultHolder<ItemStack> use(Level world, net.minecraft.world.entity.player.Player user, InteractionHand hand) {
+        //TODO: ItemStack Behaviour
         return this.getItem().use(world, user, hand);
     }
 
     public ItemStack finishUsingItem(Level world, LivingEntity user) {
-        return this.getItem().finishUsingItem(this, world, user);
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.finishUsingItem(this, world, user); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public CompoundTag save(CompoundTag nbt) {
@@ -570,15 +579,17 @@ public final class ItemStack {
     }
 
     public int getMaxStackSize() {
-        return this.getItem().getMaxStackSize();
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.getMaxStackSize(this); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public boolean isStackable() {
         return this.getMaxStackSize() > 1 && (!this.isDamageableItem() || !this.isDamaged());
     }
 
+
     public boolean isDamageableItem() {
-        if (!this.isEmpty() && this.getItem().getMaxDamage() > 0) {
+
+        if (!this.isEmpty() && this.getMaxDamage() > 0) {
             CompoundTag nbttagcompound = this.getTag();
 
             return nbttagcompound == null || !nbttagcompound.getBoolean("Unbreakable");
@@ -600,7 +611,7 @@ public final class ItemStack {
     }
 
     public int getMaxDamage() {
-        return this.getItem().getMaxDamage();
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.getMaxDamage(this); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public boolean hurt(int amount, RandomSource random, @Nullable LivingEntity player) { // Paper - allow any living entity instead of only ServerPlayers
@@ -704,6 +715,7 @@ public final class ItemStack {
     }
 
     public void hurtEnemy(LivingEntity target, net.minecraft.world.entity.player.Player attacker) {
+        //TODO: ItemStack Behaviour
         Item item = this.getItem();
 
         if (item.hurtEnemy(this, target, attacker)) {
@@ -713,20 +725,15 @@ public final class ItemStack {
     }
 
     public void mineBlock(Level world, net.minecraft.world.level.block.state.BlockState state, BlockPos pos, net.minecraft.world.entity.player.Player miner) {
-        Item item = this.getItem();
-
-        if (item.mineBlock(this, world, state, pos, miner)) {
-            miner.awardStat(Stats.ITEM_USED.get(item));
-        }
-
+        de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.mineBlock(this, world, state, pos, miner); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public boolean isCorrectToolForDrops(net.minecraft.world.level.block.state.BlockState state) {
-        return this.getItem().isCorrectToolForDrops(state);
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.isCorrectToolForDrops(this, state); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public InteractionResult interactLivingEntity(net.minecraft.world.entity.player.Player user, LivingEntity entity, InteractionHand hand) {
-        return this.getItem().interactLivingEntity(this, user, entity, hand);
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.interactLivingEntity(this, user, entity, hand); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public ItemStack copy() {
@@ -795,11 +802,15 @@ public final class ItemStack {
     }
 
     public void onCraftedBy(Level world, net.minecraft.world.entity.player.Player player, int amount) {
-        player.awardStat(Stats.ITEM_CRAFTED.get(this.getItem()), amount);
-        this.getItem().onCraftedBy(this, world, player);
+        de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.onCraftedBy(this, world, player, amount); // MCCreativeLab - Adding ItemBehaviour
+    }
+
+    public void onCraftedBy(Level world, net.minecraft.world.entity.player.Player player) {
+        onCraftedBy(world, player, 1);
     }
 
     public int getUseDuration() {
+        //TODO: ItemStack Behaviour
         return this.getItem().getUseDuration(this);
     }
 
@@ -1180,6 +1191,7 @@ public final class ItemStack {
     }
 
     public boolean isEnchantable() {
+        //TODO: ItemStack Behaviour
         return !this.getItem().isEnchantable(this) ? false : !this.isEnchanted();
     }
 
@@ -1347,15 +1359,16 @@ public final class ItemStack {
     }
 
     public void onUseTick(Level world, LivingEntity user, int remainingUseTicks) {
+        //TODO: ItemStack Behaviour (Crossbows and other stuff)
         this.getItem().onUseTick(world, user, this, remainingUseTicks);
     }
 
     public void onDestroyed(ItemEntity entity) {
-        this.getItem().onDestroyed(entity);
+        de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.onDestroyed(this, entity); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public boolean isEdible() {
-        return this.getItem().isEdible();
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.isEdible(this); // MCCreativeLab - Adding ItemBehaviour
     }
 
     public SoundEvent getDrinkingSound() {
@@ -1378,4 +1391,37 @@ public final class ItemStack {
             return this.mask;
         }
     }
+
+    //MCCreativeLab start - Adding ItemBehaviour
+    @Nullable
+    public FoodProperties getFoodProperties() {
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.getFoodProperties(this);
+    }
+
+    @Nullable private ItemStack craftRemainingItemInstance;
+    @Nullable
+    public ItemStack getCraftingRemainingItem(){
+        if(craftRemainingItemInstance == null)
+            craftRemainingItemInstance = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.getCraftRemainingItem(this);
+        return craftRemainingItemInstance != null ? craftRemainingItemInstance.copy() : null;
+    }
+
+    public boolean isFireResistant(){
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.isFireResistant(this);
+    }
+
+    public boolean hasCraftingRemainingItem(){
+        return getCraftingRemainingItem() != null;
+    }
+
+    public boolean canBeHurtBy(DamageSource source) {
+        return !this.isFireResistant() || !source.is(DamageTypeTags.IS_FIRE);
+    }
+
+    public boolean canFitInsideContainerItems() {
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.canFitInsideContainerItems(this);
+    }
+
+
+    //MCCreativeLab end - Adding ItemBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
index 7dab1b896ad86be9457311727ebd25d99358352c..59836a24f4360b853d63835ef9b7eed4b0e9b9b8 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
@@ -82,8 +82,8 @@ public class BannerDuplicateRecipe extends CustomRecipe {
         for(int i = 0; i < nonNullList.size(); ++i) {
             ItemStack itemStack = inventory.getItem(i);
             if (!itemStack.isEmpty()) {
-                if (itemStack.getItem().hasCraftingRemainingItem()) {
-                    nonNullList.set(i, new ItemStack(itemStack.getItem().getCraftingRemainingItem()));
+                if (itemStack.hasCraftingRemainingItem()) {
+                    nonNullList.set(i, itemStack.getCraftingRemainingItem());
                 } else if (itemStack.hasTag() && BannerBlockEntity.getPatternCount(itemStack) > 0) {
                     nonNullList.set(i, itemStack.copyWithCount(1));
                 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
index 2f5471b23c48d4b8f0229450757d430041ebdc8d..76f63eec36d8d21c7c01dc06305e584d71285dd8 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BookCloningRecipe.java
@@ -82,8 +82,8 @@ public class BookCloningRecipe extends CustomRecipe {
 
         for(int i = 0; i < nonNullList.size(); ++i) {
             ItemStack itemStack = inventory.getItem(i);
-            if (itemStack.getItem().hasCraftingRemainingItem()) {
-                nonNullList.set(i, new ItemStack(itemStack.getItem().getCraftingRemainingItem()));
+            if (itemStack.hasCraftingRemainingItem()) {
+                nonNullList.set(i, itemStack.getCraftingRemainingItem());
             } else if (itemStack.getItem() instanceof WrittenBookItem) {
                 nonNullList.set(i, itemStack.copyWithCount(1));
                 // MCCLab - start
diff --git a/src/main/java/net/minecraft/world/item/crafting/Recipe.java b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
index 0dfe7760da7e4e6aea2dbaee9a214bec2cd5bc2a..ffa5483d7f5fd4d8be20399a0b246e64f04b3ea3 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Recipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
@@ -41,9 +41,10 @@ public interface Recipe<C extends Container> {
         NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inventory.getContainerSize(), ItemStack.EMPTY);
 
         for (int i = 0; i < nonnulllist.size(); ++i) {
-            Item item = inventory.getItem(i).getItem();
-            if (item.hasCraftingRemainingItem()) {
-                nonnulllist.set(i, new ItemStack(item.getCraftingRemainingItem()));
+            ItemStack stack = inventory.getItem(i);
+            Item item = stack.getItem();
+            if (stack.hasCraftingRemainingItem()) {
+                nonnulllist.set(i, stack.getCraftingRemainingItem());
             }
             // MCCLab - start
             useCustomRemainingItemsLogic(inventory, recipeHolder, nonnulllist, i);
diff --git a/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java b/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
index 15394aa4d7836ca140e52e061fde08ca5e7151b0..3e9d17303d53186a0b354dd26fcef78e241c2553 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RepairItemRecipe.java
@@ -60,10 +60,10 @@ public class RepairItemRecipe extends CustomRecipe {
             ItemStack itemStack4 = list.get(1);
             if (itemStack3.is(itemStack4.getItem()) && itemStack3.getCount() == 1 && itemStack4.getCount() == 1 && itemStack3.getItem().canBeDepleted()) {
                 Item item = itemStack3.getItem();
-                int j = item.getMaxDamage() - itemStack3.getDamageValue();
-                int k = item.getMaxDamage() - itemStack4.getDamageValue();
-                int l = j + k + item.getMaxDamage() * 5 / 100;
-                int m = item.getMaxDamage() - l;
+                int j = itemStack3.getMaxDamage() - itemStack3.getDamageValue();
+                int k = itemStack3.getMaxDamage() - itemStack4.getDamageValue();
+                int l = j + k + itemStack3.getMaxDamage() * 5 / 100;
+                int m = itemStack3.getMaxDamage() - l;
                 if (m < 0) {
                     m = 0;
                 }
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 4f7457578ab3118d10e0d5dfc23d79c9b20c2f44..77a6257dd47d9f6bd63c282c235474c1c56fe5b0 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -136,7 +136,7 @@ public class MerchantOffer {
             if (i <= 0) return ItemStack.EMPTY; // CraftBukkit - SPIGOT-5476
             int j = Math.max(0, Mth.floor((float) (i * this.demand) * this.priceMultiplier));
 
-            return this.baseCostA.copyWithCount(Mth.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getItem().getMaxStackSize()));
+            return this.baseCostA.copyWithCount(Mth.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getMaxStackSize()));
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
index 44c3f0ceea4b4464873302ecdc53f7eb1cc83052..0f1cec080489059b90c549f11e140943d6384318 100644
--- a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
+++ b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
@@ -7,7 +7,7 @@ import net.minecraft.world.level.material.FluidState;
 
 public class ExplosionDamageCalculator {
     public Optional<Float> getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState) {
-        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(), fluidState.getExplosionResistance()));
+        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(world, pos, blockState), fluidState.getExplosionResistance()));
     }
 
     public boolean shouldBlockExplode(Explosion explosion, BlockGetter world, BlockPos pos, BlockState state, float power) {
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
index 47468086c1cae252aa99c55b0065f225357dee62..c411106f51e9c601b72b5fbda1724fc37988283e 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.cauldron.CauldronInteraction;
 import net.minecraft.server.level.ServerLevel;
@@ -48,10 +50,12 @@ public abstract class AbstractCauldronBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemStack = player.getItemInHand(hand);
         CauldronInteraction cauldronInteraction = this.interactions.get(itemStack.getItem());
         return cauldronInteraction.interact(state, world, pos, player, hand, itemStack);
+        });
     }
 
     @Override
@@ -78,6 +82,7 @@ public abstract class AbstractCauldronBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockPos = PointedDripstoneBlock.findStalactiteTipAboveCauldron(world, pos);
         if (blockPos != null) {
             Fluid fluid = PointedDripstoneBlock.getCauldronFillFluidType(world, blockPos);
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
index 4458582d361dbb24c71aef7b2bc98663f81d2322..9eb4a029e32fd5469212c4f1bcced7dad8ca8ff5 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractFurnaceBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -36,13 +38,15 @@ public abstract class AbstractFurnaceBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
             this.openContainer(world, pos, player);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     protected abstract void openContainer(Level world, BlockPos pos, Player player);
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
index 256d0226c3a347cdb6adb09e880a891d61132d26..e8518447552e4d178dcc339cd18f26665bf9d372 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractSkullBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.Equipable;
@@ -72,6 +74,7 @@ public abstract class AbstractSkullBlock extends BaseEntityBlock implements Equi
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean bl = world.hasNeighborSignal(pos);
             if (bl != state.getValue(POWERED)) {
diff --git a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
index 01b4cf48901aaac897b8def284bf3e2c1cea3570..d47ca105b7c35ef01b5909cda2bcd409cd52021b 100644
--- a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -61,9 +63,11 @@ public class AmethystClusterBlock extends AmethystBlock implements SimpleWaterlo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
index 5c5a3b169795bf8a527b316c666cbc2105c66622..2855aa86f6b4d3568a04ed0257fa9ad9f466c6a0 100644
--- a/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AnvilBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.Component;
@@ -54,7 +56,8 @@ public class AnvilBlock extends FallingBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -62,6 +65,7 @@ public class AnvilBlock extends FallingBlock {
             player.awardStat(Stats.INTERACT_WITH_ANVIL);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
index e98f566aaba3ff7e3058fbd53bcac467c2c63182..00e7a8994ac856ecb1b118f37e6e770291a4535e 100644
--- a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.function.Supplier;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.Item;
@@ -38,8 +40,12 @@ public class AttachedStemBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem().defaultBlockState().setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem()
+                                                                                                    .defaultBlockState()
+                                                                                                    .setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index fd0143944e4fecaf6f1ffa4561702178431575e9..b5f086278599a6a1e29cea0635aa7cb4a30d5cc5 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -38,6 +39,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.growBamboo(world, pos);
         }
@@ -46,11 +48,14 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -60,6 +65,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index 05a508cb457b67078ccb08bd2228a59e73701cf3..277f3eb10fcdd75f3cd9b97a617814f1ceed546f 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -113,6 +115,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -126,6 +129,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
@@ -140,11 +144,14 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -154,6 +161,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BannerBlock.java b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
index 09451bc19b65e09c85389d597625dcc2b6f715c5..856c849434f76f541bdd1687a11555e73b7bfa45 100644
--- a/src/main/java/net/minecraft/world/level/block/BannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.DyeColor;
@@ -31,7 +33,9 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
@@ -46,8 +50,10 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
index 79f19bc122f08d276d96b4490327e228224576fc..faf1ca56819cd8814c738a0ef3ef25fd8229038c 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,7 +39,8 @@ public class BarrelBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -50,6 +53,7 @@ public class BarrelBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
@@ -67,6 +71,7 @@ public class BarrelBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof BarrelBlockEntity) {
             ((BarrelBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
index a46f924ba1ac778f2fabbbd811b993ce33f8cf89..98134d35bc323133f025abf61814f4fe6df6a29c 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.entity.player.Player;
@@ -42,11 +44,13 @@ public class BarrierBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
index 3d2b34c5a7c9b00c1164b4f89c2cbff81fc460eb..7c5ea3bdee72c058df4a687a09a4b5759228e7a2 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.FluidTags;
@@ -62,17 +64,21 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index 94e7a53fb6792d490246c7f2aec8a7f47f2ef493..c54f131b159d52deb51f02dcab6795ac2aeb8853 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -49,19 +51,23 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
index 614de86d4350c40c1e4418cd52f6574040666614..e1473ad620c15cae483486600ebb76a525a55890 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseEntityBlock.java
@@ -36,6 +36,6 @@ public abstract class BaseEntityBlock extends Block implements EntityBlock {
 
     @Nullable
     protected static <E extends BlockEntity, A extends BlockEntity> BlockEntityTicker<A> createTickerHelper(BlockEntityType<A> givenType, BlockEntityType<E> expectedType, BlockEntityTicker<? super E> ticker) {
-        return expectedType == givenType ? ticker : null;
+        return expectedType == givenType ? (BlockEntityTicker<A>) ticker : null;
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index ee4b3ac212483995bb8ae990bebfb8aa2fbe86a5..a88017b645393b00536df867d7d608ba540af05e 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -50,18 +52,23 @@ public abstract class BasePressurePlateBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return canSupportRigidBlock(world, blockposition1) || canSupportCenter(world, blockposition1, Direction.UP);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = this.getSignalForState(state);
 
         if (i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index 547d09c3a1cd0c5401aacb78886896365ba192e7..58c68750933ffb19a93789203a5c7088f28eca48 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -50,7 +51,9 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportRigidBlock(world, pos.below());
+        });
     }
 
     @Override
@@ -72,6 +75,7 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide && world.getBlockState(pos).is(this)) {
             RailShape railShape = state.getValue(this.getShapeProperty());
             if (shouldBeRemoved(pos, world, railShape)) {
@@ -145,11 +149,13 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
index 1dc9af04113364f37b6351dd01f542aa22c59767..3e203ea2da1378abcbd8ca7a56301e297ee1c441 100644
--- a/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeaconBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
@@ -40,7 +42,8 @@ public class BeaconBlock extends BaseEntityBlock implements BeaconBeamBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -52,6 +55,7 @@ public class BeaconBlock extends BaseEntityBlock implements BeaconBeamBlock {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index d40500f9a807cab0b2fb6fa9032f33f4fb74c895..2ac595ce4dde18d15979016d99b792145cd00a8e 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.List;
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.Component;
@@ -72,7 +74,10 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos originalPos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(originalState, world, originalPos, player, hand, hit, () -> {
+            BlockState state = originalState;
+            BlockPos pos = originalPos;
         if (world.isClientSide) {
             return InteractionResult.CONSUME;
         } else {
@@ -133,6 +138,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
                 return InteractionResult.SUCCESS;
             }
         }
+        });
     }
 
     // CraftBukkit start
@@ -199,8 +205,10 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == BedBlock.getNeighbourDirection((BedPart) state.getValue(BedBlock.PART), (Direction) state.getValue(BedBlock.FACING)) ? (neighborState.is((Block) this) && neighborState.getValue(BedBlock.PART) != state.getValue(BedBlock.PART) ? (BlockState) state.setValue(BedBlock.OCCUPIED, (Boolean) neighborState.getValue(BedBlock.OCCUPIED)) : Blocks.AIR.defaultBlockState()) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static Direction getNeighbourDirection(BedPart part, Direction direction) {
         return part == BedPart.FOOT ? direction : direction.getOpposite();
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 4b4a6b081ffedc7f637fa1e1726391d8e0fee0a1..76cf0421b226a1872390fd4bccf387bce3e86a95 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -3,13 +3,13 @@ package net.minecraft.world.level.block;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.Util;
-import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
@@ -124,7 +124,8 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
         int i = (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
         boolean flag = false;
@@ -184,6 +185,7 @@ public class BeehiveBlock extends BaseEntityBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });
     }
 
     private boolean hiveContainsBees(Level world, BlockPos pos) {
@@ -337,17 +339,19 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
-            BlockEntity tileentity = world.getBlockEntity(pos);
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
+                BlockEntity tileentity = world.getBlockEntity(pos);
 
-            if (tileentity instanceof BeehiveBlockEntity) {
-                BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
+                if (tileentity instanceof BeehiveBlockEntity) {
+                    BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
 
-                tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                    tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                }
             }
-        }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     // CraftBukkit start - fix MC-227255
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 2bd714466fb86d4013bd3bceddecba19ce98df08..91be4155f68ee48f6cd6f1c627f56a96191b3dde 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -41,6 +42,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 2774c32bd62255e8902d23e986c8d3e13ccddc7f..f72569143e1f72dc8221f8a6d6198a84b918ad5c 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
@@ -61,6 +63,7 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         boolean flag1 = world.hasNeighborSignal(pos);
 
         if (flag1 != (Boolean) state.getValue(BellBlock.POWERED)) {
@@ -82,8 +85,10 @@ public class BellBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         return this.onHit(world, state, hit, player, true) ? InteractionResult.sidedSuccess(world.isClientSide) : InteractionResult.PASS;
+        });
     }
 
     public boolean onHit(Level world, BlockState state, BlockHitResult hitResult, @Nullable Player player, boolean checkHitPos) {
@@ -208,6 +213,7 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         BellAttachType blockpropertybellattach = (BellAttachType) state.getValue(BellBlock.ATTACHMENT);
         Direction enumdirection1 = BellBlock.getConnectedDirection(state).getOpposite();
 
@@ -226,14 +232,17 @@ public class BellBlock extends BaseEntityBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = BellBlock.getConnectedDirection(state).getOpposite();
 
         return enumdirection == Direction.UP ? Block.canSupportCenter(world, pos.above(), Direction.DOWN) : FaceAttachedHorizontalDirectionalBlock.canAttach(world, pos, enumdirection);
-    }
+        });
+        }
 
     private static Direction getConnectedDirection(BlockState state) {
         switch ((BellAttachType) state.getValue(BellBlock.ATTACHMENT)) {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 54cf35b0c48d96ecfb27ff13cd685c16a1cd616b..b5277154d0d905d4aee31ec3d58e52c4826f9e50 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableMap;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.objects.Object2IntArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import java.util.Map;
@@ -123,14 +124,17 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -140,6 +144,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
             return direction == Direction.UP && neighborState.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -194,6 +199,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         } else {
@@ -212,6 +218,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
index 06f353e28ef6a9e7efc4c2fe383284fd651e0486..82439dca5331ed5c6662fce6725fcf8405d9f480 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Optional;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.BlockUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -62,11 +64,13 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         BlockState blockState = world.getBlockState(blockPos);
         BlockState blockState2 = world.getBlockState(pos.above());
         return (blockState.is(this) || blockState.is(BlockTags.BIG_DRIPLEAF_PLACEABLE)) && (blockState2.is(this) || blockState2.is(Blocks.BIG_DRIPLEAF));
-    }
+        });
+        }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
         BlockState blockState = Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER))).setValue(FACING, direction);
@@ -75,6 +79,7 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((direction == Direction.DOWN || direction == Direction.UP) && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
         }
@@ -84,10 +89,12 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index d4cbff18adb62073a1dceb189043789620af6877..53391cd7b682cc2054b6bd706ff37fd71686afd8 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -5,6 +5,7 @@ import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.logging.LogUtils;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -403,13 +404,21 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     }
 
+    // MCCLab start - Add BlockBehaviour
+    public float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState){
+        return BlockBehaviourUtil.getExplosionResistance(world, pos, blockState, getExplosionResistance());
+    }
+    // MCCLab end - Add BlockBehaviour
+
     public float getExplosionResistance() {
         return this.explosionResistance;
     }
 
     public void wasExploded(Level world, BlockPos pos, Explosion explosion) {}
 
-    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {}
+    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity); // MCCLab start - Adding BlockBehaviour
+    }
 
     @Nullable
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
diff --git a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
index 52c80b6bf4c07e39c247fd8400193ff6d73d1fbe..a0faa4d2653acfb73bcd65dbf6d28b6adc650d49 100644
--- a/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrewingStandBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.stats.Stats;
@@ -60,7 +62,8 @@ public class BrewingStandBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -72,6 +75,7 @@ public class BrewingStandBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
index c751ebf0bb1343a543e70abbfd64f1b070e5c430..42218d73b5831a7b54ac4e595515d9f66958c321 100644
--- a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.BlockParticleOption;
@@ -53,12 +55,15 @@ public class BrushableBlock extends BaseEntityBlock implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, 2);
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, 2);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity var6 = world.getBlockEntity(pos);
         if (var6 instanceof BrushableBlockEntity brushableBlockEntity) {
             brushableBlockEntity.checkReset();
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index ed36a378b79f62c3dce3da637a337595415f14ac..88a4e65886edf0c552e6cedae652453ead24cf7b 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -60,6 +62,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         updateColumn(world, pos, state, world.getBlockState(pos.below()));
     }
 
@@ -125,19 +128,23 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         if (!state.canSurvive(world, pos) || direction == Direction.DOWN || direction == Direction.UP && !neighborState.is(Blocks.BUBBLE_COLUMN) && canExistIn(neighborState)) {
             world.scheduleTick(pos, this, 5);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState blockState = world.getBlockState(pos.below());
         return blockState.is(Blocks.BUBBLE_COLUMN) || blockState.is(Blocks.MAGMA_BLOCK) || blockState.is(Blocks.SOUL_SAND);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 2548244c089dff583c8c424dcaa5504caedf3f10..e6a1c3315ce0e5fd9df4dfcfadec2ea2ef660543 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -19,6 +20,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(5) == 0) {
             Direction enumdirection = BuddingAmethystBlock.DIRECTIONS[random.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
             BlockPos blockposition1 = pos.relative(enumdirection);
diff --git a/src/main/java/net/minecraft/world/level/block/BushBlock.java b/src/main/java/net/minecraft/world/level/block/BushBlock.java
index 03fde6e47c4a347c62fe9b4a3351769aedf874f6..553d288cc36d095ec534d69621fc51b4dbf2f849 100644
--- a/src/main/java/net/minecraft/world/level/block/BushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BushBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -22,6 +23,7 @@ public class BushBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!state.canSurvive(world, pos)) {
             if (!(world instanceof net.minecraft.server.level.ServerLevel && ((net.minecraft.server.level.ServerLevel) world).hasPhysicsEvent) || !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(world, pos).isCancelled()) { // Paper
@@ -30,13 +32,16 @@ public class BushBlock extends Block {
         }
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockPos blockposition1 = pos.below();
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockPos blockposition1 = pos.below();
 
-        return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+            return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 3e792514d042f05ff6848b7d6506472ace67b67a..72021632a3833a4bd1640b262a4896404a6456f7 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -108,7 +110,8 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             return InteractionResult.CONSUME;
         } else {
@@ -130,6 +133,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
             world.gameEvent((Entity) player, GameEvent.BLOCK_ACTIVATE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     public void press(BlockState state, Level world, BlockPos pos) {
@@ -174,6 +178,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             this.checkPressed(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 0003fb51ae3a6575575e10b4c86719f3061e2577..8672c516ce7a6140f1c59a1c13dcf7096a5792f9 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Iterator;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,6 +39,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +48,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1)) {
@@ -84,15 +88,18 @@ public class CactusBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         Direction enumdirection;
@@ -110,6 +117,7 @@ public class CactusBlock extends Block {
         } while (!iblockdata1.isSolid() && !world.getFluidState(pos.relative(enumdirection)).is(FluidTags.LAVA));
 
         return false;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 397b8945bd0c2f413b17ba95cfb31befca252595..064249a399c9fe2c5533e404314d056cd555d73c 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
@@ -47,7 +48,8 @@ public class CakeBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
 
@@ -78,6 +80,7 @@ public class CakeBlock extends Block {
         }
 
         return CakeBlock.eat(world, pos, state, player);
+        });
     }
 
     protected static InteractionResult eat(LevelAccessor world, BlockPos pos, BlockState state, Player player) {
@@ -113,13 +116,17 @@ public class CakeBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
-    }
+        });
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 7700461b8cd0bde1bf6c0d5e4b73184bed1adc4e..e639a9b30e05a87d04cc84979852ddf35d752b9d 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -70,7 +72,8 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CampfireBlockEntity) {
@@ -89,6 +92,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         }
 
         return InteractionResult.PASS;
+        });
     }
 
     @Override
@@ -128,12 +132,14 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(neighborState)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private boolean isSmokeSource(BlockState state) {
         return state.is(Blocks.HAY_BLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/CandleBlock.java b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
index ff575d3d369340f4ec0d61cc4dea144432ea3690..52bf632be4edef44932d86c718c4b30ab35dcdf7 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableList;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
@@ -60,13 +61,15 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (player.getAbilities().mayBuild && player.getItemInHand(hand).isEmpty() && state.getValue(LIT)) {
             extinguish(player, state, world, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     @Override
@@ -88,11 +91,13 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -155,6 +160,8 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
index 29cf6571ef738823e52d7e18400fcb9f51308114..df5d1195a24441afd3693c7a0abcdca7caf77763 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -52,7 +54,8 @@ public class CandleCakeBlock extends AbstractCandleBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemStack = player.getItemInHand(hand);
         if (!itemStack.is(Items.FLINT_AND_STEEL) && !itemStack.is(Items.FIRE_CHARGE)) {
             if (candleHit(hit) && player.getItemInHand(hand).isEmpty() && state.getValue(LIT)) {
@@ -69,6 +72,7 @@ public class CandleCakeBlock extends AbstractCandleBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     private static boolean candleHit(BlockHitResult hitResult) {
@@ -87,12 +91,16 @@ public class CandleCakeBlock extends AbstractCandleBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
index db687aff597df22913b8764ec2cd28976b66e061..b77b196effa37f8c4035503e46259035a8356f36 100644
--- a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.BlockGetter;
@@ -24,11 +25,15 @@ public class CarpetBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return !world.isEmptyBlock(pos.below());
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java b/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
index c170157b5fec0319119d861caae0733308001722..e1a0cb9ca70e7109fd07c169902af6520c2298bc 100644
--- a/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CartographyTableBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.stats.Stats;
@@ -24,7 +26,8 @@ public class CartographyTableBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -32,6 +35,7 @@ public class CartographyTableBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_CARTOGRAPHY_TABLE);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
index ead7b37122c76d43af2cdd17af7f0da8014efb26..674823ee03342534f9dc292f736614c50b979082 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -64,8 +65,10 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         return CaveVines.use(player, state, world, pos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
index e9882ad8905d93e97391eea6f9826214caa2cee6..49540a6aabfea9c95ed58a20f8699e8637903d40 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -39,8 +40,10 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         return CaveVines.use(player, state, world, pos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
index 0bd8ea3143b2e9755d492af4596622d1dca1afaf..bbfe2a3680a58507761e7281ab98814019ff74f8 100644
--- a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -5,6 +5,8 @@ import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -50,7 +52,8 @@ public class CeilingHangingSignBlock extends SignBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity itemStack = world.getBlockEntity(pos);
         if (itemStack instanceof SignBlockEntity signBlockEntity) {
             // Paper start - decompile fixes
@@ -62,6 +65,7 @@ public class CeilingHangingSignBlock extends SignBlock {
         }
 
         return super.use(state, world, pos, player, hand, hit);
+        });
     }
 
     private boolean shouldTryToChainAnotherHangingSign(Player player, BlockHitResult hitResult, SignBlockEntity sign, ItemStack stack) {
@@ -70,8 +74,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.above()).isFaceSturdy(world, pos.above(), Direction.DOWN, SupportType.CENTER);
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -113,8 +119,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChainBlock.java b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
index 1c5d7173c320b4f852f138c4050d6c27c6126c0b..ffd5ab064fc9127fa5a5bf247da34fb3ed650698 100644
--- a/src/main/java/net/minecraft/world/level/block/ChainBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -53,11 +55,13 @@ public class ChainBlock extends RotatedPillarBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 5e22d175b1048a58802cdf64ac70a8b56329e915..aa957f93b2e8f35a79fa3dc5acf5b73b308d46d2 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.floats.Float2FloatFunction;
 import java.util.Iterator;
 import java.util.List;
@@ -150,6 +151,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ChestBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -165,6 +167,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -259,7 +262,8 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -273,6 +277,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     protected Stat<ResourceLocation> getOpenChestStat() {
@@ -415,6 +420,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof ChestBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
index c86558e6df739103185167fce82f568f294b1c4e..ca24a366ab113cc27cc5c0e5f36d969cda034ab4 100644
--- a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.List;
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvent;
@@ -52,14 +54,15 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity optional = world.getBlockEntity(pos);
         if (optional instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
-            Optional<Vec2> optional = getRelativeHitCoordinatesForBlockFace(hit, state.getValue(HorizontalDirectionalBlock.FACING));
-            if (optional.isEmpty()) {
+            Optional<Vec2> optional2 = getRelativeHitCoordinatesForBlockFace(hit, state.getValue(HorizontalDirectionalBlock.FACING));
+            if (optional2.isEmpty()) {
                 return InteractionResult.PASS;
             } else {
-                int i = getHitSlot(optional.get());
+                int i = getHitSlot(optional2.get());
                 if (state.getValue(SLOT_OCCUPIED_PROPERTIES.get(i))) {
                     removeBook(world, pos, player, chiseledBookShelfBlockEntity, i);
                     return InteractionResult.sidedSuccess(world.isClientSide);
@@ -76,6 +79,7 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     private static Optional<Vec2> getRelativeHitCoordinatesForBlockFace(BlockHitResult hit, Direction facing) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index e9beebedf1d60e06e16c442b64d28d022a3e3164..b1ae73c18aef8e7461f937ff07d9423bc18e0ca9 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.Iterator;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,6 +39,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -55,6 +58,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
@@ -169,15 +173,18 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction != Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         if (!iblockdata1.is((Block) this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
@@ -207,6 +214,7 @@ public class ChorusFlowerBlock extends Block {
         } else {
             return true;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index 2e8bf4463b8da8da50cd14d3f84aba5e930e5710..2290a53b0f5d83869b9353139b117f9fef186c37 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,6 +38,7 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return state; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
@@ -45,10 +47,12 @@ public class ChorusPlantBlock extends PipeBlock {
             boolean bl = neighborState.is(this) || neighborState.is(Blocks.CHORUS_FLOWER) || direction == Direction.DOWN && neighborState.is(Blocks.END_STONE);
             return state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(bl));
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
@@ -58,26 +62,29 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return true; // Paper - add option to disable block updates
-        BlockState blockState = world.getBlockState(pos.below());
-        boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates)
+                return true; // Paper - add option to disable block updates
+            BlockState blockState = world.getBlockState(pos.below());
+            boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
 
-        for(Direction direction : Direction.Plane.HORIZONTAL) {
-            BlockPos blockPos = pos.relative(direction);
-            BlockState blockState2 = world.getBlockState(blockPos);
-            if (blockState2.is(this)) {
-                if (bl) {
-                    return false;
-                }
+            for (Direction direction : Direction.Plane.HORIZONTAL) {
+                BlockPos blockPos = pos.relative(direction);
+                BlockState blockState2 = world.getBlockState(blockPos);
+                if (blockState2.is(this)) {
+                    if (bl) {
+                        return false;
+                    }
 
-                BlockState blockState3 = world.getBlockState(blockPos.below());
-                if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
-                    return true;
+                    BlockState blockState3 = world.getBlockState(blockPos.below());
+                    if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
+                        return true;
+                    }
                 }
             }
-        }
 
-        return blockState.is(this) || blockState.is(Blocks.END_STONE);
+            return blockState.is(this) || blockState.is(Blocks.END_STONE);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index f5c42fee3ec68a7a9260f01d19c7a1d7533bad9c..7616766bc429f74ef000ecd3a41b0834ab36e60a 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -51,6 +53,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
@@ -63,9 +66,11 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
 
         return iblockdata1.is(BlockTags.JUNGLE_LOGS);
+        });
     }
 
     @Override
@@ -110,8 +115,10 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(CocoaBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 2e7c03b00bc941b86df6a7f1b2b188c9f0aede22..1cf424093c4b6351829b3f26b6329952af1749cd 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.mojang.logging.LogUtils;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -52,6 +53,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
@@ -83,6 +85,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity) {
@@ -127,7 +130,8 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity && (player.canUseGameMasterBlocks() || (player.isCreative() && player.getBukkitEntity().hasPermission("minecraft.commandblock")))) { // Paper - command block permission
@@ -136,6 +140,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 16174c573b1acd1e1a75dba9305994ed37fe6c72..e0d611a4e8dcd14de6ae523de667810fe86adc46 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.List;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -44,8 +46,10 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     protected int getOutputSignal(BlockGetter world, BlockPos pos, BlockState state) {
@@ -113,18 +117,20 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(ComparatorBlock.MODE);
-            float f = state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
+            BlockState state2 = (BlockState) state.cycle(ComparatorBlock.MODE);
+            float f = state2.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
 
             world.playSound(player, pos, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, f);
-            world.setBlock(pos, state, 2);
-            this.refreshOutputState(world, pos, state);
+            world.setBlock(pos, state2, 2);
+            this.refreshOutputState(world, pos, state2);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     @Override
@@ -182,6 +188,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.refreshOutputState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 10d3912ef043eefdf89105332e29b0d2bf4a5539..99f79ced9ef69622dccce5a8f5e5d4e99fdb8b35 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.objects.Object2FloatMap;
 import it.unimi.dsi.fastutil.objects.Object2FloatOpenHashMap;
 import javax.annotation.Nullable;
@@ -224,7 +225,8 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         int i = (Integer) state.getValue(ComposterBlock.LEVEL);
         ItemStack itemstack = player.getItemInHand(hand);
 
@@ -251,6 +253,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     public static BlockState insertItem(Entity user, BlockState state, ServerLevel world, ItemStack stack, BlockPos pos) {
@@ -358,6 +361,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
             world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
             world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
index 065525e8ce46c12cdfa1d5d06fb96ea4654e95a3..7461696830b65b64d68d346c6f1a4a62719c1a4e 100644
--- a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.FluidTags;
@@ -92,6 +93,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (ConcretePowderBlock.touchesLiquid(world, pos)) {
             // Suppress during worldgen
@@ -111,6 +113,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
index 1a97e9075ec3fc3cad597d78ef46310c4c87cac3..2c34e5336a9962c4c62552d011096e1b43294b19 100644
--- a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.FluidTags;
@@ -64,11 +66,13 @@ public class ConduitBlock extends BaseEntityBlock implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..231b5d20d0f469bf8a0d56d56ebeec0a95c5d9e1 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -24,6 +26,7 @@ public class CoralBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
@@ -37,11 +40,13 @@ public class CoralBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!this.scanForWater(world, pos)) {
             world.scheduleTick(pos, (Block) this, 60 + world.getRandom().nextInt(40));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     protected boolean scanForWater(BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 86e58786c8a4caa965ea63aff50a13ae61da8c1c..f36bf9b28ada20ee8c2ad52b9deacb66cafb8d4d 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -27,6 +28,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
@@ -40,6 +42,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +53,6 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index f980e31c4b6ba396be6ef317cffe027004a090e0..c1850315a4ded381ddf1ac37e0508fab9aa0478b 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -32,6 +33,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false)).isCancelled()) {
@@ -45,6 +47,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -55,6 +58,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index f759ad7b49244a91aca4d36db2980267d46e1c23..6a694d49bd08ddb1a27e7c2c04069d9a655cf3b0 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -27,6 +28,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
@@ -40,6 +42,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +53,6 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
             this.tryScheduleDieTick(state, world, pos);
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
index a345ed80a3ede0efdb57f198fffe5d2056316e1e..c24e6ed5011706106e897196fd2a992c57556ae3 100644
--- a/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CraftingTableBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.stats.Stats;
@@ -23,7 +24,8 @@ public class CraftingTableBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -31,6 +33,7 @@ public class CraftingTableBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_CRAFTING_TABLE);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 6365ddea0c23bc5d4009d98915f2b39aed2a0328..4800485aec3b9256bf9ee05ee93a983eaf0cc254 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
@@ -70,6 +71,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
 
@@ -162,7 +164,9 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return CropBlock.hasSufficientLight(world, pos) && super.canSurvive(state, world, pos);
+        });
     }
 
     protected static boolean hasSufficientLight(LevelReader world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index 48eb8f0c1da1fc1971563934497059b21aebf7b6..6691347e94407162a01f31bbfef4478d279e1217 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
@@ -74,7 +76,8 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (player.mayBuild()) {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
@@ -89,6 +92,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
index 5737b2cdd662197883e2f3a6358f6a38a5b9db94..92597f68c1fe4ac63b29939f74c6a511435db28a 100644
--- a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.List;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -52,11 +54,13 @@ public class DecoratedPotBlock extends BaseEntityBlock implements SimpleWaterlog
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 05dfb1790a292f9f85b641377c2ca3675726c127..beffb615ad903d98ec803432cddcecf8e9ecf617 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Predicate;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -54,6 +56,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
             this.checkPressed(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 0f513bc36ed62a8eff1be874de61f47888739ec8..cd1ee7b8c85c6afbf14061b26e24b5e06dc8c0b3 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,9 +38,11 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return this.canSurviveOn(world, blockposition1, world.getBlockState(blockposition1));
+        });
     }
 
     protected boolean canSurviveOn(LevelReader world, BlockPos pos, BlockState state) {
@@ -48,6 +51,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isLocked(world, pos, state)) {
             boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
             boolean flag1 = this.shouldTurnOn(world, pos, state);
@@ -86,6 +90,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (state.canSurvive(world, pos)) {
             this.checkTickOnNeighbor(world, pos, state);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
index 1ec9bad118dee4ad072242c1b47c82ad74760aca..9722be2e4d7a6ec79d22539897787d23e0dc5892 100644
--- a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -35,15 +36,18 @@ public class DirtPathBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, (Block) this, 1);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // CraftBukkit start - do not fade if the block is valid here
         if (state.canSurvive(world, pos)) {
             return;
@@ -54,9 +58,11 @@ public class DirtPathBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 9b1e51c1d95da885c80c6d05000d83436b7bcfb4..39d8a4953cd51b30b1fbc2e6acc113332b752799 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.mojang.logging.LogUtils;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import java.util.Map;
 import net.minecraft.Util;
@@ -60,7 +61,8 @@ public class DispenserBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -77,6 +79,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     public void dispenseFrom(ServerLevel world, BlockState state, BlockPos pos) {
@@ -113,6 +116,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         boolean flag1 = world.hasNeighborSignal(pos) || world.hasNeighborSignal(pos.above());
         boolean flag2 = (Boolean) state.getValue(DispenserBlock.TRIGGERED);
 
@@ -127,6 +131,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.dispenseFrom(world, state, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index c028a7158e41a0754abb8e24dcd647633fbf3fe8..a401e975793544df9241ada7137233f590a88cb1 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundSource;
@@ -79,10 +81,12 @@ public class DoorBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoorBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) ? (neighborState.is((Block) this) && neighborState.getValue(DoorBlock.HALF) != blockpropertydoubleblockhalf ? (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(DoorBlock.FACING, (Direction) neighborState.getValue(DoorBlock.FACING))).setValue(DoorBlock.OPEN, (Boolean) neighborState.getValue(DoorBlock.OPEN))).setValue(DoorBlock.HINGE, (DoorHingeSide) neighborState.getValue(DoorBlock.HINGE))).setValue(DoorBlock.POWERED, (Boolean) neighborState.getValue(DoorBlock.POWERED)) : Blocks.AIR.defaultBlockState()) : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
@@ -164,16 +168,17 @@ public class DoorBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (!this.type.canOpenByHand()) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(DoorBlock.OPEN);
-            world.setBlock(pos, state, 10);
+            world.setBlock(pos, state.cycle(DoorBlock.OPEN), 10);
             this.playSound(player, world, pos, (Boolean) state.getValue(DoorBlock.OPEN));
             world.gameEvent((Entity) player, this.isOpen(state) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     public boolean isOpen(BlockState state) {
@@ -190,6 +195,7 @@ public class DoorBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         // CraftBukkit start
         BlockPos otherHalf = pos.relative(state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? Direction.UP : Direction.DOWN);
 
@@ -220,11 +226,13 @@ public class DoorBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is((Block) this);
-    }
+        });
+        }
 
     private void playSound(@Nullable Entity entity, Level world, BlockPos pos, boolean open) {
         world.playSound(entity, pos, open ? this.type.doorOpen() : this.type.doorClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index 030b38d5d5d2578d6ef482a239ef58787efa3b08..af010b8e2d264dc59a2c81c5d3f7cfb30fd4207b 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
@@ -32,10 +34,12 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoublePlantBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) && (!neighborState.is((Block) this) || neighborState.getValue(DoublePlantBlock.HALF) == blockpropertydoubleblockhalf) ? Blocks.AIR.defaultBlockState() : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -55,6 +59,7 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(DoublePlantBlock.HALF) != DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -62,6 +67,7 @@ public class DoublePlantBlock extends BushBlock {
 
             return iblockdata1.is((Block) this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
         }
+        });
     }
 
     public static void placeAt(LevelAccessor world, BlockState state, BlockPos pos, int flags) {
diff --git a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
index 7e1edcc7b9f170b7c649437c2f0dd78c0bab9be4..e5ae4cdbcf2a4e56d9d0c7275bef8a792df8cb7b 100644
--- a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.util.Mth;
@@ -31,13 +32,16 @@ public class DragonEggBlock extends FallingBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         this.teleport(state, world, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
+        });
     }
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(BlockBehaviourUtil.isVanillaBlockAttackReplaced(state, world, pos, player)) return;
         this.teleport(state, world, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java b/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
index 839b7bc9392906dca384003468746963631fe095..27c397c3010d3e7a5e376595e94d4336603f9ee2 100644
--- a/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnchantmentTableBlock.java
@@ -83,13 +83,15 @@ public class EnchantmentTableBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
             player.openMenu(state.getMenuProvider(world, pos));
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
index 7385e91f32f070e86a4e0fd3d214f55d832c7979..ed6e7f67e40e0ba8ccedad920bb1e75322c77029 100644
--- a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -72,7 +74,8 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         PlayerEnderChestContainer playerEnderChestContainer = player.getEnderChestInventory();
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (playerEnderChestContainer != null && blockEntity instanceof EnderChestBlockEntity) {
@@ -94,6 +97,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
         } else {
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     @Override
@@ -145,11 +149,13 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
@@ -159,6 +165,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof EnderChestBlockEntity) {
             ((EnderChestBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
index 9d889080be6d5b4b679fa9a2bd46ad8fd2ad1e77..a09a31764299d9fb0011b872d790505448290e77 100644
--- a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -21,8 +23,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return canAttach(world, pos, getConnectedDirection(state).getOpposite());
-    }
+        });
+        }
 
     public static boolean canAttach(LevelReader world, BlockPos pos, Direction direction) {
         BlockPos blockPos = pos.relative(direction);
@@ -50,8 +54,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     protected static Direction getConnectedDirection(BlockState state) {
         switch ((AttachFace)state.getValue(FACE)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FallingBlock.java b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
index 631ac128aebcd6388482adb3b1f03673281eaf95..b6badad295ce73e1d5e3612f7338428cc91e7764 100644
--- a/src/main/java/net/minecraft/world/level/block/FallingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.BlockParticleOption;
@@ -27,12 +28,15 @@ public class FallingBlock extends Block implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, this.getDelayAfterPlace());
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, this.getDelayAfterPlace());
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (isFree(world.getBlockState(pos.below())) && pos.getY() >= world.getMinBuildHeight()) {
             FallingBlockEntity fallingBlockEntity = FallingBlockEntity.fall(world, pos, state);
             this.falling(fallingBlockEntity);
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 5946f06f63b5694034bd027984a4925b0831d439..82e294dba8891cfb0f4a52e0bacead8e392ee75d 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.level.block;
 
-import java.util.Iterator;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -45,19 +46,23 @@ public class FarmBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock || iblockdata1.getBlock() instanceof MovingPistonBlock;
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -76,6 +81,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             FarmBlock.turnToDirt((Entity) null, state, world, pos);
         }
@@ -84,6 +90,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceBlock.java b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
index b7b8c9ca03cf4aa8b8e2cf60d15d627769e82ffa..2dfd264587b6896ce8be6b26f2f34f1772ce779b 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -59,13 +60,15 @@ public class FenceBlock extends CrossCollisionBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             ItemStack itemStack = player.getItemInHand(hand);
             return itemStack.is(Items.LEAD) ? InteractionResult.SUCCESS : InteractionResult.PASS;
         } else {
             return LeadItem.bindPlayerMobs(player, world, pos);
         }
+        });
     }
 
     @Override
@@ -86,12 +89,15 @@ public class FenceBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis()
+                            .getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index baaf648f65042a9c6bf41eaba595dce2aa6bb187..fbc7954707dd80b4589d43b879c2d68e4b561272 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundSource;
@@ -57,6 +58,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
         if (((Direction) state.getValue(FenceGateBlock.FACING)).getClockWise().getAxis() != enumdirection_enumaxis) {
@@ -66,6 +68,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
             return (BlockState) state.setValue(FenceGateBlock.IN_WALL, flag);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -114,19 +117,20 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if ((Boolean) state.getValue(FenceGateBlock.OPEN)) {
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, false);
-            world.setBlock(pos, state, 10);
+            world.setBlock(pos, state.setValue(FenceGateBlock.OPEN, false), 10);
         } else {
+            BlockState state2 = state;
             Direction enumdirection = player.getDirection();
 
-            if (state.getValue(FenceGateBlock.FACING) == enumdirection.getOpposite()) {
-                state = (BlockState) state.setValue(FenceGateBlock.FACING, enumdirection);
+            if (state2.getValue(FenceGateBlock.FACING) == enumdirection.getOpposite()) {
+                state2 = (BlockState) state.setValue(FenceGateBlock.FACING, enumdirection);
             }
 
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, true);
-            world.setBlock(pos, state, 10);
+            state2 = (BlockState) state.setValue(FenceGateBlock.OPEN, true);
+            world.setBlock(pos, state2, 10);
         }
 
         boolean flag = (Boolean) state.getValue(FenceGateBlock.OPEN);
@@ -134,10 +138,12 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         world.playSound(player, pos, flag ? this.type.fenceGateOpen() : this.type.fenceGateClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
         world.gameEvent((Entity) player, flag ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
+        });
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 4002e0fffb60556e7af1aeff71b4be244f02b0f5..be492db26c84602516ae3a6576869a780d4fbd0c 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableMap;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.Map;
@@ -101,6 +102,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
@@ -120,6 +122,7 @@ public class FireBlock extends BaseFireBlock {
         }
         return this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -158,13 +161,16 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return world.getBlockState(blockposition1).isFaceSturdy(world, blockposition1, Direction.UP) || this.isValidFireLocation(world, pos);
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world)); // Paper
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
index 35fdff13b3bdd4769da858e18865e83dca4bdb1e..dc8a898a2f58b23b0ba282b0daf18d72b748dbdb 100644
--- a/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FletchingTableBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -15,7 +16,9 @@ public class FletchingTableBlock extends CraftingTableBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         return InteractionResult.PASS;
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
index db05c1ea847d60ad45d33cd798cb34ad3f5cfd75..5f3e715bde6d8d5b6505ba0c265835c1e288e751 100644
--- a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.stats.Stats;
@@ -45,7 +47,8 @@ public class FlowerPotBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemStack = player.getItemInHand(hand);
         Item item = itemStack.getItem();
         BlockState blockState = (item instanceof BlockItem ? POTTED_BY_CONTENT.getOrDefault(((BlockItem)item).getBlock(), Blocks.AIR) : Blocks.AIR).defaultBlockState();
@@ -94,6 +97,7 @@ public class FlowerPotBlock extends Block {
         } else {
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
@@ -107,8 +111,10 @@ public class FlowerPotBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     public Block getContent() {
         return this.content;
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index bebcdc70c4cb01764428836fff76f03b94f2eae8..48ce3f8800593c6259a75a627e6aec6f596663a9 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.annotations.VisibleForTesting;
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -43,8 +44,10 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return mayPlaceOn(world, pos.below());
-    }
+        });
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -57,11 +60,14 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.canSurvive(state, world, pos)) {
             this.destroyBlock(world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index a3af96b2518b41f370d09cfda26dc589b9ee977b..6d4ce7124488b46c77370ac54d8e0ab16937fd8f 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -27,11 +28,13 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!world.paperConfig().environment.frostedIce.enabled) return; // Paper - add ability to disable frosted ice
         if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
@@ -63,6 +66,7 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (sourceBlock.defaultBlockState().is(this) && this.fewerNeigboursThan(world, pos, 2)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
index a061fec641c5c5fabf24a41ca4eb0ab0cb233c70..af0e8d24d43b8928fe05882abf3f41b6bdd8a942 100644
--- a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.function.ToIntFunction;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -42,11 +44,13 @@ public class GlowLichenBlock extends MultifaceBlock implements BonemealableBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
index c6a5d917616ef57c9ea949acae20db045bb4407b..62fbe2cbec92f72ff62c1f970e84f92fb4e2a635 100644
--- a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.Component;
@@ -145,11 +146,14 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return true;
-    }
+        });
+        }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -157,6 +161,7 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
             player.awardStat(Stats.INTERACT_WITH_GRINDSTONE);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
index bac57e5234182315a66c9726490a233cb9d99181..c4b71706cffe8e6dfa0ddf6add1005baf08679ea 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -39,6 +41,7 @@ public abstract class GrowingPlantBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.relative(this.growthDirection.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         if (!this.canAttachTo(blockState)) {
@@ -46,10 +49,12 @@ public abstract class GrowingPlantBlock extends Block {
         } else {
             return blockState.is(this.getHeadBlock()) || blockState.is(this.getBodyBlock()) || blockState.isFaceSturdy(world, blockPos, this.growthDirection);
         }
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
index fa22fb66c6484ba644620b0d98f80c5354200e34..663ba1c36ff13dce33ebb4eca0441709116ebba2 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Optional;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.BlockUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -28,20 +30,22 @@ public abstract class GrowingPlantBodyBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, this, 1);
-        }
-
-        GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
-        if (direction == this.growthDirection && !neighborState.is(this) && !neighborState.is(growingPlantHeadBlock)) {
-            return this.updateHeadAfterConvertedFromBody(state, growingPlantHeadBlock.getStateForPlacement(world));
-        } else {
-            if (this.scheduleFluidTicks) {
-                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, this, 1);
             }
 
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+            GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
+            if (direction == this.growthDirection && !neighborState.is(this) && !neighborState.is(growingPlantHeadBlock)) {
+                return this.updateHeadAfterConvertedFromBody(state, growingPlantHeadBlock.getStateForPlacement(world));
+            } else {
+                if (this.scheduleFluidTicks) {
+                    world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+                }
+
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index b325fdec8eb99ce57152a5c0fefa5059685276e4..dcd548fd49304a46398b6337fcd30548dc3c2d76 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -40,6 +41,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // Spigot start
         int modifier;
         if (this == Blocks.KELP) {
@@ -86,6 +88,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -99,6 +102,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
index 664ff099fd6f44b4bc2e23d06afe8006931f1aa6..6555980a49a85feca66ba58e846c3710f19294dd 100644
--- a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -50,10 +52,12 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.above();
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, Direction.DOWN);
-    }
+        });
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -62,6 +66,7 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !this.canSurvive(state, world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -71,5 +76,6 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index 4311c97edd2a70e9ed8fed3fdf9471c513ddc1d4..4fe08a418271daf55c7b90985d098dae697ea26c 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.stats.Stats;
@@ -128,7 +130,8 @@ public class HopperBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -140,10 +143,12 @@ public class HopperBlock extends BaseEntityBlock {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         this.checkPoweredState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
index 1dd44eb0ab977093660e8fe6f49338e7f5ef7b28..eeecc0f7c5ce4817bc79373e89cc17bcf0a9cc4d 100644
--- a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -35,9 +37,11 @@ public class HugeMushroomBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableMushroomBlockUpdates) return state; // Paper - add option to disable block updates
         return neighborState.is(this) ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(false)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index 04089e6f7d6e3d532b00585870283922b6be5246..ef616a52c2bd743ad4c0eb02e5b3fa87ead7096f 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -49,6 +51,7 @@ public class IceBlock extends HalfTransparentBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 83352a3909e892e35f96adea092a8c399ad98463..a370d8595783178384bb831ece92b4c599676418 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -39,12 +40,15 @@ public class IronBarsBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis()
+                            .isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
index c031564cd85e18450230bb6b461e11744fbe135e..7e7dff25726b5d651bf9d48af65ecf44875b2e76 100644
--- a/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JigsawBlock.java
@@ -60,7 +60,8 @@ public class JigsawBlock extends Block implements EntityBlock, GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof JigsawBlockEntity && player.canUseGameMasterBlocks()) {
             player.openJigsawBlock((JigsawBlockEntity)blockEntity);
@@ -68,6 +69,7 @@ public class JigsawBlock extends Block implements EntityBlock, GameMasterBlock {
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     public static boolean canAttach(StructureTemplate.StructureBlockInfo info1, StructureTemplate.StructureBlockInfo info2) {
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 45bec8389721e44a2346b3e31d37c520692fdd17..f542fd9e13f1ae1e910638a7a3d48422b475bad2 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -44,7 +44,8 @@ public class JukeboxBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (state.getValue(HAS_RECORD)) {
             BlockEntity var8 = world.getBlockEntity(pos);
             if (var8 instanceof JukeboxBlockEntity) {
@@ -55,6 +56,7 @@ public class JukeboxBlock extends BaseEntityBlock {
         }
 
         return InteractionResult.PASS;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LadderBlock.java b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
index 6bcc83245e8046518921b82d948d45900ae0c8db..e33f37e7f5798ff99a46b32c2bb53606a3139610 100644
--- a/src/main/java/net/minecraft/world/level/block/LadderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -54,12 +56,15 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         return this.canAttachTo(world, pos.relative(direction.getOpposite()), direction);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -69,6 +74,7 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LanternBlock.java b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
index da143e1d162855e99e7c1bc8db55a8c217f3a3dc..ad60f9573d4d477c6a05ad9c614f322856a02130 100644
--- a/src/main/java/net/minecraft/world/level/block/LanternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -59,8 +61,10 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = getConnectedDirection(state).getOpposite();
         return Block.canSupportCenter(world, pos.relative(direction), direction.getOpposite());
+        });
     }
 
     protected static Direction getConnectedDirection(BlockState state) {
@@ -69,12 +73,14 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index ebee1dfdb1d75381de847834262a66b45fd9f0ce..6a41c2445b3ffcf6fe51866faf32b144c16b7110 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.OptionalInt;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -50,6 +52,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.decaying(state)) {
             // CraftBukkit start
             LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
@@ -71,6 +74,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, LeavesBlock.updateDistance(state, world, pos), 3);
     }
 
@@ -81,6 +85,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -92,6 +97,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static BlockState updateDistance(BlockState state, LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 2da67bd990b3f3762dfe089bf543cebac66378db..af3f3b2eff65decf0df05d30aa2edb0303dfa534 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
@@ -191,6 +193,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         LecternBlock.changePowered(world, pos, state, false);
     }
 
@@ -262,7 +265,8 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if ((Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
             if (!world.isClientSide) {
                 this.openScreen(world, pos, player);
@@ -274,6 +278,7 @@ public class LecternBlock extends BaseEntityBlock {
 
             return !itemstack.isEmpty() && !itemstack.is(ItemTags.LECTERN_BOOKS) ? InteractionResult.CONSUME : InteractionResult.PASS;
         }
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index 057ff8ba1c924c032a03389dcf4f99b4b386fb0a..09da63338f8c251f7c762f45aa0397bfa1b91ae7 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -81,7 +81,8 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockState iblockdata1;
 
         if (world.isClientSide) {
@@ -113,6 +114,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
             world.gameEvent((Entity) player, (Boolean) iblockdata1.getValue(LeverBlock.POWERED) ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     public BlockState pull(BlockState state, Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LightBlock.java b/src/main/java/net/minecraft/world/level/block/LightBlock.java
index 6eec44c484763f877aece6d9676ffc166bc10395..d1bc49e8133fb7b69963df8f54fe1e7a4cbbbd49 100644
--- a/src/main/java/net/minecraft/world/level/block/LightBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.function.ToIntFunction;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
@@ -44,7 +46,8 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (!world.isClientSide && player.canUseGameMasterBlocks()) {
             if (player.getItemInHand(hand).getItem() != Items.LIGHT || !player.mayInteract(world, pos) || !player.mayUseItemAt(pos, hit.getDirection(), player.getItemInHand(hand))) { return InteractionResult.FAIL; } // Paper
             world.setBlock(pos, state.cycle(LEVEL), 2);
@@ -52,6 +55,7 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
         } else {
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
@@ -76,11 +80,13 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index da3b301a42a93c891d083a6e02d1be8ed35adf1d..939639bc8a50d270ab3542f84c7601ae32150e40 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -59,11 +60,13 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
+                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
@@ -106,6 +109,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
         this.updateNeighbours(state, world, pos);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 4a1830f85f47014da63e4584f411d13f0f0cd8b3..ffc193d16aced3900630d7ab32afc867e8852362 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -7,6 +7,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -65,6 +67,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         state.getFluidState().randomTick(world, pos, random);
     }
 
@@ -135,15 +138,18 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getFluidState().isSource() || neighborState.getFluidState().isSource()) {
             world.scheduleTick(pos, state.getFluidState().getType(), this.fluid.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (this.shouldSpreadLiquid(world, pos, state)) {
             world.scheduleTick(pos, state.getFluidState().getType(), this.getFlowSpeed(world, pos)); // Paper
         }
diff --git a/src/main/java/net/minecraft/world/level/block/LoomBlock.java b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
index df6e87f910b4881d9fec53d4ad26d396886a3e82..f82e6267b895b13e1a40c23bfc2cfb89f8d6a9e8 100644
--- a/src/main/java/net/minecraft/world/level/block/LoomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LoomBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.stats.Stats;
@@ -25,7 +26,8 @@ public class LoomBlock extends HorizontalDirectionalBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -33,6 +35,7 @@ public class LoomBlock extends HorizontalDirectionalBlock {
             player.awardStat(Stats.INTERACT_WITH_LOOM);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
index 1b766045687e4dcded5cbcc50b746c55b9a34e22..22a8559ca524e75f03b74623d7869b6badf681be 100644
--- a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -22,6 +23,7 @@ public class MagmaBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
             entity.hurt(world.damageSources().hotFloor(), 1.0F);
@@ -33,20 +35,24 @@ public class MagmaBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
             world.scheduleTick(pos, (Block) this, 20);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         world.scheduleTick(pos, (Block) this, 20);
+        BlockBehaviourUtil.onPlaceCallback(state, world, pos, oldState, notify); // MCCLab - Add Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index cf240750aecc57d287efc986b471e66a860850ee..e7e1f4532eda0b60c0dd60ad03c96309440c17b9 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -69,17 +71,21 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return isHanging(state) ? world.getBlockState(pos.above()).is(Blocks.MANGROVE_LEAVES) : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.UP && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
@@ -88,6 +94,7 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!isHanging(state)) {
             if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper
                 this.advanceTree(world, pos, state, random);
diff --git a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
index 7fc9ce525c32d32c911c3a027baff37ce93d9bcd..9193a3a1a2a949a7fedfa76ce0184ee05be62126 100644
--- a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -36,11 +38,13 @@ public class MangroveRootsBlock extends Block implements SimpleWaterloggedBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
index 51103a88432275b2e5d4351430fea022dbca34de..4d3370233efc781045df9c4e1384382f09b93ebf 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
@@ -10,6 +10,8 @@ import java.util.Objects;
 import java.util.Set;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -114,12 +116,14 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!hasAnyFace(state)) {
             return Blocks.AIR.defaultBlockState();
         } else {
             return hasFace(state, direction) && !canAttachTo(world, direction, neighborPos, neighborState) ? removeFace(state, getFaceProperty(direction)) : state;
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -128,6 +132,7 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         boolean bl = false;
 
         for(Direction direction : DIRECTIONS) {
@@ -142,6 +147,7 @@ public abstract class MultifaceBlock extends Block {
         }
 
         return bl;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 302c5a6401facf192677b89cc0e9190bb35b1229..09571e270686b542cbd44393d578d6282d416dcd 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.Iterator;
 import java.util.Optional;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
@@ -39,6 +41,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = 5;
             boolean flag = true;
@@ -80,11 +83,13 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is(BlockTags.MUSHROOM_GROW_BLOCK) ? true : world.getRawBrightness(pos, 0) < 13 && this.mayPlaceOn(iblockdata1, world, blockposition1);
-    }
+        });
+        }
 
     public boolean growMushroom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
         Optional<? extends Holder<ConfiguredFeature<?, ?>>> optional = world.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(this.feature);
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index a6ab0d0defc05e56a91084c49897059670a1324b..2cb0712f02b1f73085bd6e01eaa3fe41150749cf 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -52,6 +53,7 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.dimensionType().natural() && world.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
             while (world.getBlockState(pos).is((Block) this)) {
                 pos = pos.below();
@@ -73,12 +75,14 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
         Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) state.getValue(NetherPortalBlock.AXIS);
         boolean flag = enumdirection_enumaxis1 != enumdirection_enumaxis && enumdirection_enumaxis.isHorizontal();
 
         return !flag && !neighborState.is((Block) this) && !(new PortalShape(world, pos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index e55720c4d2fbdf6aae526910e87a67c29cf906fd..277ff064e8c971d72323fc499fb32bb98c435572 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -42,6 +43,7 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index e46d84750bdd7c940f400efda226e12a3fdc3848..031211d686b6a9fa87555f6edea795e2bd36ea93 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -64,14 +66,17 @@ public class NoteBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return state; // Paper - prevent noteblock instrument from updating
         boolean flag = direction.getAxis() == Direction.Axis.Y;
 
         return flag ? this.setInstrument(world, pos, state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Paper - prevent noteblock powered-state from updating
         boolean flag1 = world.hasNeighborSignal(pos);
 
@@ -102,7 +107,9 @@ public class NoteBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(originalState, world, pos, player, hand, hit, () -> {
+        BlockState state = originalState;
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (itemstack.is(ItemTags.NOTE_BLOCK_TOP_INSTRUMENTS) && hit.getDirection() == Direction.UP) {
@@ -116,10 +123,12 @@ public class NoteBlock extends Block {
             player.awardStat(Stats.TUNE_NOTEBLOCK);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(BlockBehaviourUtil.isVanillaBlockAttackReplaced(state, world, pos, player)) return;
         if (!world.isClientSide) {
             this.playNote(player, state, world, pos);
             player.awardStat(Stats.PLAY_NOTEBLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index 47a3a9e0f0ba4f8a00828874e73d501d18f0ae1c..4043bad5d6ff0717a8c39c083fbce90a2066ef61 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
@@ -32,6 +33,7 @@ public class NyliumBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!NyliumBlock.canBeNylium(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.NETHERRACK.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 7b45d6b9a005036ca5051d089a7be792eb87012f..b6ba6fcd4eef4884eb047fe7ead48f8518f2a470 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -41,6 +42,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ObserverBlock.POWERED)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
@@ -63,11 +65,13 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(ObserverBlock.FACING) == direction && !(Boolean) state.getValue(ObserverBlock.POWERED)) {
             this.startSignal(world, pos);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private void startSignal(LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 1641453fd17938bc8fcdba7f89a0515ebeef20c5..655297aa4542656bd13b40d5a65729fadc6fb44d 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -62,17 +64,21 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (isDouble(state.getValue(AGE))) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
             return state.canSurvive(world, pos) ? state : Blocks.AIR.defaultBlockState();
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return isLower(state) && !sufficientLight(world, pos) ? false : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
@@ -111,6 +117,7 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper
         if (bl) {
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index cd943997f11f5ea5c600fdc6db96043fb0fa713c..b9fa71b507058b5b47f0fd707b2524c583a329e1 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -5,6 +5,8 @@ import java.util.Optional;
 import java.util.function.BiPredicate;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -90,11 +92,14 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -121,6 +126,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                 return (BlockState) state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
             }
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -167,6 +173,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (PointedDripstoneBlock.isStalagmite(state) && !this.canSurvive(state, world, pos)) {
             world.destroyBlock(pos, true);
         } else {
@@ -177,6 +184,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         PointedDripstoneBlock.maybeTransferFluid(state, world, pos, random.nextFloat());
         if (random.nextFloat() < 0.011377778F && PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
             PointedDripstoneBlock.growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
diff --git a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
index 4568d1659dda897de5f6c2059629a4718d401e63..162c013d900e3f3a6cda64d68e789c5229050a1c 100644
--- a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
@@ -23,7 +24,8 @@ public class PumpkinBlock extends StemGrownBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemStack = player.getItemInHand(hand);
         if (itemStack.is(Items.SHEARS)) {
             if (!world.isClientSide) {
@@ -56,6 +58,7 @@ public class PumpkinBlock extends StemGrownBlock {
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 06760ff3d20bcfdc30f3f3ee65bc2a0d12d28aff..89d8433c77fb1a607279b815afb1d5c178522e83 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.DustParticleOptions;
@@ -36,12 +37,14 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(BlockBehaviourUtil.isVanillaBlockAttackReplaced(state, world, pos, player)) return;
         RedStoneOreBlock.interact(state, world, pos, player); // CraftBukkit - add entityhuman
         super.attack(state, world, pos, player);
     }
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             // CraftBukkit start
             if (entity instanceof Player) {
@@ -63,7 +66,8 @@ public class RedStoneOreBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             RedStoneOreBlock.spawnParticles(world, pos);
         } else {
@@ -73,6 +77,7 @@ public class RedStoneOreBlock extends Block {
         ItemStack itemstack = player.getItemInHand(hand);
 
         return itemstack.getItem() instanceof BlockItem && (new BlockPlaceContext(player, hand, itemstack, hit)).canPlace() ? InteractionResult.PASS : InteractionResult.SUCCESS;
+        });
     }
 
     private static void interact(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) { // CraftBukkit - add Entity
@@ -95,6 +100,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 2b054439b7a763d5a3fbb5dbfe197cb9a9a3525c..1a6c30958d9a24a7b80982337a6a50cdc60eb391 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -8,6 +8,8 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -166,6 +168,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : state;
         } else if (direction == Direction.UP) {
@@ -175,6 +178,7 @@ public class RedStoneWireBlock extends Block {
 
             return blockpropertyredstoneside.isConnected() == ((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction))).isConnected() && !RedStoneWireBlock.isCross(state) ? (BlockState) state.setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside) : this.getConnectionState(world, (BlockState) ((BlockState) this.crossState.setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER))).setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside), pos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static boolean isCross(BlockState state) {
@@ -242,10 +246,12 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return this.canSurviveOn(world, blockposition1, iblockdata1);
+        });
     }
 
     private boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
@@ -526,6 +532,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             // Paper start - optimize redstone (Alternate Current)
             // Alternate Current handles breaking of redstone wires in the WireHandler.
@@ -658,7 +665,8 @@ public class RedStoneWireBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
@@ -676,6 +684,7 @@ public class RedStoneWireBlock extends Block {
 
             return InteractionResult.PASS;
         }
+        });
     }
 
     private void updatesOnShapeChange(Level world, BlockPos pos, BlockState oldState, BlockState newState) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 64136745aad7ddbfdfbb8040832a58422d24e8ae..dea130b96d54b815aeacc0d9ead912fc33113641 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -29,6 +31,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean flag1 = (Boolean) state.getValue(RedstoneLampBlock.LIT);
 
@@ -50,6 +53,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index c91535f6c0bbc870fad7e04b9d341783cfcbbd63..ba02fe8036cfb80a589e83025d27a7d42aef6609 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -1,10 +1,8 @@
 package net.minecraft.world.level.block;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.DustParticleOptions;
@@ -72,6 +70,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         boolean flag = this.hasNeighborSignal(world, pos, state);
         // Paper start
         java.util.ArrayDeque<RedstoneTorchBlock.Toggle> redstoneUpdateInfos = world.redstoneUpdateInfos;
@@ -124,6 +123,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if ((Boolean) state.getValue(RedstoneTorchBlock.LIT) == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
             world.scheduleTick(pos, (Block) this, 2);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
index e5a4525ae64454ec1400de1e4e7945b2caa675f8..48dca7e1c1f60935e8a4ad092c9826726696bbb2 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.RandomSource;
@@ -38,13 +40,17 @@ public class RedstoneWallTorchBlock extends RedstoneTorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return Blocks.WALL_TORCH.canSurvive(state, world, pos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return Blocks.WALL_TORCH.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
index 5121603ab0fe02dafd3893e3ef7c7298d41e4f81..7b9dbf682ae5130cb188e4874bf37d23e8e9f0cf 100644
--- a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.DustParticleOptions;
@@ -29,13 +30,15 @@ public class RepeaterBlock extends DiodeBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
             world.setBlock(pos, state.cycle(DELAY), 3);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     @Override
@@ -51,11 +54,14 @@ public class RepeaterBlock extends DiodeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
-            return Blocks.AIR.defaultBlockState();
-        } else {
-            return !world.isClientSide() && direction.getAxis() != state.getValue(FACING).getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
+                return Blocks.AIR.defaultBlockState();
+            } else {
+                return !world.isClientSide() && direction.getAxis() != state.getValue(FACING)
+                                                                            .getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index 2ed78cf83c0ae66a6ddba1ff307da89a24b0d0a8..6edeadf76162d9f11180690724e16b80963e7008 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -7,6 +7,8 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Vec3i;
@@ -55,7 +57,8 @@ public class RespawnAnchorBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (hand == InteractionHand.MAIN_HAND && !RespawnAnchorBlock.isRespawnFuel(itemstack) && RespawnAnchorBlock.isRespawnFuel(player.getItemInHand(InteractionHand.OFF_HAND))) {
@@ -93,6 +96,7 @@ public class RespawnAnchorBlock extends Block {
 
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     private static boolean isRespawnFuel(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 53ac4e618fec3fe384d8a106c521f3eace0b5b35..e41b7b55d791c6e8015b8a2d1b3e9f8c7bc95ab4 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -42,10 +43,10 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.advanceTree(world, pos, state, random);
         }
-
     }
 
     public void advanceTree(ServerLevel world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index e9358522e526505d5c200e19b193bbcf5ee10826..1572237cdcbf645b6141b993840855438ce6f9e1 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Iterator;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -80,6 +82,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -89,10 +92,12 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = ScaffoldingBlock.getDistance(world, pos);
         BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, pos, i));
 
@@ -110,7 +115,9 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return ScaffoldingBlock.getDistance(world, pos) < 7;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 031398e6afeec4c9db64a25fc0f55e5a5baa0990..59d5155a1c92fa4ceb3bac1a4167be8ce9ee37d4 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -35,6 +37,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, false), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 2ccbf171089ed4d166428445fdfdf1262c1dd65d..58611bceeb51ed1b78b7d3521aec8bad52df0066 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import com.google.common.annotations.VisibleForTesting;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -83,6 +85,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
             if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
                 world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
@@ -98,6 +101,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!world.isClientSide() && SculkSensorBlock.canActivate(state) && entity.getType() != EntityType.WARDEN) {
             // CraftBukkit start
             org.bukkit.event.Cancellable cancellable;
@@ -152,11 +156,13 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static void updateNeighbours(Level world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index 02d01eabb9606ae8c3b76ad9fa4bb9a525e247b1..b0292b03701e45fcb8b49d44903d1a973422c005 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -51,6 +53,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
             ServerPlayer entityplayer = SculkShriekerBlockEntity.tryGetPlayer(entity);
@@ -83,6 +86,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, false), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
@@ -120,11 +124,13 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index 6142ea7b5d46a30b1a923a54410ca9de7cceb2bb..e53245e516b1c27dc7fd7c9f5c48e7d80d56eaa7 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import java.util.Collection;
 import java.util.Iterator;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
@@ -174,11 +176,13 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
index 51c464065e506df3ad16d4118b619fed8cf1b303..1196f61253d5b48b5e9920a42f055db5bce1f3e0 100644
--- a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -61,12 +63,15 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return this.mayPlaceOn(world.getBlockState(blockPos), world, blockPos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -76,6 +81,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
index c403ac42e54b92128cc4bd8ce8dd42875271897f..e742e8eb7cd5cdddad328a44db43b588879b7fea 100644
--- a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -48,12 +50,14 @@ public class SeagrassBlock extends BushBlock implements BonemealableBlock, Liqui
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        if (!blockState.isAir()) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            if (!blockState.isAir()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return blockState;
+            return blockState;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
index d5fe3b8e2f5a8899f6afeb0600764284a617f261..8df153cc502c0a1456a96283470adef852c6fbd4 100644
--- a/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ShulkerBoxBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.Maps;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -90,7 +92,8 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else if (player.isSpectator()) {
@@ -110,6 +113,7 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
                 return InteractionResult.PASS;
             }
         }
+        });
     }
 
     private static boolean canOpen(BlockState state, Level world, BlockPos pos, ShulkerBoxBlockEntity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/SignBlock.java b/src/main/java/net/minecraft/world/level/block/SignBlock.java
index 614777d15bcf4141a89d0a0f7bd880526c668ffd..0ae36707198b7b5a9c59a05def1d464f185a5539 100644
--- a/src/main/java/net/minecraft/world/level/block/SignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SignBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.Arrays;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.CommonComponents;
@@ -52,11 +54,13 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SignBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -75,7 +79,8 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
         Item item1 = itemstack.getItem();
@@ -126,6 +131,7 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     private InteractionResult getInteractionResult(boolean usedSignChanger) {
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index 12013498de68f9176e172c568d527819026da14e..4d50bd9a0006543294b25b66931eb3a3e11356b5 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
@@ -45,6 +46,7 @@ public class SlimeBlock extends HalfTransparentBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         double d = Math.abs(entity.getDeltaMovement().y);
         if (d < 0.1D && !entity.isSteppingCarefully()) {
             double e = 0.4D + d * 0.2D;
diff --git a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
index ff1121e12e4d74a0c23dca4ee9d741e6d4d7d305..548afb3a9009b63590a4e383bf3e77b584fbf5cc 100644
--- a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -70,6 +72,7 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -77,15 +80,18 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
             BlockState blockState = world.getBlockState(blockPos);
             return this.mayPlaceOn(blockState, world, blockPos);
         }
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java b/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
index 83092896ba160a11e1e46ecd19d9d0b3bb51c46e..7466301817079958c2e9aaf656378e8fa3cf9d71 100644
--- a/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmithingTableBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.stats.Stats;
@@ -30,7 +31,8 @@ public class SmithingTableBlock extends CraftingTableBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -38,5 +40,6 @@ public class SmithingTableBlock extends CraftingTableBlock {
             player.awardStat(Stats.INTERACT_WITH_SMITHING_TABLE);
             return InteractionResult.CONSUME;
         }
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
index 16c5be04658a66ff94f2aad8782e34f450e9a729..d02900822e68cb42e7b4a1a44d1828a1b017caf8 100644
--- a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
@@ -64,6 +65,7 @@ public class SnifferEggBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isReadyToHatch(state)) {
             // Paper start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(HATCH, Integer.valueOf(this.getHatchLevel(state) + 1)), 2)) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 14e00c7feb1c051d56a3d27cd00dcef072dd771a..053e967a1bf384eaa211d64ef35f01c790fc8f34 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -79,18 +81,23 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 8);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
index f95284fcf5b9c922227670b9357523eba9b7ffcc..726bc4e2e28c8ca4c138fcee3a3c66d7d208c24a 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -21,7 +22,9 @@ public class SnowyDirtBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
index 853890258cbe12221b588ff37a3a28fdf3f55520..47458e51e92f15abec91251d0b6f569eeaeea308 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -15,12 +16,16 @@ public class SoulFireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return this.canSurvive(state, world, pos) ? this.defaultBlockState() : Blocks.AIR.defaultBlockState();
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSurviveOnBlock(world.getBlockState(pos.below()));
+        });
     }
 
     public static boolean canSurviveOnBlock(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
index 1f228adaa95e03bede7865cefe1bbb5127fe4cc9..adf8a21d3da0c58d9a51fc7aa7981b39f001cbca 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -39,16 +40,19 @@ public class SoulSandBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
-            world.scheduleTick(pos, this, 20);
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
+                world.scheduleTick(pos, this, 20);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index d810f6bf9a8a354e5b8994e51ec3672428277dde..d4609edc6c17a7cde34f22e90bb72e4499bc9d20 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 // CraftBukkit start
 import java.util.List;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundEvents;
@@ -37,6 +39,7 @@ public class SpongeBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         this.tryAbsorbWater(world, pos);
         super.neighborChanged(state, world, pos, sourceBlock, sourcePos, notify);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
index 46fffca9563f7d665df54a3d9cabed1dda67ee6e..6f1743c1e794470b35ec4fcd5b5bfffe66881239 100644
--- a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -26,13 +27,17 @@ public class SporeBlossomBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.above(), Direction.DOWN) && !world.isWaterAt(pos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index 9bbb9f8e917288bb0d11661a1399a05631ebcce0..058a3c18530642dfe0f13356c92623db8b63b722 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.MinecraftServer;
@@ -51,6 +52,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this instanceof GrassBlock && world.paperConfig().tickRates.grassSpread != 1 && (world.paperConfig().tickRates.grassSpread < 1 || (MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.grassSpread != 0)) { return; } // Paper
         // Paper start
         net.minecraft.world.level.chunk.ChunkAccess cachedBlockChunk = world.getChunkIfLoaded(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/StairBlock.java b/src/main/java/net/minecraft/world/level/block/StairBlock.java
index 827713a332baa6d280cd61d40faf8f6243b3b08c..093296d961b76c88c5ef228b6842eeb7a4afa965 100644
--- a/src/main/java/net/minecraft/world/level/block/StairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StairBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.stream.IntStream;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -109,6 +111,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(BlockBehaviourUtil.isVanillaBlockAttackReplaced(state, world, pos, player)) return;
         this.baseState.attack(world, pos, player);
     }
 
@@ -139,6 +142,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         this.base.stepOn(world, pos, state, entity);
     }
 
@@ -149,17 +153,21 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.randomTick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.tick(state, world, pos, random);
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         return this.baseState.use(world, player, hand, hit);
+        });
     }
 
     @Override
@@ -178,12 +186,14 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getAxis().isHorizontal() ? state.setValue(SHAPE, getStairsShape(state, world, pos)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static StairsShape getStairsShape(BlockState state, BlockGetter world, BlockPos pos) {
         Direction direction = state.getValue(FACING);
diff --git a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
index 51dc1a0e572c7a1bdef99d7cf69ebe699702cc49..85a0f825da5de2869700da158c4baf4395346f5a 100644
--- a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -25,7 +26,9 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
@@ -36,8 +39,10 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 0d9be3b28ba4957c3f4da5455283fca903836c91..697f9cd2da748be34c51eaf6baf77cf9334720f9 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.function.Supplier;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -50,6 +52,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
index 0a95842c53a9d0286c57bcb42db97e468e30fb7d..7f64624a8b7dcdd31cd85d3554e257cb68b69299 100644
--- a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.Component;
@@ -40,7 +42,8 @@ public class StonecutterBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -48,6 +51,7 @@ public class StonecutterBlock extends Block {
             player.awardStat(Stats.INTERACT_WITH_STONECUTTER);
             return InteractionResult.CONSUME;
         }
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/StructureBlock.java b/src/main/java/net/minecraft/world/level/block/StructureBlock.java
index a3dac53b07618819b322b48339d850d80a1c55ba..f4e6a4e7679cc8cd446510785bf4ad794ff7770e 100644
--- a/src/main/java/net/minecraft/world/level/block/StructureBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StructureBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.InteractionHand;
@@ -33,13 +35,15 @@ public class StructureBlock extends BaseEntityBlock implements GameMasterBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof StructureBlockEntity) {
             return ((StructureBlockEntity)blockEntity).usedBy(player) ? InteractionResult.sidedSuccess(world.isClientSide) : InteractionResult.PASS;
         } else {
             return InteractionResult.PASS;
         }
+        });
     }
 
     @Override
@@ -67,6 +71,7 @@ public class StructureBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world instanceof ServerLevel) {
             BlockEntity blockEntity = world.getBlockEntity(pos);
             if (blockEntity instanceof StructureBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c3f500580d257e1397f2eb7c47b063a6fe6bb405..b90759437c4aef433f1b09304207cde892ab6e3d 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import java.util.Iterator;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -37,6 +39,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +48,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.isEmptyBlock(pos.above())) {
             int i;
 
@@ -69,37 +73,41 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState iblockdata1 = world.getBlockState(pos.below());
-
-        if (iblockdata1.is((Block) this)) {
-            return true;
-        } else {
-            if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
-                BlockPos blockposition1 = pos.below();
-                Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    Direction enumdirection = (Direction) iterator.next();
-                    BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
-                    FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
-
-                    if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
-                        return true;
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState iblockdata1 = world.getBlockState(pos.below());
+
+            if (iblockdata1.is((Block) this)) {
+                return true;
+            } else {
+                if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
+                    BlockPos blockposition1 = pos.below();
+                    Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
+
+                    while (iterator.hasNext()) {
+                        Direction enumdirection = (Direction) iterator.next();
+                        BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
+                        FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
+
+                        if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
+                            return true;
+                        }
                     }
                 }
-            }
 
-            return false;
-        }
+                return false;
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 34eb7ba1adb51e394bf46a6f643db3529626d9ec..68724954e723778fed339f0cf27f41b900d1798f 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
@@ -64,6 +65,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
@@ -95,7 +97,8 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
         boolean flag = i == 3;
 
@@ -122,6 +125,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         } else {
             return super.use(state, world, pos, player, hand, hit);
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
index ecc58329ca169a8f3ae813ddcbc58a2e28fd837c..5707d674b4b1314354c4d8994197a19743342f8b 100644
--- a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.FluidTags;
@@ -60,6 +62,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             BlockState blockState = world.getBlockState(pos.below());
             return blockState.is(this) && blockState.getValue(HALF) == DoubleBlockHalf.LOWER;
@@ -67,6 +70,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
             FluidState fluidState = world.getFluidState(pos);
             return super.canSurvive(state, world, pos) && fluidState.is(FluidTags.WATER) && fluidState.getAmount() == 8;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 69eaf1341d282c4783dab84533ea2c053deed529..2cf94b49f8daea01bf91fdf6fb52bed0009420f6 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -96,6 +97,7 @@ public class TargetBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (state.getValue(OUTPUT_POWER) != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index d73589ac6076f82f516c368acb17d280fb3c47e5..4b2a6cbf541d5a57880afe2b50d6c1b18082ee39 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -57,6 +59,7 @@ public class TntBlock extends Block {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (world.hasNeighborSignal(pos) && CraftEventFactory.callTNTPrimeEvent(world, pos, PrimeCause.REDSTONE, null, sourcePos)) { // CraftBukkit - TNTPrimeEvent
             // Paper start - TNTPrimeEvent
             org.bukkit.block.Block tntBlock = io.papermc.paper.util.MCUtil.toBukkitBlock(world, pos);
@@ -112,7 +115,8 @@ public class TntBlock extends Block {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (!itemstack.is(Items.FLINT_AND_STEEL) && !itemstack.is(Items.FIRE_CHARGE)) {
@@ -146,6 +150,7 @@ public class TntBlock extends Block {
             player.awardStat(Stats.ITEM_USED.get(item));
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchBlock.java b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
index 6f85a193e7661cfa61ad169aae1477bc07c9a9ff..22288f2c4d54adc1b9eff450781606f4cdedab39 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleOptions;
@@ -31,12 +32,16 @@ public class TorchBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 092759184adbf27ce942a148169e60d3a28c2cc7..3951c45ab6c2b7782a0247678ff3a94421988c53 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -58,6 +59,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index b9e3c9cd709d42bced85436720ccc7b9c7e49552..5c76d01c782bcfe4adbcc94b6bd1916c492fd72c 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundSource;
@@ -85,7 +87,9 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState originalState, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(originalState, world, pos, player, hand, hit, () -> {
+        BlockState state = originalState;
         if (!this.type.canOpenByHand()) {
             return InteractionResult.PASS;
         } else {
@@ -98,6 +102,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
             this.playSound(player, world, pos, (Boolean) state.getValue(TrapDoorBlock.OPEN));
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
+        });
     }
 
     protected void playSound(@Nullable Player player, Level world, BlockPos pos, boolean open) {
@@ -107,6 +112,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
 
@@ -188,10 +194,12 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index cb2ff8d94308c637a498d2737f86f6af4c9c1b83..076533de903f13f4b98bbb8cd9f1186b00acae18 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -62,9 +64,11 @@ public class TripWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
         return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -144,6 +148,7 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
         if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
             this.checkPressed(world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 004dce26ff073f1de52a84cd425c4f60fdab5e50..40e31bb96b737d1cdb504132b90b31cc238c38a4 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import com.google.common.base.MoreObjects;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -64,17 +66,21 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return enumdirection.getAxis().isHorizontal() && iblockdata1.isFaceSturdy(world, blockposition1, enumdirection);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(TripWireHookBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -207,6 +213,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 07157822659288e76b2fba34db8d5d566506f33b..f3566bee9f16d8a9cc5c19923861d995a436f984 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
@@ -51,6 +53,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(BlockBehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             this.destroyEgg(world, state, pos, entity, 100);
         }
@@ -105,6 +108,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
             int i = (Integer) state.getValue(TurtleEggBlock.HATCH);
 
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 698ef6ee1c8d08bb38e2775804c1333222b0d73d..09b622c8f36dd16e137ed969128be2a9b1ffca69 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -6,6 +6,8 @@ import java.util.Map;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -87,7 +89,9 @@ public class VineBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return this.hasFaces(this.getUpdatedState(state, world, pos));
+        });
     }
 
     private boolean hasFaces(BlockState state) {
@@ -166,6 +170,7 @@ public class VineBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
@@ -173,10 +178,12 @@ public class VineBlock extends Block {
 
             return !this.hasFaces(iblockdata2) ? Blocks.AIR.defaultBlockState() : iblockdata2;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
             if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
                 Direction enumdirection = Direction.getRandom(random);
diff --git a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
index e6719fc04011b9d9378eef128701a289b4507a1f..d396a6a43374fa295ee09cd7e577cfa12c3b744d 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
@@ -3,6 +3,8 @@ package net.minecraft.world.level.block;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.DyeColor;
@@ -33,13 +35,17 @@ public class WallBannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(FACING).getOpposite() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallBlock.java b/src/main/java/net/minecraft/world/level/block/WallBlock.java
index d1d0fa66aa0c3e481b6d68fe36147040a730293f..7275c31438c4ec76ca9d63b4f2a2efdd0606c4f8 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBlock.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -149,15 +151,17 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        if (direction == Direction.DOWN) {
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        } else {
-            return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
-        }
+            if (direction == Direction.DOWN) {
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            } else {
+                return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
+            }
+        });
     }
 
     private static boolean isConnected(BlockState state, Property<WallSide> property) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
index ae232311f12c72ff62d3d18f25e3ebf46ce1ace2..5d643c64f57877c1ac908a8de46e097e21f6a7a4 100644
--- a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
@@ -49,7 +51,8 @@ public class WallHangingSignBlock extends SignBlock {
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> {
         BlockEntity itemStack = world.getBlockEntity(pos);
         if (itemStack instanceof SignBlockEntity signBlockEntity) {
             // Paper start - decompile fixes
@@ -61,6 +64,7 @@ public class WallHangingSignBlock extends SignBlock {
         }
 
         return super.use(state, world, pos, player, hand, hit);
+        });
     }
 
     private boolean shouldTryToChainAnotherHangingSign(BlockState state, Player player, BlockHitResult hitResult, SignBlockEntity sign, ItemStack stack) {
@@ -131,8 +135,10 @@ public class WallHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getAxis() == state.getValue(FACING).getClockWise().getAxis() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
index 0065941d41830309a27eed7643b213b0215d395e..79fdb7f047b1cd48cce71d87a955a164cba3aa8c 100644
--- a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -45,7 +47,9 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Nullable
@@ -72,8 +76,10 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
index 5f8d2d9e0763c50ec1ca3e06a71f7ecf35d4c46a..7b450eaffcaf597358c2c496a5f059db6ad1ef98 100644
--- a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
@@ -4,6 +4,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleOptions;
@@ -47,10 +49,12 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> { // MCClab start - Add Block behaviour
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
@@ -76,8 +80,10 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
index 05cccc33e7745eb3a905a804b318aaa6bd440d04..c022f306279e7ed8aa6046cdde7cfb20694ead01 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -16,6 +17,7 @@ public class WeatheringCopperFullBlock extends Block implements WeatheringCopper
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
index 37d7fb85a05521e4acb6a79997b661c1895bb7ed..416f2a0814f8062c1e9f04a3ab29f73ea317258a 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -16,6 +17,7 @@ public class WeatheringCopperSlabBlock extends SlabBlock implements WeatheringCo
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
index 728a607bb28f10955397744970554efe297ea5ca..8a5ab3fb41140e2e00db5887ceb8c299b21be4dc 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
@@ -16,6 +17,7 @@ public class WeatheringCopperStairBlock extends StairBlock implements Weathering
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index a3c46f29d95d71913406217cda8666cdb4bca90e..a1375ddd7f918b9230624dbefab1320774527238 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -363,9 +363,9 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
                         itemstack.shrink(1);
                         if (itemstack.isEmpty()) {
-                            Item item1 = item.getCraftingRemainingItem();
+                            ItemStack item1 = itemstack.getCraftingRemainingItem();
 
-                            blockEntity.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                            blockEntity.items.set(1, item1 == null ? ItemStack.EMPTY : item1);
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index c57efcb9a79337ec791e4e8f6671612f0a82b441..dac6df6708ebcf897443890716d847a90fee9a37 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -280,8 +280,8 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         }
 
         itemstack.shrink(1);
-        if (itemstack.getItem().hasCraftingRemainingItem()) {
-            ItemStack itemstack1 = new ItemStack(itemstack.getItem().getCraftingRemainingItem());
+        if (itemstack.hasCraftingRemainingItem()) {
+            ItemStack itemstack1 = itemstack.getCraftingRemainingItem();
 
             if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 5acf0e1fba2967e67bdb208ef73ae8fa84ffe35d..f469588501207607c1700b26c901faa136700fea 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -6,6 +6,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -38,7 +40,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 // CraftBukkit start
-import com.google.common.collect.ImmutableList;
 import java.util.AbstractList;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
@@ -99,6 +100,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (!world.isClientSide) {
             this.checkIfExtend(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index 6091e3c3adbcc92c9ca438c301a99f646e3cb549..4da7105feb26ab4686a4151b7d2e79f5ce2c4bb4 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block.piston;
 
 import java.util.Arrays;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.entity.player.Player;
@@ -126,17 +128,22 @@ public class PistonHeadBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
-        return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
-    }
+        return BlockBehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
+            return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
+        });
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         if (state.canSurvive(world, pos)) {
             world.neighborChanged(pos.relative(state.getValue(FACING).getOpposite()), sourceBlock, sourcePos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e6a4a5898ffdcb2aa2bc01371a6d7dbc06d610ce..06cf9dab14693aa180562c68ca0acf4596939ecd 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -13,6 +13,8 @@ import java.util.function.Predicate;
 import java.util.function.ToIntFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BlockBehaviourUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -129,7 +131,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return state;
+        return BlockBehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, state); // MCCLab start - Add BlockBehaviour
     }
 
     /** @deprecated */
@@ -141,6 +143,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
+        if(BlockBehaviourUtil.isVanillaNeighbourBlockUpdateReplaced(state, world, pos, sourceBlock, sourcePos, notify)) return;
         DebugPackets.sendNeighborsUpdatePacket(world, pos);
     }
 
@@ -163,13 +166,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
-
+        BlockBehaviourUtil.onRemoveCallback(state, world, pos, state, moved); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
     @Deprecated
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        return InteractionResult.PASS;
+        return BlockBehaviourUtil.use(state, world, pos, player, hand, hit, () -> InteractionResult.PASS); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -301,7 +304,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return true;
+        return BlockBehaviourUtil.canSurvive(state, world, pos, true); // MCClab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -349,12 +352,15 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     /** @deprecated */
     @Deprecated
-    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
+    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(BlockBehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
+    }
 
     /** @deprecated */
     @Deprecated
@@ -376,7 +382,8 @@ public abstract class BlockBehaviour implements FeatureElement {
 
     /** @deprecated */
     @Deprecated
-    public void attack(BlockState state, Level world, BlockPos pos, Player player) {}
+    public void attack(BlockState state, Level world, BlockPos pos, Player player) {
+        if(BlockBehaviourUtil.isVanillaBlockAttackReplaced(state, world, pos, player)) return;}
 
     /** @deprecated */
     @Deprecated
@@ -916,7 +923,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void initCache() {
             this.fluidState = ((Block) this.owner).getFluidState(this.asState());
-            this.isRandomlyTicking = ((Block) this.owner).isRandomlyTicking(this.asState());
+            this.isRandomlyTicking = BlockBehaviourUtil.isRandomlyTicking(this.asState(), ((Block) this.owner).isRandomlyTicking(this.asState()));
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
@@ -1195,6 +1202,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void onPlace(Level world, BlockPos pos, BlockState state, boolean notify) {
             this.getBlock().onPlace(this.asState(), world, pos, state, notify);
+            BlockBehaviourUtil.onPlaceCallback(this.asState(), world, pos, state, notify); // MCCLab - Add Block behaviour
         }
 
         public void onRemove(Level world, BlockPos pos, BlockState state, boolean moved) {
@@ -1296,6 +1304,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         @Nullable
         public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockEntityType<T> blockEntityType) {
+            //TODO: Enable / disable block entity ticking in BlockBehaviour
             return this.getBlock() instanceof EntityBlock ? ((EntityBlock) this.getBlock()).getTicker(world, this.asState(), blockEntityType) : null;
         }
 
@@ -1311,6 +1320,14 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // MCCLab start - Add BlockBehaviour
+        public final boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState){
+            if(world == null || x == -1 || z == -1 || blockState == null)
+                return this.isRandomlyTicking();
+            return BlockBehaviourUtil.isRandomlyTicking(world, x, y,z,blockState, this.isRandomlyTicking());
+        }
+        // MCCLab end - Add BlockBehaviour
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index f0de72afad4bb571153436399386a6a8a70582a6..f5bc52019b0e4748cc97c3098dcb559860a42d73 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -28,6 +28,11 @@ public class LevelChunkSection {
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
     // Paper start - optimise collisions
     private int specialCollidingBlocks;
+    // MCCLab start - Add BlockBehaviour
+    private net.minecraft.world.level.Level level;
+    private net.minecraft.world.level.ChunkPos chunkPos;
+    private int chunkSectionY;
+    // MCCLab end - Add BlockBehaviour
 
     private void updateBlockCallback(final int x, final int y, final int z, final BlockState oldState, final BlockState newState) {
         if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(newState)) {
@@ -53,6 +58,11 @@ public class LevelChunkSection {
     // Paper start - Anti-Xray - Add parameters
     @Deprecated @io.papermc.paper.annotation.DoNotUse public LevelChunkSection(Registry<Biome> biomeRegistry) { this(biomeRegistry, null, null, 0); }
     public LevelChunkSection(Registry<Biome> biomeRegistry, net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, int chunkSectionY) {
+        // MCCLab start - Add BlockBehaviour
+        this.level = level;
+        this.chunkPos = chunkPos;
+        this.chunkSectionY = chunkSectionY;
+        // MCCLab end - Add BlockBehaviour
         // Paper end
         this.states = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, level == null || level.chunkPacketBlockController == null ? null : level.chunkPacketBlockController.getPresetBlockStates(level, chunkPos, chunkSectionY)); // Paper - Anti-Xray - Add preset block states
         this.biomes = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null); // Paper - Anti-Xray - Add preset biomes
@@ -87,12 +97,18 @@ public class LevelChunkSection {
             iblockdata1 = (BlockState) this.states.getAndSetUnchecked(x, y, z, state);
         }
 
+        // MCCLab start - Add BlockBehaviour
+        int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+        int globalY = chunkSectionY << 4 + y;
+        int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+        // MCCLab end - Add BlockBehaviour
+
         FluidState fluid = iblockdata1.getFluidState();
         FluidState fluid1 = state.getFluidState();
 
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
-            if (iblockdata1.isRandomlyTicking()) {
+            if (iblockdata1.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
@@ -106,7 +122,7 @@ public class LevelChunkSection {
 
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
-            if (state.isRandomlyTicking()) {
+            if (state.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
@@ -148,9 +164,20 @@ public class LevelChunkSection {
         this.states.forEachLocation((BlockState iblockdata, int i) -> {
             FluidState fluid = iblockdata.getFluidState();
 
+            // MCCLab start - Add BlockBehaviour
+            int sizedBitsOfBlockStatePalette = 4;
+            int x = i & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int z = (i >> sizedBitsOfBlockStatePalette) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int y = (i >> (sizedBitsOfBlockStatePalette * 2)) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+
+            int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+            int globalY = chunkSectionY << 4 + y;
+            int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+            // MCCLab end - Add BlockBehaviour
+
             if (!iblockdata.isAir()) {
                 this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
-                if (iblockdata.isRandomlyTicking()) {
+                if (iblockdata.isRandomlyTicking(level, globalX, globalY, globalZ, iblockdata)) { // MCCLab start - Add BlockBehaviour
                     this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                     this.tickingList.add(i, iblockdata);
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java b/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f204e8b4890d74f800ce4dfc10af5a22d073ec9
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java
@@ -0,0 +1,58 @@
+package org.bukkit.craftbukkit;
+
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.world.effect.MobEffectInstance;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.inventory.FoodProperties;
+import org.bukkit.potion.PotionEffect;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class CraftFoodProperties implements FoodProperties {
+    public static net.minecraft.world.food.FoodProperties toNMS(FoodProperties foodProperties){
+        return ((CraftFoodProperties) foodProperties).handle;
+    }
+
+    public static FoodProperties toBukkit(net.minecraft.world.food.FoodProperties foodProperties){
+        return new CraftFoodProperties(foodProperties);
+    }
+
+    private final net.minecraft.world.food.FoodProperties handle;
+    public CraftFoodProperties(net.minecraft.world.food.FoodProperties handle){
+        this.handle = handle;
+    }
+    @Override
+    public int getNutrition() {
+        return handle.getNutrition();
+    }
+
+    @Override
+    public float getSaturationModifier() {
+        return handle.getSaturationModifier();
+    }
+
+    @Override
+    public boolean isMeat() {
+        return handle.isMeat();
+    }
+
+    @Override
+    public boolean canAlwaysEat() {
+        return handle.canAlwaysEat();
+    }
+
+    @Override
+    public boolean isFastFood() {
+        return handle.isFastFood();
+    }
+
+    @Override
+    public List<Pair<PotionEffect, Float>> getEffects() {
+        return handle.getEffects().stream().map(potionEffectFloatPair -> {
+            MobEffectInstance mobEffectInstance = potionEffectFloatPair.getFirst();
+            float value = potionEffectFloatPair.getSecond();
+            return Pair.of(CraftPotionUtil.toBukkit(mobEffectInstance), value);
+        }).collect(Collectors.toList());
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fbbced3e47263c2cb24cb26681ea3098ec0bb4cc..944dd0806fc9c18e72ad73f764b893b8690ee84a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1099,6 +1099,7 @@ public final class CraftServer implements Server {
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache();
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
@@ -1612,8 +1613,8 @@ public final class CraftServer implements Server {
 
         // Set the resulting matrix items
         for (int i = 0; i < craftingMatrix.length; i++) {
-            Item remaining = inventoryCrafting.getContents().get(i).getItem().getCraftingRemainingItem();
-            craftingMatrix[i] = (remaining != null) ? CraftItemStack.asBukkitCopy(remaining.getDefaultInstance()) : null;
+            net.minecraft.world.item.ItemStack remaining = inventoryCrafting.getContents().get(i).getCraftingRemainingItem();
+            craftingMatrix[i] = (remaining != null) ? CraftItemStack.asBukkitCopy(remaining) : null;
         }
 
         return CraftItemStack.asBukkitCopy(result);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e188bb3ba5d2ec28421947c0b66b25eecb569bfe..409b0b2275878f16152a6992ea054029ab1e80c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -35,6 +35,7 @@ import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
+import net.minecraft.core.NonNullList;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
@@ -45,35 +46,7 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
 import net.minecraft.network.protocol.common.ClientboundResourcePackPacket;
 import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
-import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundClearTitlesPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
-import net.minecraft.network.protocol.game.ClientboundMapItemDataPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundTabListPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.level.ChunkMap;
@@ -165,6 +138,7 @@ import org.bukkit.event.player.PlayerUnregisterChannelEvent;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView.Property;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.PlayerInventory;
 import org.bukkit.map.MapCursor;
 import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
@@ -865,6 +839,32 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.getHandle().connection.send(packet);
     }
 
+    //MCCLab start - Add inventory sync flag
+    @Override
+    public void doInventorySynchronization(boolean value) {
+        getHandle().pauseInventorySynchronization = !value;
+    }
+
+    @Override
+    public void sendFakeInventoryContents(ItemStack[] contents) {
+        NonNullList<net.minecraft.world.item.ItemStack> stacks = NonNullList.create();
+        for (int i = 0; i < contents.length; i++) {
+            ItemStack bukkitStack = contents[i];
+            if(bukkitStack != null)
+                stacks.add(i, CraftItemStack.asNMSCopy(bukkitStack));
+            else
+                stacks.add(i, net.minecraft.world.item.ItemStack.EMPTY);
+        }
+
+        this.getHandle().connection.send(new ClientboundContainerSetContentPacket(this.getHandle().containerMenu.containerId, this.getHandle().containerMenu.getStateId(), stacks, this.getHandle().containerMenu.getCarried().copy()));
+    }
+
+    @Override
+    public boolean isInventorySynchronization() {
+        return !getHandle().pauseInventorySynchronization;
+    }
+    //MCCLab end - Add inventory sync flag
+
     @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
@@ -1432,6 +1432,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Deprecated
     @Override
     public void updateInventory() {
+        doInventorySynchronization(true);
         this.getHandle().containerMenu.sendAllDataToRemote();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 15d0f3c3b8892bcd423ccff282fd459b0673af0d..0448b9f634158a89d27fb26758fa89a28a2da2b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -202,7 +202,7 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public int getMaxStackSize() {
-        return (this.handle == null) ? Material.AIR.getMaxStackSize() : this.handle.getItem().getMaxStackSize();
+        return (this.handle == null) ? Material.AIR.getMaxStackSize() : this.handle.getMaxStackSize();
     }
 
     // Paper start
