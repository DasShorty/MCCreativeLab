From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Fri, 26 Jan 2024 15:22:21 +0100
Subject: [PATCH] Finalizing ItemBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
index c742de2c5b81ad1d4d36bb2d494151856a1a3fec..35041bf0d870cf6f1e0cd1281da28e2038be67ba 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
@@ -1,22 +1,30 @@
 package de.verdox.mccreativelab.behaviour;
 
-import de.verdox.mccreativelab.MultiCustomBehaviour;
 import de.verdox.mccreativelab.recipe.CustomItemData;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.util.RayTraceResult;
+import org.bukkit.util.Vector;
 
 import javax.annotation.Nullable;
 
@@ -28,67 +36,92 @@ public class ItemBehaviourUtil extends BehaviourUtil {
             Converter.ItemStack.INSTANCE
         );
     }
+    public static InteractionResultHolder<ItemStack> use(ItemStack stack, Level world, Player user, InteractionHand hand){
+        return evaluate(getBehaviour(stack), itemBehaviour ->
+                itemBehaviour.use(stack.asBukkitMirror(), ((org.bukkit.entity.Player) user.getBukkitEntity()), hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND),
+            () -> stack.getItem().use(world, user, hand)
+            , Converter.ItemStackInteraction.INSTANCE
+        );
+    }
 
-    public static int getMaxStackSize(ItemStack stack){
+    public static InteractionResult useOn(ItemStack stack, UseOnContext context) {
+        BlockFace blockFace = toBukkitBlockFace(context.getClickedFace());
+        Vector vector = new Vector(context.getClickedPos().getX(), context.getClickedPos().getY(), context
+            .getClickedPos().getZ());
+        Block block = context.getLevel().getWorld().getBlockAt(new Location(context.getLevel()
+                                                                                   .getWorld(), vector.getX(), vector.getY(), vector.getZ()));
+        RayTraceResult rayTraceResult = new RayTraceResult(new Vector(context.getClickedPos().getX(), context
+            .getClickedPos().getY(), context.getClickedPos().getZ()), block, blockFace);
+
+        return evaluate(getBehaviour(stack), itemBehaviour -> itemBehaviour.useOn(stack.asBukkitMirror(), ((org.bukkit.entity.Player) context.getPlayer().getBukkitEntity()), context
+                .getHand()
+                .equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND, rayTraceResult),
+            () -> stack.getItem().useOn(context)
+            , Converter.InteractionResult.INSTANCE
+        );
+    }
+
+    public static int getMaxStackSize(ItemStack stack) {
         return evaluateInteger(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.getMaxStackSize(stack.asBukkitMirror()),
             () -> stack.getItem().getMaxStackSize()
         );
     }
 
-    public static int getMaxDamage(ItemStack stack){
+    public static int getMaxDamage(ItemStack stack) {
         return evaluateInteger(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.getMaxDamage(stack.asBukkitMirror()),
             () -> stack.getItem().getMaxDamage()
         );
     }
 
-    public static boolean isCorrectToolForDrops(ItemStack stack, BlockState blockState){
+    public static boolean isCorrectToolForDrops(ItemStack stack, BlockState blockState) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.isCorrectToolForDrops(stack.asBukkitMirror(), blockState.createCraftBlockData()),
             () -> stack.getItem().isCorrectToolForDrops(blockState)
         );
     }
 
-    public static void mineBlock(ItemStack stack, Level world, net.minecraft.world.level.block.state.BlockState state, BlockPos pos, Player miner){
+    public static void mineBlock(ItemStack stack, Level world, net.minecraft.world.level.block.state.BlockState state, BlockPos pos, Player miner) {
         boolean mined = evaluateBoolean(getBehaviour(stack),
-            itemBehaviour -> itemBehaviour.mineBlock(stack.asBukkitMirror(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (CraftPlayer) miner.getBukkitEntity()),
+            itemBehaviour -> itemBehaviour.mineBlock(stack.asBukkitMirror(), world.getWorld()
+                                                                                  .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (CraftPlayer) miner.getBukkitEntity()),
             () -> {
                 Item item = stack.getItem();
                 return item.mineBlock(stack, world, state, pos, miner);
             });
-        if(mined)
+        if (mined)
             miner.awardStat(Stats.ITEM_USED.get(stack.getItem()));
     }
 
-    public static InteractionResult interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, InteractionHand interactionHand){
+    public static InteractionResult interactLivingEntity(ItemStack stack, Player player, LivingEntity livingEntity, InteractionHand interactionHand) {
         return evaluate(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.interactLivingEntity(stack.asBukkitMirror(), (CraftPlayer) player.getBukkitEntity(), livingEntity.getBukkitLivingEntity(),
-            interactionHand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND),
+                interactionHand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND),
             () -> stack.getItem().interactLivingEntity(stack, player, livingEntity, interactionHand)
             , Converter.InteractionResult.INSTANCE);
     }
 
-    public static void onCraftedBy(ItemStack stack, Level world, Player player, int amount){
+    public static void onCraftedBy(ItemStack stack, Level world, Player player, int amount) {
         evaluateVoid(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.onCraftedBy(stack.asBukkitMirror(), (CraftPlayer) player.getBukkitEntity(), amount),
             () -> stack.getItem().onCraftedBy(stack, world, player));
         player.awardStat(Stats.ITEM_CRAFTED.get(stack.getItem()), amount);
     }
 
-    public static void onDestroyed(ItemStack stack, ItemEntity entity){
+    public static void onDestroyed(ItemStack stack, ItemEntity entity) {
         evaluateVoid(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.onDestroyed(stack.asBukkitMirror(), (CraftItem) entity.getBukkitEntity()),
             () -> stack.getItem().onDestroyed(entity));
     }
 
-    public static boolean isEdible(ItemStack stack){
+    public static boolean isEdible(ItemStack stack) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.isEdible(stack.asBukkitMirror()),
             () -> stack.getItem().isEdible());
     }
 
-    public static FoodProperties getFoodProperties(ItemStack stack){
+    public static FoodProperties getFoodProperties(ItemStack stack) {
         return evaluate(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.getFoodProperties(stack.asBukkitMirror()),
             () -> stack.getItem().getFoodProperties(),
@@ -96,32 +129,32 @@ public class ItemBehaviourUtil extends BehaviourUtil {
         );
     }
 
-    public static @Nullable ItemStack getCraftRemainingItem(ItemStack stack){
+    public static @Nullable ItemStack getCraftRemainingItem(ItemStack stack) {
         return evaluate(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.getCraftRemainingItem(stack.asBukkitMirror()),
             () -> {
-            Item item = stack.getItem().getCraftingRemainingItem();
-            if(item != null)
-                return new ItemStack(item);
-            else return null;
+                Item item = stack.getItem().getCraftingRemainingItem();
+                if (item != null)
+                    return new ItemStack(item);
+                else return null;
             },
             Converter.ItemStack.INSTANCE
         );
     }
 
-    public static boolean isFireResistant(ItemStack stack){
+    public static boolean isFireResistant(ItemStack stack) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.isFireResistant(stack.asBukkitMirror()),
             () -> stack.getItem().isFireResistant());
     }
 
-    public static boolean canFitInsideContainerItems(ItemStack stack){
+    public static boolean canFitInsideContainerItems(ItemStack stack) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.canFitInsideContainerItems(stack.asBukkitMirror()),
             () -> stack.getItem().canFitInsideContainerItems());
     }
 
-    public static boolean isEnchantable(ItemStack stack){
+    public static boolean isEnchantable(ItemStack stack) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.isEnchantable(stack.asBukkitMirror()),
             () -> stack.getItem().isEnchantable(stack));
@@ -131,13 +164,37 @@ public class ItemBehaviourUtil extends BehaviourUtil {
         return CustomItemData.fromItemStack(stack.getBukkitStack());
     }
 
-    public static ItemBehaviour getBehaviour(ItemStack stack){
-        if(stack.itemBehaviour != null)
+    public static void onNbtLoad(ItemStack stack) {
+        evaluateCallback(getBehaviour(stack),
+            itemBehaviour -> itemBehaviour.onNbtLoad(stack.asBukkitMirror()),
+            () -> {
+            });
+    }
+
+    public static void onNbtSave(ItemStack stack) {
+        evaluateCallback(getBehaviour(stack),
+            itemBehaviour -> itemBehaviour.onNbtSave(stack.asBukkitMirror()),
+            () -> {
+            });
+    }
+
+    public static ItemBehaviour getBehaviour(ItemStack stack) {
+        if (stack.itemBehaviour != null)
             return stack.itemBehaviour;
         CustomItemData customItemData = CustomItemData.fromItemStack(stack.getBukkitStack());
-        if(ItemBehaviour.ITEM_BEHAVIOUR.isImplemented(customItemData))
+        if (ItemBehaviour.ITEM_BEHAVIOUR.isImplemented(customItemData))
             return ItemBehaviour.ITEM_BEHAVIOUR.getBehaviour(customItemData);
         return null;
     }
 
+    private static BlockFace toBukkitBlockFace(Direction direction) {
+        return switch (direction) {
+            case DOWN -> BlockFace.DOWN;
+            case UP -> BlockFace.UP;
+            case NORTH -> BlockFace.NORTH;
+            case SOUTH -> BlockFace.SOUTH;
+            case WEST -> BlockFace.WEST;
+            case EAST -> BlockFace.EAST;
+        };
+    }
 }
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index f0cac29777ee859257154bf76729bf5e7c3ffb9c..e4b02b793e39e01ab41a408ce44fc8512e5ab3be 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -657,6 +657,8 @@ public class FriendlyByteBuf extends ByteBuf {
                     nbttagcompound = nbttagcompound.copy();
                     float actualDamagePercentage = stack.getDamageValue() * 1f / stack.getMaxDamage();
                     int vanillaDamage = Math.round(stack.getItem().getMaxDamage() * actualDamagePercentage);
+                    vanillaDamage = Math.max(0, vanillaDamage);
+                    vanillaDamage = Math.min(vanillaDamage, stack.getItem().getMaxDamage());
                     nbttagcompound.putInt(ItemStack.TAG_DAMAGE, vanillaDamage);
                 }
                 // MCCLab end - Send the calculated damage value
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 77c475c145ceb9ed028edb78426c3112e7b25c61..6ac8ac12bb1f703639155d39adc9fd9ce3aefdc2 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -291,7 +291,7 @@ public final class ItemStack {
         if (this.getItem().canBeDepleted()) {
             this.setDamageValue(this.getDamageValue());
         }
-
+        de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.onNbtLoad(this);
     }
 
     private ItemStack(CompoundTag nbt) {
@@ -391,8 +391,7 @@ public final class ItemStack {
             }
             InteractionResult enuminteractionresult;
             try {
-                //TODO: ItemStack Behaviour alternative useon behaviour
-                enuminteractionresult = item.useOn(context);
+                enuminteractionresult = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.useOn(this, context);
             } finally {
                 world.captureBlockStates = false;
             }
@@ -576,8 +575,7 @@ public final class ItemStack {
     }
 
     public InteractionResultHolder<ItemStack> use(Level world, net.minecraft.world.entity.player.Player user, InteractionHand hand) {
-        //TODO: ItemStack Behaviour
-        return this.getItem().use(world, user, hand);
+        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.use(this, world, user, hand);
     }
 
     public ItemStack finishUsingItem(Level world, LivingEntity user) {
@@ -589,6 +587,7 @@ public final class ItemStack {
 
         nbt.putString("id", minecraftkey == null ? "minecraft:air" : minecraftkey.toString());
         nbt.putByte("Count", (byte) this.count);
+        de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.onNbtSave(this);
         if (this.tag != null) {
             nbt.put("tag", this.tag.copy());
         }
