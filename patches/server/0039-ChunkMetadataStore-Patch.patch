From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 1 May 2024 15:16:45 +0000
Subject: [PATCH] ChunkMetadataStore Patch


diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/ChunkMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/ChunkMetadataStore.java
index 5308a686ff6f9a23c9f4faf627a50335e99f59b6..36067e6d20633f68ad68f6941c23d863e6ac9f1e 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/ChunkMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/ChunkMetadataStore.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.metadata;
 
 import com.google.common.base.Preconditions;
+import de.verdox.mccreativelab.worldgen.WorldGenChunk;
 import org.bukkit.Chunk;
 import org.bukkit.World;
 import org.bukkit.metadata.MetadataStore;
@@ -13,7 +14,7 @@ import java.util.List;
 /**
  * A ChunkMetadataStore stores metadata values for {@link Chunk} objects.
  */
-public class ChunkMetadataStore extends MetadataStoreBase<Chunk> implements MetadataStore<Chunk> {
+public class ChunkMetadataStore extends MetadataStoreBase<WorldGenChunk> implements MetadataStore<WorldGenChunk> {
 
     private final World owningWorld;
     /**
@@ -25,58 +26,58 @@ public class ChunkMetadataStore extends MetadataStoreBase<Chunk> implements Meta
     }
 
     /**
-     * Generates a unique metadata key for a {@link Chunk} object based on its coordinates in the world.
+     * Generates a unique metadata key for a {@link WorldGenChunk} object based on its coordinates in the world.
      * @param chunk the chunk
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
      * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
-    protected String disambiguate(Chunk chunk, String metadataKey) {
+    protected String disambiguate(WorldGenChunk chunk, String metadataKey) {
         return chunk.getChunkKey() + ":" + metadataKey;
     }
 
 
     /**
-     * Retrieves the metadata for a {@link Chunk}, ensuring the chunk being asked for actually belongs to this ChunkMetadataStore's
+     * Retrieves the metadata for a {@link WorldGenChunk}, ensuring the chunk being asked for actually belongs to this ChunkMetadataStore's
      * owning world.
      * @see MetadataStoreBase#getMetadata(Object, String)
      */
     @Override
-    public List<MetadataValue> getMetadata(Chunk chunk, String metadataKey) {
+    public List<MetadataValue> getMetadata(WorldGenChunk chunk, String metadataKey) {
         Preconditions.checkArgument(chunk.getWorld() == this.owningWorld, "Chunk does not belong to world %s", this.owningWorld.getName());
         return super.getMetadata(chunk, metadataKey);
     }
 
     /**
-     * Tests to see if a metadata value has been added to a {@link Chunk}, ensuring the chunk being interrogated belongs
+     * Tests to see if a metadata value has been added to a {@link WorldGenChunk}, ensuring the chunk being interrogated belongs
      * to this ChunkMetadataStore's owning world.
      * @see MetadataStoreBase#hasMetadata(Object, String)
      */
     @Override
-    public boolean hasMetadata(Chunk chunk, String metadataKey) {
+    public boolean hasMetadata(WorldGenChunk chunk, String metadataKey) {
         Preconditions.checkArgument(chunk.getWorld() == this.owningWorld, "Chunk does not belong to world %s", this.owningWorld.getName());
         return super.hasMetadata(chunk, metadataKey);
     }
 
     /**
-     * Removes metadata from from a {@link Chunk} belonging to a given {@link Plugin}, ensuring the chunk being deleted from belongs
+     * Removes metadata from from a {@link WorldGenChunk} belonging to a given {@link Plugin}, ensuring the chunk being deleted from belongs
      * to this ChunkMetadataStore's owning world.
      * @see MetadataStoreBase#removeMetadata(Object, String, org.bukkit.plugin.Plugin)
      */
     @Override
-    public void removeMetadata(Chunk chunk, String metadataKey, Plugin owningPlugin) {
+    public void removeMetadata(WorldGenChunk chunk, String metadataKey, Plugin owningPlugin) {
         Preconditions.checkArgument(chunk.getWorld() == this.owningWorld, "Chunk does not belong to world %s", this.owningWorld.getName());
         super.removeMetadata(chunk, metadataKey, owningPlugin);
     }
 
     /**
-     * Sets or overwrites a metadata value on a {@link Chunk} from a given {@link Plugin}, ensuring the target chunk belongs
+     * Sets or overwrites a metadata value on a {@link WorldGenChunk} from a given {@link Plugin}, ensuring the target chunk belongs
      * to this ChunkMetadataStore's owning world.
      * @see MetadataStoreBase#setMetadata(Object, String, org.bukkit.metadata.MetadataValue)
      */
     @Override
-    public void setMetadata(Chunk chunk, String metadataKey, MetadataValue newMetadataValue) {
+    public void setMetadata(WorldGenChunk chunk, String metadataKey, MetadataValue newMetadataValue) {
         Preconditions.checkArgument(chunk.getWorld() == this.owningWorld, "Chunk does not belong to world %s", this.owningWorld.getName());
         super.setMetadata(chunk, metadataKey, newMetadataValue);
     }
