From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 1 May 2024 15:08:49 +0000
Subject: [PATCH] Add new functions to ItemBehaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
index ea435866961ac82ef90acf20eee48909bc8f433b..9897d33af34dcf62bb3aba255b90d3d490ec62ab 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/ItemBehaviourUtil.java
@@ -160,12 +160,24 @@ public class ItemBehaviourUtil extends BehaviourUtil {
             () -> stack.getItem().canFitInsideContainerItems());
     }
 
+    public static boolean canBreakWhenMaxDamage(ItemStack stack) {
+        return evaluateBoolean(getBehaviour(stack),
+            itemBehaviour -> itemBehaviour.canBreakWhenMaxDamage(stack.asBukkitMirror()),
+            () -> true);
+    }
+
     public static boolean isEnchantable(ItemStack stack) {
         return evaluateBoolean(getBehaviour(stack),
             itemBehaviour -> itemBehaviour.isEnchantable(stack.asBukkitMirror()),
             () -> stack.getItem().isEnchantable(stack));
     }
 
+    public static boolean canDrop(ItemStack stack) {
+        return evaluateBoolean(getBehaviour(stack),
+            itemBehaviour -> itemBehaviour.canDropOnDeath(stack.asBukkitMirror()),
+            () -> true);
+    }
+
     public static CustomItemData fromStack(ItemStack stack) {
         return CustomItemData.fromItemStack(stack.getBukkitStack());
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index f2254ff0f1bc681f456be77618d3040e26d9da31..05331d6ca4e26a6f4c92d17b127f32567e51556a 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1038,7 +1038,7 @@ public class ServerPlayer extends Player {
 
         if (!keepInventory) {
             for (ItemStack item : this.getInventory().getContents()) {
-                if (!item.isEmpty() && !EnchantmentHelper.hasVanishingCurse(item)) {
+                if (!item.isEmpty() && !EnchantmentHelper.hasVanishingCurse(item) && de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.canDrop(item)) { // MCCreativeLab - Add ItemBehaviour
                     loot.add(new DefaultDrop(item, stack -> this.drop(stack, true, false, false))); // Paper - Restore vanilla drops behavior; drop function taken from Inventory#dropAll (don't fire drop event)
                 }
             }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index f9798cf8023b3caf416a642e207af68c7d057c38..e0086ba1240e45aa72641679a5205aac8c2ac337 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2803,6 +2803,8 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
     @Nullable
     public ItemEntity spawnAtLocation(ItemStack stack, float yOffset, @Nullable java.util.function.Consumer<? super ItemEntity> delayedAddConsumer) {
+        if(!de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.canDrop(stack))
+            return null;
         // Paper end - Restore vanilla drops behavior
         if (stack.isEmpty()) {
             return null;
