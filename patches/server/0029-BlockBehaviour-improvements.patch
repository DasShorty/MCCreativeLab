From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Thu, 21 Dec 2023 17:17:43 +0100
Subject: [PATCH] BlockBehaviour improvements


diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
index 09ddbbfdf656aa347830941abd7c994fac05d1c5..b430ab5f37c0fa76c95acb6bb97cb62e3cd2e9e9 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
@@ -1,27 +1,27 @@
 package ca.spottedleaf.starlight.common.light;
 
+import de.verdox.mccreativelab.light.LightEngineTracker;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.chunk.ImposterProtoChunk;
-import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 public final class BlockStarLightEngine extends StarLightEngine {
 
     public BlockStarLightEngine(final Level world) {
         super(false, world);
+        lightType = LightEngineTracker.LightType.BLOCK;
     }
 
     @Override
@@ -83,7 +83,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected final void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ) {
+    protected final void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ, @Nullable LightEngineTracker lightEngineTracker) {
         // blocks can change opacity
         // blocks can change emitted light
         // blocks can change direction of propagation
@@ -95,7 +95,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
         final BlockState blockState = this.getBlockState(worldX, worldY, worldZ);
         final int emittedLevel = blockState.getLightEmission() & emittedMask;
 
-        this.setLightLevel(worldX, worldY, worldZ, emittedLevel);
+        this.setLightLevel(worldX, worldY, worldZ, emittedLevel, lightEngineTracker); // MCCreativeLab - Add BlockLightUpdateEvent
         // this accounts for change in emitted light that would cause an increase
         if (emittedLevel != 0) {
             this.appendToIncreaseQueue(
@@ -193,12 +193,12 @@ public final class BlockStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions) {
+    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions, @Nullable LightEngineTracker lightEngineTracker) {
         for (final BlockPos pos : positions) {
-            this.checkBlock(lightAccess, pos.getX(), pos.getY(), pos.getZ());
+            this.checkBlock(lightAccess, pos.getX(), pos.getY(), pos.getZ(), lightEngineTracker);
         }
 
-        this.performLightDecrease(lightAccess);
+        this.performLightDecrease(lightAccess, lightEngineTracker);
     }
 
     protected List<BlockPos> getSources(final LightChunkGetter lightAccess, final ChunkAccess chunk) {
@@ -238,7 +238,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    public void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks) {
+    public void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks, @Nullable LightEngineTracker lightEngineTracker) {
         // setup sources
         final int emittedMask = this.emittedLightMask;
         final List<BlockPos> positions = this.getSources(lightAccess, chunk);
@@ -261,19 +261,19 @@ public final class BlockStarLightEngine extends StarLightEngine {
 
 
             // propagation wont set this for us
-            this.setLightLevel(pos.getX(), pos.getY(), pos.getZ(), emittedLight);
+            this.setLightLevel(pos.getX(), pos.getY(), pos.getZ(), emittedLight, lightEngineTracker);
         }
 
         if (needsEdgeChecks) {
             // not required to propagate here, but this will reduce the hit of the edge checks
-            this.performLightIncrease(lightAccess);
+            this.performLightIncrease(lightAccess, lightEngineTracker);
 
             // verify neighbour edges
-            this.checkChunkEdges(lightAccess, chunk, this.minLightSection, this.maxLightSection);
+            this.checkChunkEdges(lightAccess, chunk, this.minLightSection, this.maxLightSection, lightEngineTracker);
         } else {
             this.propagateNeighbourLevels(lightAccess, chunk, this.minLightSection, this.maxLightSection);
 
-            this.performLightIncrease(lightAccess);
+            this.performLightIncrease(lightAccess, lightEngineTracker);
         }
     }
 }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
index 5f771962afb44175d446f138c8e7453230f48c6c..ca06b1af970887e0d8922b203389b5ce42e1c2e1 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
@@ -1,6 +1,7 @@
 package ca.spottedleaf.starlight.common.light;
 
 import ca.spottedleaf.starlight.common.util.WorldUtil;
+import de.verdox.mccreativelab.light.LightEngineTracker;
 import it.unimi.dsi.fastutil.shorts.ShortCollection;
 import it.unimi.dsi.fastutil.shorts.ShortIterator;
 import net.minecraft.core.BlockPos;
@@ -14,6 +15,8 @@ import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.Set;
 
@@ -53,6 +56,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     public SkyStarLightEngine(final Level world) {
         super(true, world);
         this.nullPropagationCheckCache = new boolean[WorldUtil.getTotalLightSections(world)];
+        lightType = LightEngineTracker.LightType.SKY;
     }
 
     @Override
@@ -231,8 +235,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection,
-                                   final int toSection) {
+    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection, @Nullable LightEngineTracker lightEngineTracker) {
         Arrays.fill(this.nullPropagationCheckCache, false);
         this.rewriteNibbleCacheForSkylight(chunk);
         final int chunkX = chunk.getPos().x;
@@ -241,11 +244,11 @@ public final class SkyStarLightEngine extends StarLightEngine {
             this.checkNullSection(chunkX, y, chunkZ, true);
         }
 
-        super.checkChunkEdges(lightAccess, chunk, fromSection, toSection);
+        super.checkChunkEdges(lightAccess, chunk, fromSection, toSection, lightEngineTracker);
     }
 
     @Override
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections) {
+    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections, @Nullable LightEngineTracker lightEngineTracker) {
         Arrays.fill(this.nullPropagationCheckCache, false);
         this.rewriteNibbleCacheForSkylight(chunk);
         final int chunkX = chunk.getPos().x;
@@ -255,11 +258,11 @@ public final class SkyStarLightEngine extends StarLightEngine {
             this.checkNullSection(chunkX, y, chunkZ, true);
         }
 
-        super.checkChunkEdges(lightAccess, chunk, sections);
+        super.checkChunkEdges(lightAccess, chunk, sections, lightEngineTracker);
     }
 
     @Override
-    protected void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ) {
+    protected void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ, @Nullable LightEngineTracker lightEngineTracker) {
         // blocks can change opacity
         // blocks can change direction of propagation
 
@@ -278,7 +281,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
                             | FLAG_HAS_SIDED_TRANSPARENT_BLOCKS // don't know if the block is conditionally transparent
             );
         } else {
-            this.setLightLevel(worldX, worldY, worldZ, 0);
+            this.setLightLevel(worldX, worldY, worldZ, 0, lightEngineTracker); // MCCreativeLab - Add BlockLightUpdateEvent
         }
 
         this.appendToDecreaseQueue(
@@ -358,7 +361,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions) {
+    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions, @Nullable LightEngineTracker lightEngineTracker) {
         this.rewriteNibbleCacheForSkylight(atChunk);
         Arrays.fill(this.nullPropagationCheckCache, false);
 
@@ -394,7 +397,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
 
             // try and propagate from the above y
             // delay light set until after processing all sources to setup
-            final int maxPropagationY = this.tryPropagateSkylight(world, columnX, maxY, columnZ, true, true);
+            final int maxPropagationY = this.tryPropagateSkylight(world, columnX, maxY, columnZ, true, true, lightEngineTracker);
 
             // maxPropagationY is now the highest block that could not be propagated to
 
@@ -439,20 +442,20 @@ public final class SkyStarLightEngine extends StarLightEngine {
 
         // delayed light sets are processed here, and must be processed before checkBlock as checkBlock reads
         // immediate light value
-        this.processDelayedIncreases();
-        this.processDelayedDecreases();
+        this.processDelayedIncreases(lightEngineTracker);
+        this.processDelayedDecreases(lightEngineTracker);
 
         for (final BlockPos pos : positions) {
-            this.checkBlock(lightAccess, pos.getX(), pos.getY(), pos.getZ());
+            this.checkBlock(lightAccess, pos.getX(), pos.getY(), pos.getZ(), lightEngineTracker);
         }
 
-        this.performLightDecrease(lightAccess);
+        this.performLightDecrease(lightAccess, lightEngineTracker);
     }
 
     protected final int[] heightMapGen = new int[32 * 32];
 
     @Override
-    protected void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks) {
+    protected void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks, @Nullable LightEngineTracker lightEngineTracker) {
         this.rewriteNibbleCacheForSkylight(chunk);
         Arrays.fill(this.nullPropagationCheckCache, false);
 
@@ -542,31 +545,31 @@ public final class SkyStarLightEngine extends StarLightEngine {
             final int startY = highestNonEmptySection << 4 | 15;
             for (int currZ = minZ; currZ <= maxZ; ++currZ) {
                 for (int currX = minX; currX <= maxX; ++currX) {
-                    this.tryPropagateSkylight(world, currX, startY + 1, currZ, false, false);
+                    this.tryPropagateSkylight(world, currX, startY + 1, currZ, false, false, lightEngineTracker);
                 }
             }
         } // else: apparently the chunk is empty
 
         if (needsEdgeChecks) {
             // not required to propagate here, but this will reduce the hit of the edge checks
-            this.performLightIncrease(lightAccess);
+            this.performLightIncrease(lightAccess, lightEngineTracker);
 
             for (int y = highestNonEmptySection; y >= this.minLightSection; --y) {
                 this.checkNullSection(chunkX, y, chunkZ, false);
             }
             // no need to rewrite the nibble cache again
-            super.checkChunkEdges(lightAccess, chunk, this.minLightSection, highestNonEmptySection);
+            super.checkChunkEdges(lightAccess, chunk, this.minLightSection, highestNonEmptySection, lightEngineTracker);
         } else {
             for (int y = highestNonEmptySection; y >= this.minLightSection; --y) {
                 this.checkNullSection(chunkX, y, chunkZ, false);
             }
             this.propagateNeighbourLevels(lightAccess, chunk, this.minLightSection, highestNonEmptySection);
 
-            this.performLightIncrease(lightAccess);
+            this.performLightIncrease(lightAccess, lightEngineTracker);
         }
     }
 
-    protected final void processDelayedIncreases() {
+    protected final void processDelayedIncreases(@Nullable LightEngineTracker lightEngineTracker) {
         // copied from performLightIncrease
         final long[] queue = this.increaseQueue;
         final int decodeOffsetX = -this.encodeOffsetX;
@@ -581,11 +584,11 @@ public final class SkyStarLightEngine extends StarLightEngine {
             final int posY = (((int)queueValue >>> 12) & ((1 << 16) - 1)) + decodeOffsetY;
             final int propagatedLightLevel = (int)((queueValue >>> (6 + 6 + 16)) & 0xF);
 
-            this.setLightLevel(posX, posY, posZ, propagatedLightLevel);
+            this.setLightLevel(posX, posY, posZ, propagatedLightLevel, lightEngineTracker); // MCCreativeLab - Add BlockLightUpdateEvent
         }
     }
 
-    protected final void processDelayedDecreases() {
+    protected final void processDelayedDecreases(@Nullable LightEngineTracker lightEngineTracker) {
         // copied from performLightDecrease
         final long[] queue = this.decreaseQueue;
         final int decodeOffsetX = -this.encodeOffsetX;
@@ -599,7 +602,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
             final int posZ = (((int)queueValue >>> 6) & 63) + decodeOffsetZ;
             final int posY = (((int)queueValue >>> 12) & ((1 << 16) - 1)) + decodeOffsetY;
 
-            this.setLightLevel(posX, posY, posZ, 0);
+            this.setLightLevel(posX, posY, posZ, 0, lightEngineTracker); // MCCreativeLab - Add BlockLightUpdateEvent
         }
     }
 
@@ -607,7 +610,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     // while also queueing light at the same time (initialising nibblearrays might depend on nibbles above, so
     // clobbering the light values will result in broken propagation)
     protected final int tryPropagateSkylight(final BlockGetter world, final int worldX, int startY, final int worldZ,
-                                             final boolean extrudeInitialised, final boolean delayLightSet) {
+                                             final boolean extrudeInitialised, final boolean delayLightSet, @Nullable LightEngineTracker lightEngineTracker) {
         final BlockPos.MutableBlockPos mutablePos = this.mutablePos3;
         final int encodeOffset = this.coordinateOffset;
         final long propagateDirection = AxisDirection.POSITIVE_Y.everythingButThisDirection; // just don't check upwards.
@@ -700,10 +703,15 @@ public final class SkyStarLightEngine extends StarLightEngine {
                 // make sure this is marked as AIR
                 above = AIR_BLOCK_STATE;
             } else if (!delayLightSet) {
-                this.setLightLevel(worldX, startY, worldZ, 15);
+                this.setLightLevel(worldX, startY, worldZ, 15, lightEngineTracker);
             }
         }
 
         return startY;
     }
+
+    protected final int tryPropagateSkylight(final BlockGetter world, final int worldX, int startY, final int worldZ,
+                                             final boolean extrudeInitialised, final boolean delayLightSet) {
+        return tryPropagateSkylight(world, worldX, worldZ, startY, extrudeInitialised, delayLightSet, null);
+    }
 }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index ad1eeebe6de219143492b94da309cb54ae9e0a5b..1944217806f5b437c7ea95e70512c6bef5cd7f6e 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -3,6 +3,7 @@ package ca.spottedleaf.starlight.common.light;
 import ca.spottedleaf.starlight.common.util.CoordinateUtils;
 import ca.spottedleaf.starlight.common.util.IntegerUtil;
 import ca.spottedleaf.starlight.common.util.WorldUtil;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.shorts.ShortCollection;
 import it.unimi.dsi.fastutil.shorts.ShortIterator;
@@ -28,6 +29,10 @@ import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.IntConsumer;
 
+import de.verdox.mccreativelab.CraftBlockLightContext;
+import de.verdox.mccreativelab.light.LightEngineTracker;
+import org.jetbrains.annotations.Nullable;
+
 public abstract class StarLightEngine {
 
     protected static final BlockState AIR_BLOCK_STATE = Blocks.AIR.defaultBlockState();
@@ -38,7 +43,6 @@ public abstract class StarLightEngine {
             AxisDirection.POSITIVE_X, AxisDirection.NEGATIVE_X,
             AxisDirection.POSITIVE_Z, AxisDirection.NEGATIVE_Z
     };
-
     protected static enum AxisDirection {
 
         // Declaration order is important and relied upon. Do not change without modifying propagation code.
@@ -312,12 +316,13 @@ public abstract class StarLightEngine {
         return nibble == null ? 0 : nibble.getUpdating(localIndex);
     }
 
-    protected final void setLightLevel(final int worldX, final int worldY, final int worldZ, final int level) {
+    protected final void setLightLevel(final int worldX, final int worldY, final int worldZ, final int level, @Nullable LightEngineTracker lightEngineTracker) {
         final int sectionIndex = (worldX >> 4) + 5 * (worldZ >> 4) + (5 * 5) * (worldY >> 4) + this.chunkSectionIndexOffset;
         final SWMRNibbleArray nibble = this.nibbleCache[sectionIndex];
 
         if (nibble != null) {
             nibble.set((worldX & 15) | ((worldZ & 15) << 4) | ((worldY & 15) << 8), level);
+            if(lightEngineTracker != null) lightEngineTracker.trackLightChange(world, worldX, worldY, worldZ, level, this.lightType);
             if (this.isClientSide) {
                 int cx1 = (worldX - 1) >> 4;
                 int cx2 = (worldX + 1) >> 4;
@@ -408,9 +413,8 @@ public abstract class StarLightEngine {
     protected abstract void setNibbles(final ChunkAccess chunk, final SWMRNibbleArray[] to);
 
     protected abstract boolean canUseChunk(final ChunkAccess chunk);
-
     public final void blocksChangedInChunk(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
-                                           final Set<BlockPos> positions, final Boolean[] changedSections) {
+                                           final Set<BlockPos> positions, final Boolean[] changedSections, @Nullable LightEngineTracker lightEngineTracker) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
@@ -424,7 +428,7 @@ public abstract class StarLightEngine {
                 }
             }
             if (!positions.isEmpty()) {
-                this.propagateBlockChanges(lightAccess, chunk, positions);
+                this.propagateBlockChanges(lightAccess, chunk, positions, lightEngineTracker);
             }
             this.updateVisible(lightAccess);
         } finally {
@@ -434,9 +438,8 @@ public abstract class StarLightEngine {
 
     // subclasses should not initialise caches, as this will always be done by the super call
     // subclasses should not invoke updateVisible, as this will always be done by the super call
-    protected abstract void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions);
-
-    protected abstract void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ);
+    protected abstract void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions, @Nullable LightEngineTracker lightEngineTracker);
+    protected abstract void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ, @Nullable LightEngineTracker lightEngineTracker);
 
     // if ret > expect, then the real value is at least ret (early returns if ret > expect, rather than calculating actual)
     // if ret == expect, then expect is the correct light value for pos
@@ -448,7 +451,7 @@ public abstract class StarLightEngine {
     protected final int[] chunkCheckDelayedUpdatesNeighbour = new int[16 * 16];
 
     protected void checkChunkEdge(final LightChunkGetter lightAccess, final ChunkAccess chunk,
-                                  final int chunkX, final int chunkY, final int chunkZ) {
+                                  final int chunkX, final int chunkY, final int chunkZ, @Nullable LightEngineTracker lightEngineTracker) {
         final SWMRNibbleArray currNibble = this.getNibbleFromCache(chunkX, chunkY, chunkZ);
         if (currNibble == null) {
             return;
@@ -546,28 +549,28 @@ public abstract class StarLightEngine {
                     final int value = this.chunkCheckDelayedUpdatesCenter[i];
                     this.checkBlock(lightAccess, currentChunkOffX | (value & 15),
                             chunkOffY | (value >>> 8),
-                            currentChunkOffZ | ((value >>> 4) & 0xF));
+                            currentChunkOffZ | ((value >>> 4) & 0xF), lightEngineTracker);
                 }
                 if (i < neighbourDelayedChecks) {
                     final int value = this.chunkCheckDelayedUpdatesNeighbour[i];
                     this.checkBlock(lightAccess, neighbourChunkOffX | (value & 15),
                             chunkOffY | (value >>> 8),
-                            neighbourChunkOffZ | ((value >>> 4) & 0xF));
+                            neighbourChunkOffZ | ((value >>> 4) & 0xF), lightEngineTracker);
                 }
             }
         }
     }
 
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections) {
+    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections, @Nullable LightEngineTracker lightEngineTracker) {
         final ChunkPos chunkPos = chunk.getPos();
         final int chunkX = chunkPos.x;
         final int chunkZ = chunkPos.z;
 
         for (final ShortIterator iterator = sections.iterator(); iterator.hasNext();) {
-            this.checkChunkEdge(lightAccess, chunk, chunkX, iterator.nextShort(), chunkZ);
+            this.checkChunkEdge(lightAccess, chunk, chunkX, iterator.nextShort(), chunkZ, lightEngineTracker);
         }
 
-        this.performLightDecrease(lightAccess);
+        this.performLightDecrease(lightAccess, lightEngineTracker);
     }
 
     // subclasses should not initialise caches, as this will always be done by the super call
@@ -575,16 +578,16 @@ public abstract class StarLightEngine {
     // verifies that light levels on this chunks edges are consistent with this chunk's neighbours
     // edges. if they are not, they are decreased (effectively performing the logic in checkBlock).
     // This does not resolve skylight source problems.
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection) {
+    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection, @Nullable LightEngineTracker lightEngineTracker) {
         final ChunkPos chunkPos = chunk.getPos();
         final int chunkX = chunkPos.x;
         final int chunkZ = chunkPos.z;
 
         for (int currSectionY = toSection; currSectionY >= fromSection; --currSectionY) {
-            this.checkChunkEdge(lightAccess, chunk, chunkX, currSectionY, chunkZ);
+            this.checkChunkEdge(lightAccess, chunk, chunkX, currSectionY, chunkZ, lightEngineTracker);
         }
 
-        this.performLightDecrease(lightAccess);
+        this.performLightDecrease(lightAccess, lightEngineTracker);
     }
 
     // pulls light from neighbours, and adds them into the increase queue. does not actually propagate.
@@ -850,28 +853,28 @@ public abstract class StarLightEngine {
         return ret;
     }
 
-    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ) {
+    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ, @Nullable LightEngineTracker lightEngineTracker) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, false);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
             if (chunk == null) {
                 return;
             }
-            this.checkChunkEdges(lightAccess, chunk, this.minLightSection, this.maxLightSection);
+            this.checkChunkEdges(lightAccess, chunk, this.minLightSection, this.maxLightSection, lightEngineTracker);
             this.updateVisible(lightAccess);
         } finally {
             this.destroyCaches();
         }
     }
 
-    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ, final ShortCollection sections) {
+    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ, final ShortCollection sections, @Nullable LightEngineTracker lightEngineTracker) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, false);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
             if (chunk == null) {
                 return;
             }
-            this.checkChunkEdges(lightAccess, chunk, sections);
+            this.checkChunkEdges(lightAccess, chunk, sections, lightEngineTracker);
             this.updateVisible(lightAccess);
         } finally {
             this.destroyCaches();
@@ -884,9 +887,9 @@ public abstract class StarLightEngine {
     // chunks light values with respect to neighbours
     // subclasses should note that the emptiness changes are propagated BEFORE this is called, so this function
     // does not need to detect empty chunks itself (and it should do no handling for them either!)
-    protected abstract void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks);
+    protected abstract void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks, @Nullable LightEngineTracker lightEngineTracker);
 
-    public final void light(final LightChunkGetter lightAccess, final ChunkAccess chunk, final Boolean[] emptySections) {
+    public final void light(final LightChunkGetter lightAccess, final ChunkAccess chunk, final Boolean[] emptySections, @Nullable LightEngineTracker lightEngineTracker) {
         final int chunkX = chunk.getPos().x;
         final int chunkZ = chunk.getPos().z;
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
@@ -903,7 +906,7 @@ public abstract class StarLightEngine {
             if (ret != null) {
                 this.setEmptinessMap(chunk, ret);
             }
-            this.lightChunk(lightAccess, chunk, true);
+            this.lightChunk(lightAccess, chunk, true, lightEngineTracker);
             this.setNibbles(chunk, nibbles);
             this.updateVisible(lightAccess);
         } finally {
@@ -912,7 +915,7 @@ public abstract class StarLightEngine {
     }
 
     public final void relightChunks(final LightChunkGetter lightAccess, final Set<ChunkPos> chunks,
-                                    final Consumer<ChunkPos> chunkLightCallback, final IntConsumer onComplete) {
+                                    final Consumer<ChunkPos> chunkLightCallback, final IntConsumer onComplete, @Nullable LightEngineTracker lightEngineTracker) {
         // it's recommended for maximum performance that the set is ordered according to a BFS from the center of
         // the region of chunks to relight
         // it's required that tickets are added for each chunk to keep them loaded
@@ -1003,7 +1006,7 @@ public abstract class StarLightEngine {
                         this.setEmptinessMap(neighbour, neighbourEmptiness);
                     }
 
-                    this.lightChunk(lightAccess, neighbour, false);
+                    this.lightChunk(lightAccess, neighbour, false, lightEngineTracker);
                 } finally {
                     this.destroyCaches();
                 }
@@ -1098,7 +1101,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected final void performLightIncrease(final LightChunkGetter lightAccess) {
+    protected final void performLightIncrease(final LightChunkGetter lightAccess, @Nullable LightEngineTracker lightEngineTracker) {
         final BlockGetter world = lightAccess.getLevel();
         long[] queue = this.increaseQueue;
         int queueReadIndex = 0;
@@ -1126,7 +1129,7 @@ public abstract class StarLightEngine {
                 }
             } else if ((queueValue & FLAG_WRITE_LEVEL) != 0L) {
                 // these are used to restore block sources after a propagation decrease
-                this.setLightLevel(posX, posY, posZ, propagatedLightLevel);
+                this.setLightLevel(posX, posY, posZ, propagatedLightLevel, lightEngineTracker);
             }
 
             if ((queueValue & FLAG_HAS_SIDED_TRANSPARENT_BLOCKS) == 0L) {
@@ -1155,7 +1158,7 @@ public abstract class StarLightEngine {
                         if (targetLevel > currentLevel) {
                             currentNibble.set(localIndex, targetLevel);
                             this.postLightUpdate(offX, offY, offZ);
-
+                            if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, targetLevel, this.lightType);
                             if (targetLevel > 1) {
                                 if (queueLength >= queue.length) {
                                     queue = this.resizeIncreaseQueue();
@@ -1188,6 +1191,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, targetLevel);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, targetLevel, this.lightType);
 
                         if (targetLevel > 1) {
                             if (queueLength >= queue.length) {
@@ -1237,6 +1241,7 @@ public abstract class StarLightEngine {
                         if (targetLevel > currentLevel) {
                             currentNibble.set(localIndex, targetLevel);
                             this.postLightUpdate(offX, offY, offZ);
+                            if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, targetLevel, this.lightType);
 
                             if (targetLevel > 1) {
                                 if (queueLength >= queue.length) {
@@ -1270,6 +1275,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, targetLevel);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, targetLevel, this.lightType);
 
                         if (targetLevel > 1) {
                             if (queueLength >= queue.length) {
@@ -1288,7 +1294,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected final void performLightDecrease(final LightChunkGetter lightAccess) {
+    protected final void performLightDecrease(final LightChunkGetter lightAccess, @Nullable LightEngineTracker lightEngineTracker) {
         final BlockGetter world = lightAccess.getLevel();
         long[] queue = this.decreaseQueue;
         long[] increaseQueue = this.increaseQueue;
@@ -1365,6 +1371,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, 0);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, 0, this.lightType);
 
                         if (targetLevel > 0) { // we actually need to propagate 0 just in case we find a neighbour...
                             if (queueLength >= queue.length) {
@@ -1419,6 +1426,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, 0);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, 0, this.lightType);
 
                         if (targetLevel > 0) {
                             if (queueLength >= queue.length) {
@@ -1494,6 +1502,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, 0);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, 0, this.lightType);
 
                         if (targetLevel > 0) { // we actually need to propagate 0 just in case we find a neighbour...
                             if (queueLength >= queue.length) {
@@ -1548,6 +1557,7 @@ public abstract class StarLightEngine {
 
                         currentNibble.set(localIndex, 0);
                         this.postLightUpdate(offX, offY, offZ);
+                        if(lightEngineTracker != null) lightEngineTracker.trackLightChange(this.world, offX, offY, offZ, 0, this.lightType);
 
                         if (targetLevel > 0) { // we actually need to propagate 0 just in case we find a neighbour...
                             if (queueLength >= queue.length) {
@@ -1567,6 +1577,49 @@ public abstract class StarLightEngine {
 
         // propagate sources we clobbered
         this.increaseQueueInitialLength = increaseQueueLength;
-        this.performLightIncrease(lightAccess);
+        this.performLightIncrease(lightAccess, lightEngineTracker);
+    }
+
+    public LightEngineTracker.LightType lightType; // MCCreativeLab - Add BlockLightUpdateEvent
+
+    protected final void performLightIncrease(final LightChunkGetter lightAccess){
+        this.performLightIncrease(lightAccess, null);
+    }
+
+    protected final void performLightDecrease(final LightChunkGetter lightAccess) {
+        this.performLightDecrease(lightAccess, null);
+    }
+
+    public final void blocksChangedInChunk(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
+                                           final Set<BlockPos> positions, final Boolean[] changedSections) {
+        this.blocksChangedInChunk(lightAccess, chunkX, chunkZ, positions, changedSections, null);
+    }
+
+    protected final void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions){
+        this.propagateBlockChanges(lightAccess, atChunk, positions, null);
+    }
+
+    protected final void checkBlock(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ){
+        this.checkBlock(lightAccess, worldX, worldY, worldZ, null);
+    }
+
+    protected final void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection) {
+        this.checkChunkEdges(lightAccess, chunk, fromSection, toSection, null);
+    }
+
+    protected final void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections) {
+        this.checkChunkEdges(lightAccess, chunk, sections, null);
+    }
+
+    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ, final ShortCollection sections) {
+        this.checkChunkEdges(lightAccess, chunkX, chunkZ, sections, null);
+    }
+
+    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ) {
+        this.checkChunkEdges(lightAccess, chunkX, chunkZ, (LightEngineTracker) null);
+    }
+
+    protected final void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks){
+        lightChunk(lightAccess, chunk, needsEdgeChecks, null);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
index ef8ea36b2acefb935afda01396d2699e2921f396..21de3be5c40057a53f21122a6fac95034f0b6f29 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
@@ -2,6 +2,7 @@ package ca.spottedleaf.starlight.common.light;
 
 import ca.spottedleaf.starlight.common.util.CoordinateUtils;
 import ca.spottedleaf.starlight.common.util.WorldUtil;
+import de.verdox.mccreativelab.light.LightEngineTracker;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.shorts.ShortCollection;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
@@ -20,6 +21,8 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -432,16 +435,16 @@ public final class StarLightInterface {
         }
     }
 
-    public void lightChunk(final ChunkAccess chunk, final Boolean[] emptySections) {
+    public void lightChunk(final ChunkAccess chunk, final Boolean[] emptySections, @Nullable LightEngineTracker lightEngineTracker) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
 
         try {
             if (skyEngine != null) {
-                skyEngine.light(this.lightAccess, chunk, emptySections);
+                skyEngine.light(this.lightAccess, chunk, emptySections, lightEngineTracker);
             }
             if (blockEngine != null) {
-                blockEngine.light(this.lightAccess, chunk, emptySections);
+                blockEngine.light(this.lightAccess, chunk, emptySections, lightEngineTracker);
             }
         } finally {
             this.releaseSkyLightEngine(skyEngine);
@@ -450,17 +453,17 @@ public final class StarLightInterface {
     }
 
     public void relightChunks(final Set<ChunkPos> chunks, final Consumer<ChunkPos> chunkLightCallback,
-                              final IntConsumer onComplete) {
+                              final IntConsumer onComplete, @Nullable LightEngineTracker lightEngineTracker) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
 
         try {
             if (skyEngine != null) {
                 skyEngine.relightChunks(this.lightAccess, chunks, blockEngine == null ? chunkLightCallback : null,
-                        blockEngine == null ? onComplete : null);
+                        blockEngine == null ? onComplete : null, lightEngineTracker);
             }
             if (blockEngine != null) {
-                blockEngine.relightChunks(this.lightAccess, chunks, chunkLightCallback, onComplete);
+                blockEngine.relightChunks(this.lightAccess, chunks, chunkLightCallback, onComplete, lightEngineTracker);
             }
         } finally {
             this.releaseSkyLightEngine(skyEngine);
@@ -468,28 +471,28 @@ public final class StarLightInterface {
         }
     }
 
-    public void checkChunkEdges(final int chunkX, final int chunkZ) {
-        this.checkSkyEdges(chunkX, chunkZ);
-        this.checkBlockEdges(chunkX, chunkZ);
+    public void checkChunkEdges(final int chunkX, final int chunkZ, @Nullable LightEngineTracker lightEngineTracker) {
+        this.checkSkyEdges(chunkX, chunkZ, lightEngineTracker);
+        this.checkBlockEdges(chunkX, chunkZ, lightEngineTracker);
     }
 
-    public void checkSkyEdges(final int chunkX, final int chunkZ) {
+    public void checkSkyEdges(final int chunkX, final int chunkZ, @Nullable LightEngineTracker lightEngineTracker) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
 
         try {
             if (skyEngine != null) {
-                skyEngine.checkChunkEdges(this.lightAccess, chunkX, chunkZ);
+                skyEngine.checkChunkEdges(this.lightAccess, chunkX, chunkZ, lightEngineTracker);
             }
         } finally {
             this.releaseSkyLightEngine(skyEngine);
         }
     }
 
-    public void checkBlockEdges(final int chunkX, final int chunkZ) {
+    public void checkBlockEdges(final int chunkX, final int chunkZ, @Nullable LightEngineTracker lightEngineTracker) {
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
         try {
             if (blockEngine != null) {
-                blockEngine.checkChunkEdges(this.lightAccess, chunkX, chunkZ);
+                blockEngine.checkChunkEdges(this.lightAccess, chunkX, chunkZ, lightEngineTracker);
             }
         } finally {
             this.releaseBlockLightEngine(blockEngine);
diff --git a/src/main/java/de/verdox/mccreativelab/CraftBlockLightContext.java b/src/main/java/de/verdox/mccreativelab/CraftBlockLightContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7845bb68dcf62b00174e992dc25667c15e83371
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/CraftBlockLightContext.java
@@ -0,0 +1,35 @@
+package de.verdox.mccreativelab;
+
+import de.verdox.mccreativelab.data.BlockLightContext;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.block.data.BlockData;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public class CraftBlockLightContext implements BlockLightContext {
+    private final Level level;
+    private final BlockGetter blockGetter;
+
+    public CraftBlockLightContext(Level level, BlockGetter blockGetter){
+        this.level = level;
+        this.blockGetter = blockGetter;
+    }
+    @Override
+    public UUID getWorldUUID() {
+        return level.getWorld().getUID();
+    }
+
+    @Override
+    public @Nullable BlockData getBlockDataIfLoaded(int x, int y, int z) {
+        if(this.blockGetter == null)
+            return null;
+        BlockState foundBlockState = blockGetter.getBlockStateIfLoaded(new BlockPos(x,y,z));
+        if(foundBlockState == null)
+            return null;
+        return foundBlockState.createCraftBlockData();
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
index 1621278706f54458882135243ce2d1eb9311921d..1935701cae7646656eb7f51070908948efbe7627 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
@@ -2,27 +2,215 @@ package de.verdox.mccreativelab.behaviour;
 
 import de.verdox.mccreativelab.CustomBehaviour;
 import de.verdox.mccreativelab.MultiCustomBehaviour;
+import de.verdox.mccreativelab.random.CraftVanillaRandomSource;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.util.RayTraceResult;
+import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Locale;
 import java.util.function.Function;
 import java.util.function.Supplier;
 
 public class BehaviourUtil {
+
+    public static final BehaviourResult.Object<Float> FLOAT_DEFAULT = new BehaviourResult.Object<>(0f, BehaviourResult.Object.Type.USE_VANILLA);
+
     public static <T extends BehaviourResult<?, ?>, K, V> T evaluate(@NotNull T defaultValue, @NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction) {
         if (!multiCustomBehaviour.isImplemented(key))
             return defaultValue;
-        return logicFunction.apply(multiCustomBehaviour.getBehaviour(key));
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+        try {
+            return logicFunction.apply(behaviour);
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return defaultValue;
+        }
     }
 
     public static <K, V> boolean evaluateBoolean(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Bool> logicFunction, Supplier<Boolean> vanillaLogic) {
         if (!multiCustomBehaviour.isImplemented(key))
             return vanillaLogic.get();
-        return logicFunction.apply(multiCustomBehaviour.getBehaviour(key)).evaluate(vanillaLogic);
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+        try{
+            return logicFunction.apply(behaviour).evaluate(vanillaLogic);
+        }
+        catch (Throwable throwable){
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return vanillaLogic.get();
+        }
     }
 
     public static <T extends BehaviourResult<?, ?>, V> T evaluate(@NotNull T defaultValue, @NotNull CustomBehaviour<V> customBehaviour, @NotNull Function<V, T> logicFunction) {
         if (!customBehaviour.isImplemented())
             return defaultValue;
-        return logicFunction.apply(customBehaviour.getBehaviour());
+        V behaviour = customBehaviour.getBehaviour();
+        try{
+            return logicFunction.apply(customBehaviour.getBehaviour());
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + customBehaviour.getKey() + " with value " + behaviour, throwable);
+            return defaultValue;
+        }
+    }
+
+    public static boolean isVanillaRandomTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.randomTick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isStepOnLogicReplaced(Level world, BlockPos pos, BlockState state, Entity entity) {
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.stepOn(world
+            .getWorld()
+            .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), entity.getBukkitEntity()));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isVanillaTickReplaced(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BehaviourResult.Void voidResult = evaluate(BehaviourResult.Void.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, BehaviourUtil.getMaterial(state), blockBehaviour -> blockBehaviour.tick(world
+            .getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), new CraftVanillaRandomSource(random)));
+        return voidResult.replaceVanillaLogic();
+    }
+
+    public static boolean isRandomlyTicking(BlockState blockState, boolean vanillaValue) {
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockDataRandomlyTicking(blockState.createCraftBlockData()));
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState, boolean vanillaValue) {
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockRandomlyTicking(world
+            .getWorld().getBlockAt(x, y, z), blockState.createCraftBlockData()));
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, boolean vanillaValue) {
+        BehaviourResult.Bool bool = BehaviourUtil.evaluate(BehaviourResult.Bool.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        });
+        return bool.evaluate(vanillaValue);
+    }
+
+    public static boolean canSurvive(BlockState state, LevelReader world, BlockPos pos, Supplier<Boolean> vanillaLogic) {
+        return BehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            if (!(world instanceof ServerLevel serverLevel))
+                return BehaviourResult.Bool.DEFAULT_INSTANCE;
+            return blockBehaviour.canSurvive(serverLevel.getWorld()
+                                                        .getBlockAt(pos.getX(), pos.getY(), pos.getZ()), serverLevel.getWorld());
+        }, vanillaLogic);
+    }
+
+    public static void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify));
+    }
+
+    public static void onPlayerPlaceCallback(Player player, BlockState placedState, Level world, BlockPos pos) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(placedState), blockBehaviour ->
+            blockBehaviour.onPlayerPlace((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), placedState.createCraftBlockData()));
+    }
+
+    public static void onPlayerBreakCallback(Player player, BlockState brokenState, Level world, BlockPos pos) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(brokenState), blockBehaviour ->
+            blockBehaviour.onPlayerBreak((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), brokenState.createCraftBlockData()));
+    }
+
+    public static float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState, float vanillaValue) {
+        return BehaviourUtil
+            .evaluate(FLOAT_DEFAULT, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return FLOAT_DEFAULT;
+                Block block = ((ServerLevel) world).getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+                return blockBehaviour.getExplosionResistance(block, blockState.createCraftBlockData());
+            }).returnRightValue(vanillaValue);
+    }
+
+    public static BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, BlockState vanillaValue) {
+        CraftBlockData blockData = (CraftBlockData) BehaviourUtil
+            .evaluate(BehaviourResult.Object.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return BehaviourResult.Object.DEFAULT_INSTANCE;
+                BlockFace blockFace = toBukkitBlockFace(direction);
+                return blockBehaviour.blockUpdate(new Location(serverLevel.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), blockFace, neighborState.createCraftBlockData(), new Location(serverLevel.getWorld(), neighborPos.getX(), neighborPos.getY(), neighborPos.getZ()));
+            }).returnRightValue(vanillaValue.createCraftBlockData());
+        return blockData.getState();
+    }
+
+    public static BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos, Supplier<BlockState> vanillaLogic) {
+        CraftBlockData blockData = (CraftBlockData) BehaviourUtil
+            .evaluate(BehaviourResult.Object.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+                if (!(world instanceof ServerLevel serverLevel))
+                    return BehaviourResult.Object.DEFAULT_INSTANCE;
+                BlockFace blockFace = toBukkitBlockFace(direction);
+                return blockBehaviour.blockUpdate(new Location(serverLevel.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), blockFace, neighborState.createCraftBlockData(), new Location(serverLevel.getWorld(), neighborPos.getX(), neighborPos.getY(), neighborPos.getZ()));
+            }).returnRightValue(() -> vanillaLogic.get().createCraftBlockData());
+        return blockData.getState();
+    }
+
+    public static void onRemoveCallback(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
+            blockBehaviour.onRemove(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), newState.createCraftBlockData(), state.createCraftBlockData(), moved));
+    }
+
+    public static void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        BehaviourUtil.evaluate(BehaviourResult.Callback.DEFAULT_INSTANCE, BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation()
+                                                                                                    .y(), hit
+                .getLocation().z()), block, blockFace);
+            return blockBehaviour.onUse(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+        });
+    }
+
+    private static BlockFace toBukkitBlockFace(Direction direction) {
+        return switch (direction) {
+            case DOWN -> BlockFace.DOWN;
+            case UP -> BlockFace.UP;
+            case NORTH -> BlockFace.NORTH;
+            case SOUTH -> BlockFace.SOUTH;
+            case WEST -> BlockFace.WEST;
+            case EAST -> BlockFace.EAST;
+        };
+    }
+
+    private static Material getMaterial(BlockState blockState) {
+        Material material;
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isReady())
+            material = blockState.getBukkitMaterial();
+        else
+            material = Material.getMaterial(BuiltInRegistries.BLOCK.getKey(blockState.getBlock()).getPath()
+                                                                   .toUpperCase(Locale.ROOT));
+        return material;
     }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/light/LightEngineTrackable.java b/src/main/java/de/verdox/mccreativelab/light/LightEngineTrackable.java
new file mode 100644
index 0000000000000000000000000000000000000000..71a216f2bd1802357e0c02ea5de3aee125b1cf92
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/light/LightEngineTrackable.java
@@ -0,0 +1,5 @@
+package de.verdox.mccreativelab.light;
+
+public interface LightEngineTrackable {
+    LightEngineTracker getTracker();
+}
diff --git a/src/main/java/de/verdox/mccreativelab/light/LightEngineTracker.java b/src/main/java/de/verdox/mccreativelab/light/LightEngineTracker.java
new file mode 100644
index 0000000000000000000000000000000000000000..fa7ed1ebce4a7793a465576f3de9c5e4c86f83f0
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/light/LightEngineTracker.java
@@ -0,0 +1,15 @@
+package de.verdox.mccreativelab.light;
+
+import net.minecraft.world.level.Level;
+
+import java.util.UUID;
+
+public interface LightEngineTracker {
+    void trackLightChange(Level world, int worldX, int worldY, int worldZ, int newLightLevel, LightType lightType);
+    void stopTracking();
+
+    enum LightType{
+        SKY,
+        BLOCK
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/light/PaperLightEngineTracker.java b/src/main/java/de/verdox/mccreativelab/light/PaperLightEngineTracker.java
new file mode 100644
index 0000000000000000000000000000000000000000..5bc40e413bb1536aea3dda3d2b2e3b1715bb84dd
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/light/PaperLightEngineTracker.java
@@ -0,0 +1,51 @@
+package de.verdox.mccreativelab.light;
+
+import de.verdox.mccreativelab.events.BlockLightEvent;
+import net.minecraft.util.Brightness;
+import net.minecraft.world.level.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.entity.Display;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class PaperLightEngineTracker implements LightEngineTracker {
+    private final Map<World, Map<Location, int[]>> trackedBlockLightChanges = new ConcurrentHashMap<>();
+    private boolean tracking = true;
+
+    @Override
+    public void trackLightChange(Level world, int worldX, int worldY, int worldZ, int newLightLevel, LightType lightType) {
+        if (!tracking)
+            return;
+
+        Location location = new Location(world.getWorld(), worldX, worldY, worldZ);
+        var worldCache = trackedBlockLightChanges.computeIfAbsent(world.getWorld(), world1 -> new ConcurrentHashMap<>());
+
+        int[] brightness;
+        if (!worldCache.containsKey(location))
+            brightness = worldCache.put(location, new int[]{-1, -1});
+        else
+            brightness = worldCache.get(location);
+
+        if (brightness == null)
+            brightness = new int[]{-1, -1};
+
+        if (lightType.equals(LightType.BLOCK))
+            brightness[0] = newLightLevel;
+        else
+            brightness[1] = newLightLevel;
+
+        worldCache.put(location, brightness);
+    }
+
+    @Override
+    public void stopTracking() {
+        tracking = false;
+        if (BlockLightEvent.getHandlerList().getRegisteredListeners().length == 0)
+            return;
+        trackedBlockLightChanges.forEach((world, locationMap) -> Bukkit.getPluginManager()
+                                                                       .callEvent(new BlockLightEvent(world, locationMap)));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java b/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
index de28d6ee71990da74d9deb360fac8bde5adbc918..affbe861c3815bd74d18e9114ec503abac585e50 100644
--- a/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
+++ b/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.starlight.common.light.BlockStarLightEngine;
 import ca.spottedleaf.starlight.common.light.SkyStarLightEngine;
 import ca.spottedleaf.starlight.common.light.StarLightInterface;
+import de.verdox.mccreativelab.light.LightEngineTrackable;
+import de.verdox.mccreativelab.light.LightEngineTracker;
+import de.verdox.mccreativelab.light.PaperLightEngineTracker;
 import io.papermc.paper.util.CoordinateUtils;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.shorts.ShortCollection;
@@ -13,6 +16,7 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
+
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -237,11 +241,15 @@ public final class LightQueue {
                 this.queue.chunkTasks.remove(this.chunkCoordinate);
             }
 
+            LightEngineTracker lightEngineTracker = null;
+
             boolean litChunk = false;
             if (this.lightTasks != null) {
                 for (final BooleanSupplier run : this.lightTasks) {
                     if (run.getAsBoolean()) {
                         litChunk = true;
+                        if(run instanceof LightEngineTrackable lightEngineTrackable && lightEngineTrackable.getTracker() != null)
+                            lightEngineTracker = lightEngineTrackable.getTracker();
                         break;
                     }
                 }
@@ -249,6 +257,9 @@ public final class LightQueue {
 
             final SkyStarLightEngine skyEngine = this.lightEngine.getSkyLightEngine();
             final BlockStarLightEngine blockEngine = this.lightEngine.getBlockLightEngine();
+            if(lightEngineTracker == null)
+                lightEngineTracker = new PaperLightEngineTracker();
+
             try {
                 final long coordinate = this.chunkCoordinate;
                 final int chunkX = CoordinateUtils.getChunkX(coordinate);
@@ -259,24 +270,25 @@ public final class LightQueue {
 
                 if (!litChunk) {
                     if (skyEngine != null && (!positions.isEmpty() || sectionChanges != null)) {
-                        skyEngine.blocksChangedInChunk(this.lightEngine.getLightAccess(), chunkX, chunkZ, positions, sectionChanges);
+                        skyEngine.blocksChangedInChunk(this.lightEngine.getLightAccess(), chunkX, chunkZ, positions, sectionChanges, lightEngineTracker);
                     }
                     if (blockEngine != null && (!positions.isEmpty() || sectionChanges != null)) {
-                        blockEngine.blocksChangedInChunk(this.lightEngine.getLightAccess(), chunkX, chunkZ, positions, sectionChanges);
+                        blockEngine.blocksChangedInChunk(this.lightEngine.getLightAccess(), chunkX, chunkZ, positions, sectionChanges, lightEngineTracker);
                     }
 
                     if (skyEngine != null && this.queuedEdgeChecksSky != null) {
-                        skyEngine.checkChunkEdges(this.lightEngine.getLightAccess(), chunkX, chunkZ, this.queuedEdgeChecksSky);
+                        skyEngine.checkChunkEdges(this.lightEngine.getLightAccess(), chunkX, chunkZ, this.queuedEdgeChecksSky, lightEngineTracker);
                     }
                     if (blockEngine != null && this.queuedEdgeChecksBlock != null) {
-                        blockEngine.checkChunkEdges(this.lightEngine.getLightAccess(), chunkX, chunkZ, this.queuedEdgeChecksBlock);
+                        blockEngine.checkChunkEdges(this.lightEngine.getLightAccess(), chunkX, chunkZ, this.queuedEdgeChecksBlock, lightEngineTracker);
                     }
                 }
-
                 this.onComplete.complete(null);
             } finally {
                 this.lightEngine.releaseSkyLightEngine(skyEngine);
                 this.lightEngine.releaseBlockLightEngine(blockEngine);
+                lightEngineTracker.stopTracking();
+                //TODO: Call Event here with lightEngineTracker
             }
         }
     }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
index 53ddd7e9ac05e6a9eb809f329796e6d4f6bb2ab1..d486d400909fe52c1fd9d2f6e9abc9fbe76c5205 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
@@ -3,6 +3,9 @@ package io.papermc.paper.chunk.system.scheduling;
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.starlight.common.light.StarLightEngine;
 import ca.spottedleaf.starlight.common.light.StarLightInterface;
+import de.verdox.mccreativelab.light.LightEngineTrackable;
+import de.verdox.mccreativelab.light.LightEngineTracker;
+import de.verdox.mccreativelab.light.PaperLightEngineTracker;
 import io.papermc.paper.chunk.system.light.LightQueue;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
@@ -11,6 +14,7 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ProtoChunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+
 import java.util.function.BooleanSupplier;
 
 public final class ChunkLightTask extends ChunkProgressionTask {
@@ -126,10 +130,11 @@ public final class ChunkLightTask extends ChunkProgressionTask {
         }
     }
 
-    private static final class LightTask implements BooleanSupplier {
+    private static final class LightTask implements BooleanSupplier, LightEngineTrackable {
 
         protected final StarLightInterface lightEngine;
         protected final ChunkLightTask task;
+        public final LightEngineTracker lightEngineTracker = new PaperLightEngineTracker();
 
         public LightTask(final StarLightInterface lightEngine, final ChunkLightTask task) {
             this.lightEngine = lightEngine;
@@ -148,12 +153,13 @@ public final class ChunkLightTask extends ChunkProgressionTask {
             try {
                 final Boolean[] emptySections = StarLightEngine.getEmptySectionsForChunk(task.fromChunk);
 
+
                 if (task.fromChunk.isLightCorrect() && task.fromChunk.getStatus().isOrAfter(ChunkStatus.LIGHT)) {
                     this.lightEngine.forceLoadInChunk(task.fromChunk, emptySections);
-                    this.lightEngine.checkChunkEdges(task.chunkX, task.chunkZ);
+                    this.lightEngine.checkChunkEdges(task.chunkX, task.chunkZ, lightEngineTracker);
                 } else {
                     task.fromChunk.setLightCorrect(false);
-                    this.lightEngine.lightChunk(task.fromChunk, emptySections);
+                    this.lightEngine.lightChunk(task.fromChunk, emptySections, lightEngineTracker);
                     task.fromChunk.setLightCorrect(true);
                 }
                 // we need to advance status
@@ -177,5 +183,10 @@ public final class ChunkLightTask extends ChunkProgressionTask {
             task.complete(task.fromChunk, null);
             return true;
         }
+
+        @Override
+        public LightEngineTracker getTracker() {
+            return lightEngineTracker;
+        }
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 463c6d8d5b114816ed9065558285945817c30385..12e942befbb62d3f5b1d1472ba23340bca6b60bc 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -1,5 +1,7 @@
 package io.papermc.paper.command.subcommands;
 
+import de.verdox.mccreativelab.light.LightEngineTracker;
+import de.verdox.mccreativelab.light.PaperLightEngineTracker;
 import io.papermc.paper.command.PaperSubcommand;
 import java.util.ArrayDeque;
 import java.util.Deque;
@@ -90,6 +92,9 @@ public final class FixLightCommand implements PaperSubcommand {
         }
 
         final int[] relitChunks = new int[1];
+
+        LightEngineTracker lightEngineTracker = new PaperLightEngineTracker();
+
         lightengine.relight(chunks,
             (final ChunkPos chunkPos) -> {
                 ++relitChunks[0];
@@ -109,7 +114,8 @@ public final class FixLightCommand implements PaperSubcommand {
                     done.run();
                 }
             }
-        );
+        , lightEngineTracker);
+        lightEngineTracker.stopTracking();
         sender.getBukkitEntity().sendMessage(text().color(BLUE).append(text("Relighting "), text(pending[0], DARK_AQUA), text(" chunks")));
     }
 }
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index c9a6b5be8f0e382c373bd4ecbff1269d5cf6c850..98ff659fa27417278cecfef189f9a3181db96146 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -7,6 +7,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+
 import java.util.EnumMap;
 import java.util.HashSet;
 import java.util.List;
@@ -14,6 +15,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+
 import net.minecraft.Util;
 import net.minecraft.network.protocol.BundleDelimiterPacket;
 import net.minecraft.network.protocol.BundlePacket;
@@ -211,11 +213,215 @@ import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
 public enum ConnectionProtocol {
-    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet()).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
-    PLAY("play", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>()).withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new).addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new).addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new).addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new).addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new).addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new).addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new).addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new).addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new).addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new).addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new).addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new).addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new).addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new).addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new).addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new).addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new).addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new).addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new).addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new).addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new).addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new).addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new).addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new).addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new).addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new).addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new).addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new).addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new).addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new).addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new).addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new).addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new).addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new).addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new).addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new).addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new).addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new).addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read).addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read).addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read).addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new).addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new).addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new).addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new).addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new).addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new).addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new).addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new).addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new).addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new).addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new).addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new).addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new).addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new).addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new).addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new).addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new).addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new).addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new).addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new).addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new).addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new).addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new).addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new).addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new).addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new).addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new).addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new).addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new).addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new).addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new).addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new).addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new).addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new).addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new).addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new).addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new).addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new).addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new).addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new).addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new).addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new).addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new).addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new).addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new).addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new).addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new).addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new).addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new).addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new).addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new).addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new).addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new).addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new).addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new).addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new).addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new).addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new).addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new).addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new).addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>()).addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new).addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new).addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new).addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new).addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new).addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new).addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new).addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new).addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new).addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new).addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new).addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new).addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new).addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new).addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new).addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new).addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read).addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read).addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read).addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read).addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new).addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new).addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new).addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new).addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new).addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new).addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new).addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new).addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new).addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new).addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new).addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new).addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new).addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new).addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new).addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new).addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new).addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new).addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new).addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new).addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new).addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new).addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new).addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
-    STATUS("status", protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
-    LOGIN("login", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read).addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
-    CONFIGURATION("configuration", protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>()).addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new).addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new).addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new).addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new).addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new).addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new).addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new).addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new).addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>()).addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new).addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new).addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new).addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new).addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new).addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new))); // Paper - decompile fix, use subclass
+    HANDSHAKING("handshake", protocol().addFlow(PacketFlow.CLIENTBOUND, new ConnectionProtocol.PacketSet())
+                                       .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerHandshakePacketListener>()).addPacket(ClientIntentionPacket.class, ClientIntentionPacket::new))),
+    PLAY("play", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientGamePacketListener>())
+            .withBundlePacket(ClientboundBundlePacket.class, ClientboundBundlePacket::new)
+            .addPacket(ClientboundAddEntityPacket.class, ClientboundAddEntityPacket::new)
+            .addPacket(ClientboundAddExperienceOrbPacket.class, ClientboundAddExperienceOrbPacket::new)
+            .addPacket(ClientboundAnimatePacket.class, ClientboundAnimatePacket::new)
+            .addPacket(ClientboundAwardStatsPacket.class, ClientboundAwardStatsPacket::new)
+            .addPacket(ClientboundBlockChangedAckPacket.class, ClientboundBlockChangedAckPacket::new)
+            .addPacket(ClientboundBlockDestructionPacket.class, ClientboundBlockDestructionPacket::new)
+            .addPacket(ClientboundBlockEntityDataPacket.class, ClientboundBlockEntityDataPacket::new)
+            .addPacket(ClientboundBlockEventPacket.class, ClientboundBlockEventPacket::new)
+            .addPacket(ClientboundBlockUpdatePacket.class, ClientboundBlockUpdatePacket::new)
+            .addPacket(ClientboundBossEventPacket.class, ClientboundBossEventPacket::new)
+            .addPacket(ClientboundChangeDifficultyPacket.class, ClientboundChangeDifficultyPacket::new)
+            .addPacket(ClientboundChunkBatchFinishedPacket.class, ClientboundChunkBatchFinishedPacket::new)
+            .addPacket(ClientboundChunkBatchStartPacket.class, ClientboundChunkBatchStartPacket::new)
+            .addPacket(ClientboundChunksBiomesPacket.class, ClientboundChunksBiomesPacket::new)
+            .addPacket(ClientboundClearTitlesPacket.class, ClientboundClearTitlesPacket::new)
+            .addPacket(ClientboundCommandSuggestionsPacket.class, ClientboundCommandSuggestionsPacket::new)
+            .addPacket(ClientboundCommandsPacket.class, ClientboundCommandsPacket::new)
+            .addPacket(ClientboundContainerClosePacket.class, ClientboundContainerClosePacket::new)
+            .addPacket(ClientboundContainerSetContentPacket.class, ClientboundContainerSetContentPacket::new)
+            .addPacket(ClientboundContainerSetDataPacket.class, ClientboundContainerSetDataPacket::new)
+            .addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new)
+            .addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new)
+            .addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new)
+            .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+            .addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new)
+            .addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new)
+            .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
+            .addPacket(ClientboundDisguisedChatPacket.class, ClientboundDisguisedChatPacket::new)
+            .addPacket(ClientboundEntityEventPacket.class, ClientboundEntityEventPacket::new)
+            .addPacket(ClientboundExplodePacket.class, ClientboundExplodePacket::new)
+            .addPacket(ClientboundForgetLevelChunkPacket.class, ClientboundForgetLevelChunkPacket::new)
+            .addPacket(ClientboundGameEventPacket.class, ClientboundGameEventPacket::new)
+            .addPacket(ClientboundHorseScreenOpenPacket.class, ClientboundHorseScreenOpenPacket::new)
+            .addPacket(ClientboundHurtAnimationPacket.class, ClientboundHurtAnimationPacket::new)
+            .addPacket(ClientboundInitializeBorderPacket.class, ClientboundInitializeBorderPacket::new)
+            .addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new)
+            .addPacket(ClientboundLevelChunkWithLightPacket.class, ClientboundLevelChunkWithLightPacket::new)
+            .addPacket(ClientboundLevelEventPacket.class, ClientboundLevelEventPacket::new)
+            .addPacket(ClientboundLevelParticlesPacket.class, ClientboundLevelParticlesPacket::new)
+            .addPacket(ClientboundLightUpdatePacket.class, ClientboundLightUpdatePacket::new)
+            .addPacket(ClientboundLoginPacket.class, ClientboundLoginPacket::new)
+            .addPacket(ClientboundMapItemDataPacket.class, ClientboundMapItemDataPacket::new)
+            .addPacket(ClientboundMerchantOffersPacket.class, ClientboundMerchantOffersPacket::new)
+            .addPacket(ClientboundMoveEntityPacket.Pos.class, ClientboundMoveEntityPacket.Pos::read)
+            .addPacket(ClientboundMoveEntityPacket.PosRot.class, ClientboundMoveEntityPacket.PosRot::read)
+            .addPacket(ClientboundMoveEntityPacket.Rot.class, ClientboundMoveEntityPacket.Rot::read)
+            .addPacket(ClientboundMoveVehiclePacket.class, ClientboundMoveVehiclePacket::new)
+            .addPacket(ClientboundOpenBookPacket.class, ClientboundOpenBookPacket::new)
+            .addPacket(ClientboundOpenScreenPacket.class, ClientboundOpenScreenPacket::new)
+            .addPacket(ClientboundOpenSignEditorPacket.class, ClientboundOpenSignEditorPacket::new)
+            .addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new)
+            .addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new)
+            .addPacket(ClientboundPlaceGhostRecipePacket.class, ClientboundPlaceGhostRecipePacket::new)
+            .addPacket(ClientboundPlayerAbilitiesPacket.class, ClientboundPlayerAbilitiesPacket::new)
+            .addPacket(ClientboundPlayerChatPacket.class, ClientboundPlayerChatPacket::new)
+            .addPacket(ClientboundPlayerCombatEndPacket.class, ClientboundPlayerCombatEndPacket::new)
+            .addPacket(ClientboundPlayerCombatEnterPacket.class, ClientboundPlayerCombatEnterPacket::new)
+            .addPacket(ClientboundPlayerCombatKillPacket.class, ClientboundPlayerCombatKillPacket::new)
+            .addPacket(ClientboundPlayerInfoRemovePacket.class, ClientboundPlayerInfoRemovePacket::new)
+            .addPacket(ClientboundPlayerInfoUpdatePacket.class, ClientboundPlayerInfoUpdatePacket::new)
+            .addPacket(ClientboundPlayerLookAtPacket.class, ClientboundPlayerLookAtPacket::new)
+            .addPacket(ClientboundPlayerPositionPacket.class, ClientboundPlayerPositionPacket::new)
+            .addPacket(ClientboundRecipePacket.class, ClientboundRecipePacket::new)
+            .addPacket(ClientboundRemoveEntitiesPacket.class, ClientboundRemoveEntitiesPacket::new)
+            .addPacket(ClientboundRemoveMobEffectPacket.class, ClientboundRemoveMobEffectPacket::new)
+            .addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new)
+            .addPacket(ClientboundRespawnPacket.class, ClientboundRespawnPacket::new)
+            .addPacket(ClientboundRotateHeadPacket.class, ClientboundRotateHeadPacket::new)
+            .addPacket(ClientboundSectionBlocksUpdatePacket.class, ClientboundSectionBlocksUpdatePacket::new)
+            .addPacket(ClientboundSelectAdvancementsTabPacket.class, ClientboundSelectAdvancementsTabPacket::new)
+            .addPacket(ClientboundServerDataPacket.class, ClientboundServerDataPacket::new)
+            .addPacket(ClientboundSetActionBarTextPacket.class, ClientboundSetActionBarTextPacket::new)
+            .addPacket(ClientboundSetBorderCenterPacket.class, ClientboundSetBorderCenterPacket::new)
+            .addPacket(ClientboundSetBorderLerpSizePacket.class, ClientboundSetBorderLerpSizePacket::new)
+            .addPacket(ClientboundSetBorderSizePacket.class, ClientboundSetBorderSizePacket::new)
+            .addPacket(ClientboundSetBorderWarningDelayPacket.class, ClientboundSetBorderWarningDelayPacket::new)
+            .addPacket(ClientboundSetBorderWarningDistancePacket.class, ClientboundSetBorderWarningDistancePacket::new)
+            .addPacket(ClientboundSetCameraPacket.class, ClientboundSetCameraPacket::new)
+            .addPacket(ClientboundSetCarriedItemPacket.class, ClientboundSetCarriedItemPacket::new)
+            .addPacket(ClientboundSetChunkCacheCenterPacket.class, ClientboundSetChunkCacheCenterPacket::new)
+            .addPacket(ClientboundSetChunkCacheRadiusPacket.class, ClientboundSetChunkCacheRadiusPacket::new)
+            .addPacket(ClientboundSetDefaultSpawnPositionPacket.class, ClientboundSetDefaultSpawnPositionPacket::new)
+            .addPacket(ClientboundSetDisplayObjectivePacket.class, ClientboundSetDisplayObjectivePacket::new)
+            .addPacket(ClientboundSetEntityDataPacket.class, ClientboundSetEntityDataPacket::new)
+            .addPacket(ClientboundSetEntityLinkPacket.class, ClientboundSetEntityLinkPacket::new)
+            .addPacket(ClientboundSetEntityMotionPacket.class, ClientboundSetEntityMotionPacket::new)
+            .addPacket(ClientboundSetEquipmentPacket.class, ClientboundSetEquipmentPacket::new)
+            .addPacket(ClientboundSetExperiencePacket.class, ClientboundSetExperiencePacket::new)
+            .addPacket(ClientboundSetHealthPacket.class, ClientboundSetHealthPacket::new)
+            .addPacket(ClientboundSetObjectivePacket.class, ClientboundSetObjectivePacket::new)
+            .addPacket(ClientboundSetPassengersPacket.class, ClientboundSetPassengersPacket::new)
+            .addPacket(ClientboundSetPlayerTeamPacket.class, ClientboundSetPlayerTeamPacket::new)
+            .addPacket(ClientboundSetScorePacket.class, ClientboundSetScorePacket::new)
+            .addPacket(ClientboundSetSimulationDistancePacket.class, ClientboundSetSimulationDistancePacket::new)
+            .addPacket(ClientboundSetSubtitleTextPacket.class, ClientboundSetSubtitleTextPacket::new)
+            .addPacket(ClientboundSetTimePacket.class, ClientboundSetTimePacket::new)
+            .addPacket(ClientboundSetTitleTextPacket.class, ClientboundSetTitleTextPacket::new)
+            .addPacket(ClientboundSetTitlesAnimationPacket.class, ClientboundSetTitlesAnimationPacket::new)
+            .addPacket(ClientboundSoundEntityPacket.class, ClientboundSoundEntityPacket::new)
+            .addPacket(ClientboundSoundPacket.class, ClientboundSoundPacket::new)
+            .addPacket(ClientboundStartConfigurationPacket.class, ClientboundStartConfigurationPacket::new)
+            .addPacket(ClientboundStopSoundPacket.class, ClientboundStopSoundPacket::new)
+            .addPacket(ClientboundSystemChatPacket.class, ClientboundSystemChatPacket::new)
+            .addPacket(ClientboundTabListPacket.class, ClientboundTabListPacket::new)
+            .addPacket(ClientboundTagQueryPacket.class, ClientboundTagQueryPacket::new)
+            .addPacket(ClientboundTakeItemEntityPacket.class, ClientboundTakeItemEntityPacket::new)
+            .addPacket(ClientboundTeleportEntityPacket.class, ClientboundTeleportEntityPacket::new)
+            .addPacket(ClientboundUpdateAdvancementsPacket.class, ClientboundUpdateAdvancementsPacket::new)
+            .addPacket(ClientboundUpdateAttributesPacket.class, ClientboundUpdateAttributesPacket::new)
+            .addPacket(ClientboundUpdateMobEffectPacket.class, ClientboundUpdateMobEffectPacket::new)
+            .addPacket(ClientboundUpdateRecipesPacket.class, ClientboundUpdateRecipesPacket::new)
+            .addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerGamePacketListener>())
+            .addPacket(ServerboundAcceptTeleportationPacket.class, ServerboundAcceptTeleportationPacket::new)
+            .addPacket(ServerboundBlockEntityTagQuery.class, ServerboundBlockEntityTagQuery::new)
+            .addPacket(ServerboundChangeDifficultyPacket.class, ServerboundChangeDifficultyPacket::new)
+            .addPacket(ServerboundChatAckPacket.class, ServerboundChatAckPacket::new)
+            .addPacket(ServerboundChatCommandPacket.class, ServerboundChatCommandPacket::new)
+            .addPacket(ServerboundChatPacket.class, ServerboundChatPacket::new)
+            .addPacket(ServerboundChatSessionUpdatePacket.class, ServerboundChatSessionUpdatePacket::new)
+            .addPacket(ServerboundChunkBatchReceivedPacket.class, ServerboundChunkBatchReceivedPacket::new)
+            .addPacket(ServerboundClientCommandPacket.class, ServerboundClientCommandPacket::new)
+            .addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new)
+            .addPacket(ServerboundCommandSuggestionPacket.class, ServerboundCommandSuggestionPacket::new)
+            .addPacket(ServerboundConfigurationAcknowledgedPacket.class, ServerboundConfigurationAcknowledgedPacket::new)
+            .addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new)
+            .addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new)
+            .addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new)
+            .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+            .addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new)
+            .addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new)
+            .addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new)
+            .addPacket(ServerboundJigsawGeneratePacket.class, ServerboundJigsawGeneratePacket::new)
+            .addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new)
+            .addPacket(ServerboundLockDifficultyPacket.class, ServerboundLockDifficultyPacket::new)
+            .addPacket(ServerboundMovePlayerPacket.Pos.class, ServerboundMovePlayerPacket.Pos::read)
+            .addPacket(ServerboundMovePlayerPacket.PosRot.class, ServerboundMovePlayerPacket.PosRot::read)
+            .addPacket(ServerboundMovePlayerPacket.Rot.class, ServerboundMovePlayerPacket.Rot::read)
+            .addPacket(ServerboundMovePlayerPacket.StatusOnly.class, ServerboundMovePlayerPacket.StatusOnly::read)
+            .addPacket(ServerboundMoveVehiclePacket.class, ServerboundMoveVehiclePacket::new)
+            .addPacket(ServerboundPaddleBoatPacket.class, ServerboundPaddleBoatPacket::new)
+            .addPacket(ServerboundPickItemPacket.class, ServerboundPickItemPacket::new)
+            .addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)
+            .addPacket(ServerboundPlaceRecipePacket.class, ServerboundPlaceRecipePacket::new)
+            .addPacket(ServerboundPlayerAbilitiesPacket.class, ServerboundPlayerAbilitiesPacket::new)
+            .addPacket(ServerboundPlayerActionPacket.class, ServerboundPlayerActionPacket::new)
+            .addPacket(ServerboundPlayerCommandPacket.class, ServerboundPlayerCommandPacket::new)
+            .addPacket(ServerboundPlayerInputPacket.class, ServerboundPlayerInputPacket::new)
+            .addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new)
+            .addPacket(ServerboundRecipeBookChangeSettingsPacket.class, ServerboundRecipeBookChangeSettingsPacket::new)
+            .addPacket(ServerboundRecipeBookSeenRecipePacket.class, ServerboundRecipeBookSeenRecipePacket::new)
+            .addPacket(ServerboundRenameItemPacket.class, ServerboundRenameItemPacket::new)
+            .addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new)
+            .addPacket(ServerboundSeenAdvancementsPacket.class, ServerboundSeenAdvancementsPacket::new)
+            .addPacket(ServerboundSelectTradePacket.class, ServerboundSelectTradePacket::new)
+            .addPacket(ServerboundSetBeaconPacket.class, ServerboundSetBeaconPacket::new)
+            .addPacket(ServerboundSetCarriedItemPacket.class, ServerboundSetCarriedItemPacket::new)
+            .addPacket(ServerboundSetCommandBlockPacket.class, ServerboundSetCommandBlockPacket::new)
+            .addPacket(ServerboundSetCommandMinecartPacket.class, ServerboundSetCommandMinecartPacket::new)
+            .addPacket(ServerboundSetCreativeModeSlotPacket.class, ServerboundSetCreativeModeSlotPacket::new)
+            .addPacket(ServerboundSetJigsawBlockPacket.class, ServerboundSetJigsawBlockPacket::new)
+            .addPacket(ServerboundSetStructureBlockPacket.class, ServerboundSetStructureBlockPacket::new)
+            .addPacket(ServerboundSignUpdatePacket.class, ServerboundSignUpdatePacket::new)
+            .addPacket(ServerboundSwingPacket.class, ServerboundSwingPacket::new)
+            .addPacket(ServerboundTeleportToEntityPacket.class, ServerboundTeleportToEntityPacket::new)
+            .addPacket(ServerboundUseItemOnPacket.class, ServerboundUseItemOnPacket::new)
+            .addPacket(ServerboundUseItemPacket.class, ServerboundUseItemPacket::new))),
+    STATUS("status", protocol()
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>())
+            .addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new)
+            .addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new))
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>())
+            .addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new)
+            .addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
+    LOGIN("login", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>())
+            .addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new)
+            .addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new)
+            .addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new)
+            .addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new)
+            .addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>())
+            .addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new)
+            .addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new)
+            .addPacket(ServerboundCustomQueryAnswerPacket.class, ServerboundCustomQueryAnswerPacket::read)
+            .addPacket(ServerboundLoginAcknowledgedPacket.class, ServerboundLoginAcknowledgedPacket::new))),
+    CONFIGURATION("configuration", protocol()
+        .addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>())
+            .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+            .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
+            .addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new)
+            .addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new)
+            .addPacket(ClientboundPingPacket.class, ClientboundPingPacket::new)
+            .addPacket(ClientboundRegistryDataPacket.class, ClientboundRegistryDataPacket::new)
+            .addPacket(ClientboundResourcePackPacket.class, ClientboundResourcePackPacket::new)
+            .addPacket(ClientboundUpdateEnabledFeaturesPacket.class, ClientboundUpdateEnabledFeaturesPacket::new)
+            .addPacket(ClientboundUpdateTagsPacket.class, ClientboundUpdateTagsPacket::new))
+        .addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>())
+            .addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new)
+            .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+            .addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new)
+            .addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new)
+            .addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new)
+            .addPacket(ServerboundResourcePackPacket.class, ServerboundResourcePackPacket::new))); // Paper - decompile fix, use subclass
 
     public static final int NOT_REGISTERED = -1;
     private final String id;
@@ -357,7 +563,7 @@ public enum ConnectionProtocol {
         public Map<PacketFlow, ConnectionProtocol.CodecData<?>> buildCodecs(ConnectionProtocol state) {
             Map<PacketFlow, ConnectionProtocol.CodecData<?>> map = new EnumMap<>(PacketFlow.class);
 
-            for(PacketFlow packetFlow : PacketFlow.values()) {
+            for (PacketFlow packetFlow : PacketFlow.values()) {
                 ConnectionProtocol.PacketSet<?> packetSet = this.flows.get(packetFlow);
                 if (packetSet == null) {
                     throw new IllegalStateException("Missing packets for flow " + packetFlow + " in protocol " + state);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dbccbcb9b44e4efacdf53c2d161115cc20b36cff..64c6fcb01739f59d79f828969f9083a593c5767a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -272,6 +272,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache(); // MCCLab
         // CraftBukkit end
 
         // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index b2c2bd5ec0afd479973f7237a5c610f21231c505..90cbc1b3aca20b80735b2ccdce252c7256f8a575 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -3,6 +3,8 @@ package net.minecraft.server.level;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -464,6 +466,7 @@ public class ServerPlayerGameMode {
                 }
                 // Paper end
 
+                BehaviourUtil.onPlayerBreakCallback(player, iblockdata, level, pos);
                 return true;
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index f382d138959b34bfc3a114bc9d96e056cccbfc89..1d7d9a3103066d60d2bf8e51783eb7adfd3a80fe 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -2,6 +2,7 @@ package net.minecraft.server.level;
 
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import de.verdox.mccreativelab.light.LightEngineTracker;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
@@ -21,12 +22,16 @@ import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.bukkit.Bukkit;
+import org.bukkit.util.Vector;
 import org.slf4j.Logger;
 
 // Paper start
 import ca.spottedleaf.starlight.common.light.StarLightEngine;
 import io.papermc.paper.util.CoordinateUtils;
 import java.util.function.Supplier;
+import java.util.stream.Collectors;
+
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
@@ -66,8 +71,8 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     protected long relightCounter;
 
     public int relight(java.util.Set<ChunkPos> chunks_param,
-                        java.util.function.Consumer<ChunkPos> chunkLightCallback,
-                        java.util.function.IntConsumer onComplete) {
+                       java.util.function.Consumer<ChunkPos> chunkLightCallback,
+                       java.util.function.IntConsumer onComplete, @Nullable LightEngineTracker lightEngineTracker) {
         if (!org.bukkit.Bukkit.isPrimaryThread()) {
             throw new IllegalStateException("Must only be called on the main thread");
         }
@@ -101,7 +106,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
                     ((ServerLevel)this.theLightEngine.getWorld()).getChunkSource().chunkMap.getUpdatingChunkIfPresent(chunkPos.toLong()).broadcast(new net.minecraft.network.protocol.game.ClientboundLightUpdatePacket(chunkPos, ThreadedLevelLightEngine.this, null, null), false);
                     ((ServerLevel)this.theLightEngine.getWorld()).getChunkSource().removeTicketAtLevel(TicketType.CHUNK_RELIGHT, chunkPos, io.papermc.paper.util.MCUtil.getTicketLevelFor(ChunkStatus.LIGHT), ticketIds.get(chunkPos));
                 });
-            }, onComplete);
+            }, onComplete, lightEngineTracker);
         });
         this.tryScheduleUpdate();
 
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index e483186a5292b3b53bfb1af4d56f55fcc1a6106c..0448a9408667b91625f3d48132633d794911ac50 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -6,6 +6,8 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -137,6 +139,8 @@ public class BlockItem extends Item {
                         itemstack.shrink(1);
                     }
 
+
+                    if(entityhuman != null) BehaviourUtil.onPlayerPlaceCallback(entityhuman, iblockdata, world, blockposition);
                     return InteractionResult.sidedSuccess(world.isClientSide);
                 }
             }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index c057c0138cad7c3ee221b3a30d8713231ccd03ab..c66186588879877cb17a7b754ca47e07ff2b3cd7 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -21,6 +21,8 @@ import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
@@ -443,6 +445,8 @@ public final class ItemStack {
                         ((ServerPlayer) entityhuman).connection.send(new ClientboundBlockUpdatePacket(world, placedPos.relative(dir)));
                     }
                     SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+
+                    BehaviourUtil.onPlayerPlaceCallback(entityhuman, world.getBlockState(blockposition), world, blockposition);
                 } else {
                     // Change the stack to its new contents if it hasn't been tampered with.
                     if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
diff --git a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
index 44c3f0ceea4b4464873302ecdc53f7eb1cc83052..0f1cec080489059b90c549f11e140943d6384318 100644
--- a/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
+++ b/src/main/java/net/minecraft/world/level/ExplosionDamageCalculator.java
@@ -7,7 +7,7 @@ import net.minecraft.world.level.material.FluidState;
 
 public class ExplosionDamageCalculator {
     public Optional<Float> getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState) {
-        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(), fluidState.getExplosionResistance()));
+        return blockState.isAir() && fluidState.isEmpty() ? Optional.empty() : Optional.of(Math.max(blockState.getBlock().getExplosionResistance(world, pos, blockState), fluidState.getExplosionResistance()));
     }
 
     public boolean shouldBlockExplode(Explosion explosion, BlockGetter world, BlockPos pos, BlockState state, float power) {
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
index 47468086c1cae252aa99c55b0065f225357dee62..e30e24f352dc0abf10f08a0e575ca652ab882a8a 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCauldronBlock.java
@@ -78,6 +78,7 @@ public abstract class AbstractCauldronBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockPos = PointedDripstoneBlock.findStalactiteTipAboveCauldron(world, pos);
         if (blockPos != null) {
             Fluid fluid = PointedDripstoneBlock.getCauldronFillFluidType(world, blockPos);
diff --git a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
index 01b4cf48901aaac897b8def284bf3e2c1cea3570..552b88ee374c1b3fa42f06bf78d4083c0cce583d 100644
--- a/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AmethystClusterBlock.java
@@ -61,9 +61,11 @@ public class AmethystClusterBlock extends AmethystBlock implements SimpleWaterlo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
index e98f566aaba3ff7e3058fbd53bcac467c2c63182..b7bc6f7815c1be84f69d3bbfd2d54b7ad3db3314 100644
--- a/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AttachedStemBlock.java
@@ -38,8 +38,12 @@ public class AttachedStemBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem().defaultBlockState().setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return !neighborState.is(this.fruit) && direction == state.getValue(FACING) ? this.fruit.getStem()
+                                                                                                    .defaultBlockState()
+                                                                                                    .setValue(StemBlock.AGE, Integer.valueOf(7)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index fd0143944e4fecaf6f1ffa4561702178431575e9..80d5abc5c49181aab7ec2a2ac13a5cc5bcabef4e 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -38,6 +38,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.growBamboo(world, pos);
         }
@@ -46,11 +47,14 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -60,6 +64,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index 05a508cb457b67078ccb08bd2228a59e73701cf3..a49681b49801498e192fe1be59a167b75f36ccb6 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -113,6 +114,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -126,6 +128,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
@@ -140,11 +143,14 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -154,6 +160,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BannerBlock.java b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
index 09451bc19b65e09c85389d597625dcc2b6f715c5..3a8eb6e5cf9a253c0bd8a5269b9bfb64b89ce0b8 100644
--- a/src/main/java/net/minecraft/world/level/block/BannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BannerBlock.java
@@ -31,7 +31,9 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
@@ -46,8 +48,10 @@ public class BannerBlock extends AbstractBannerBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
index 79f19bc122f08d276d96b4490327e228224576fc..fe52e60c03dbddf6bd251a499582e3e411493a11 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrelBlock.java
@@ -67,6 +67,7 @@ public class BarrelBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof BarrelBlockEntity) {
             ((BarrelBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
index a46f924ba1ac778f2fabbbd811b993ce33f8cf89..66bc6b478ec361df3b035cbca3416b6c826ed266 100644
--- a/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BarrierBlock.java
@@ -42,11 +42,13 @@ public class BarrierBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
index 3d2b34c5a7c9b00c1164b4f89c2cbff81fc460eb..d5190478b3f44ece5397d9604a5b2055c1de6a12 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralPlantTypeBlock.java
@@ -62,17 +62,21 @@ public class BaseCoralPlantTypeBlock extends Block implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return world.getBlockState(blockPos).isFaceSturdy(world, blockPos, Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
index 94e7a53fb6792d490246c7f2aec8a7f47f2ef493..46f8bf2a73684f1dd22d60d988bce77c8751a517 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseCoralWallFanBlock.java
@@ -49,19 +49,23 @@ public class BaseCoralWallFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index ee4b3ac212483995bb8ae990bebfb8aa2fbe86a5..390eff67ee30a3a0ffa9e0c4cc8edebc60e04282 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -50,18 +50,23 @@ public abstract class BasePressurePlateBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return canSupportRigidBlock(world, blockposition1) || canSupportCenter(world, blockposition1, Direction.UP);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = this.getSignalForState(state);
 
         if (i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index 547d09c3a1cd0c5401aacb78886896365ba192e7..607d7675b59fbb0e1c8e48317d46647d01d3fcd5 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -50,7 +50,9 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportRigidBlock(world, pos.below());
+        });
     }
 
     @Override
@@ -145,11 +147,13 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index d40500f9a807cab0b2fb6fa9032f33f4fb74c895..c2261f527d7d3cbff2670a0540ec7e4cd53beebb 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -199,8 +199,10 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == BedBlock.getNeighbourDirection((BedPart) state.getValue(BedBlock.PART), (Direction) state.getValue(BedBlock.FACING)) ? (neighborState.is((Block) this) && neighborState.getValue(BedBlock.PART) != state.getValue(BedBlock.PART) ? (BlockState) state.setValue(BedBlock.OCCUPIED, (Boolean) neighborState.getValue(BedBlock.OCCUPIED)) : Blocks.AIR.defaultBlockState()) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static Direction getNeighbourDirection(BedPart part, Direction direction) {
         return part == BedPart.FOOT ? direction : direction.getOpposite();
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 4b4a6b081ffedc7f637fa1e1726391d8e0fee0a1..e196202adabbef9837e042f59af4baa253b4f6ed 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -337,17 +337,19 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
-            BlockEntity tileentity = world.getBlockEntity(pos);
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (world.getBlockState(neighborPos).getBlock() instanceof FireBlock) {
+                BlockEntity tileentity = world.getBlockEntity(pos);
 
-            if (tileentity instanceof BeehiveBlockEntity) {
-                BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
+                if (tileentity instanceof BeehiveBlockEntity) {
+                    BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
 
-                tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                    tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                }
             }
-        }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     // CraftBukkit start - fix MC-227255
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 2bd714466fb86d4013bd3bceddecba19ce98df08..b64f43291f5aaf637579ca3f4b4f7d9a7b6c0768 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -41,6 +41,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 2774c32bd62255e8902d23e986c8d3e13ccddc7f..11f0354ee2e804a26a883501c2ed9847fb1fc49e 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -208,6 +208,7 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         BellAttachType blockpropertybellattach = (BellAttachType) state.getValue(BellBlock.ATTACHMENT);
         Direction enumdirection1 = BellBlock.getConnectedDirection(state).getOpposite();
 
@@ -226,14 +227,17 @@ public class BellBlock extends BaseEntityBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = BellBlock.getConnectedDirection(state).getOpposite();
 
         return enumdirection == Direction.UP ? Block.canSupportCenter(world, pos.above(), Direction.DOWN) : FaceAttachedHorizontalDirectionalBlock.canAttach(world, pos, enumdirection);
-    }
+        });
+        }
 
     private static Direction getConnectedDirection(BlockState state) {
         switch ((BellAttachType) state.getValue(BellBlock.ATTACHMENT)) {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 54cf35b0c48d96ecfb27ff13cd685c16a1cd616b..abbedae000e10edd4539fcf01a6f1114805a7959 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -123,14 +123,17 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -140,6 +143,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
             return direction == Direction.UP && neighborState.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -194,6 +198,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
index 06f353e28ef6a9e7efc4c2fe383284fd651e0486..e29eb30481831dfb10b98f60c1ad60da2ed8fe12 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafStemBlock.java
@@ -62,11 +62,13 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         BlockState blockState = world.getBlockState(blockPos);
         BlockState blockState2 = world.getBlockState(pos.above());
         return (blockState.is(this) || blockState.is(BlockTags.BIG_DRIPLEAF_PLACEABLE)) && (blockState2.is(this) || blockState2.is(Blocks.BIG_DRIPLEAF));
-    }
+        });
+        }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
         BlockState blockState = Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER))).setValue(FACING, direction);
@@ -75,6 +77,7 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((direction == Direction.DOWN || direction == Direction.UP) && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
         }
@@ -84,10 +87,12 @@ public class BigDripleafStemBlock extends HorizontalDirectionalBlock implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index d4cbff18adb62073a1dceb189043789620af6877..3f56251c3e7f7c3ea6e8b44895a8dbe82973860a 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -403,13 +403,21 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     }
 
+    // MCCLab start - Add BlockBehaviour
+    public float getExplosionResistance(BlockGetter world, BlockPos pos, BlockState blockState){
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.getExplosionResistance(world, pos, blockState, getExplosionResistance());
+    }
+    // MCCLab end - Add BlockBehaviour
+
     public float getExplosionResistance() {
         return this.explosionResistance;
     }
 
     public void wasExploded(Level world, BlockPos pos, Explosion explosion) {}
 
-    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {}
+    public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity); // MCCLab start - Adding BlockBehaviour
+    }
 
     @Nullable
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
diff --git a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
index c751ebf0bb1343a543e70abbfd64f1b070e5c430..8d5da8b983ba759ce51d5ec8c747a0fe891194f4 100644
--- a/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BrushableBlock.java
@@ -53,12 +53,15 @@ public class BrushableBlock extends BaseEntityBlock implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, 2);
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, 2);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity var6 = world.getBlockEntity(pos);
         if (var6 instanceof BrushableBlockEntity brushableBlockEntity) {
             brushableBlockEntity.checkReset();
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index ed36a378b79f62c3dce3da637a337595415f14ac..49df6ef30af2a00bd10c03f47438cbf31e0b2cc6 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -60,6 +60,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         updateColumn(world, pos, state, world.getBlockState(pos.below()));
     }
 
@@ -125,19 +126,23 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         if (!state.canSurvive(world, pos) || direction == Direction.DOWN || direction == Direction.UP && !neighborState.is(Blocks.BUBBLE_COLUMN) && canExistIn(neighborState)) {
             world.scheduleTick(pos, this, 5);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState blockState = world.getBlockState(pos.below());
         return blockState.is(Blocks.BUBBLE_COLUMN) || blockState.is(Blocks.MAGMA_BLOCK) || blockState.is(Blocks.SOUL_SAND);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 2548244c089dff583c8c424dcaa5504caedf3f10..f8fabad3dac609677a9e28f39ece8f82322f9e4e 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -19,6 +19,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(5) == 0) {
             Direction enumdirection = BuddingAmethystBlock.DIRECTIONS[random.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
             BlockPos blockposition1 = pos.relative(enumdirection);
diff --git a/src/main/java/net/minecraft/world/level/block/BushBlock.java b/src/main/java/net/minecraft/world/level/block/BushBlock.java
index 03fde6e47c4a347c62fe9b4a3351769aedf874f6..5d213c9f8696d40c27508c6d386c6c359d967709 100644
--- a/src/main/java/net/minecraft/world/level/block/BushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BushBlock.java
@@ -22,6 +22,7 @@ public class BushBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!state.canSurvive(world, pos)) {
             if (!(world instanceof net.minecraft.server.level.ServerLevel && ((net.minecraft.server.level.ServerLevel) world).hasPhysicsEvent) || !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(world, pos).isCancelled()) { // Paper
@@ -30,13 +31,16 @@ public class BushBlock extends Block {
         }
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockPos blockposition1 = pos.below();
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockPos blockposition1 = pos.below();
 
-        return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+            return this.mayPlaceOn(world.getBlockState(blockposition1), world, blockposition1);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 3e792514d042f05ff6848b7d6506472ace67b67a..7a63fe7687279bab5d45b67174ae865a71b5f773 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -174,6 +174,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
             this.checkPressed(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 0003fb51ae3a6575575e10b4c86719f3061e2577..96c23c4a44d1d19f9c6781e6e6ef3e79c4e82018 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -37,6 +37,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class CactusBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1)) {
@@ -84,15 +86,18 @@ public class CactusBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         Direction enumdirection;
@@ -110,6 +115,7 @@ public class CactusBlock extends Block {
         } while (!iblockdata1.isSolid() && !world.getFluidState(pos.relative(enumdirection)).is(FluidTags.LAVA));
 
         return false;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 397b8945bd0c2f413b17ba95cfb31befca252595..47ce5c9c0fbbb32e7978f0421c1ca3b46b98f968 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -113,13 +113,17 @@ public class CakeBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
-    }
+        });
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 7700461b8cd0bde1bf6c0d5e4b73184bed1adc4e..75c828bcd0900e18f135c5705c594095f794fe28 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -128,12 +128,14 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(neighborState)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private boolean isSmokeSource(BlockState state) {
         return state.is(Blocks.HAY_BLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/CandleBlock.java b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
index ff575d3d369340f4ec0d61cc4dea144432ea3690..b3bf1d1a7c402c911f66080a35734d6d1380bff0 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleBlock.java
@@ -88,11 +88,13 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -155,6 +157,8 @@ public class CandleBlock extends AbstractCandleBlock implements SimpleWaterlogge
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
index 29cf6571ef738823e52d7e18400fcb9f51308114..9b9477f7c9113143467c7497d7cef4b304ebed92 100644
--- a/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CandleCakeBlock.java
@@ -87,12 +87,16 @@ public class CandleCakeBlock extends AbstractCandleBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
index db687aff597df22913b8764ec2cd28976b66e061..cae5190b7db56c5468a9f60be94d8fcb1eae7ca9 100644
--- a/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarpetBlock.java
@@ -24,11 +24,15 @@ public class CarpetBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return !world.isEmptyBlock(pos.below());
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
index 0bd8ea3143b2e9755d492af4596622d1dca1afaf..d5c19c36ae4ef50142ded9a7520c2541cc449baf 100644
--- a/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -70,8 +70,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.above()).isFaceSturdy(world, pos.above(), Direction.DOWN, SupportType.CENTER);
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -113,8 +115,10 @@ public class CeilingHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChainBlock.java b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
index 1c5d7173c320b4f852f138c4050d6c27c6126c0b..30e78f6f158e3e5761f7e857988665f66021c2e8 100644
--- a/src/main/java/net/minecraft/world/level/block/ChainBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChainBlock.java
@@ -53,11 +53,13 @@ public class ChainBlock extends RotatedPillarBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 5e22d175b1048a58802cdf64ac70a8b56329e915..4a1b49707625161d4bb0c1165839984a00c949ee 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -150,6 +150,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ChestBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -165,6 +166,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -415,6 +417,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof ChestBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index e9beebedf1d60e06e16c442b64d28d022a3e3164..03d0109d4f8b4fd08374cade4c48f03c48485fa6 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -37,6 +37,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -55,6 +56,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
@@ -169,15 +171,18 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction != Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         if (!iblockdata1.is((Block) this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
@@ -207,6 +212,7 @@ public class ChorusFlowerBlock extends Block {
         } else {
             return true;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index 2e8bf4463b8da8da50cd14d3f84aba5e930e5710..35c11ea1725045618568ab3909826e3df6e952f4 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -37,6 +37,7 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return state; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, this, 1);
@@ -45,10 +46,12 @@ public class ChorusPlantBlock extends PipeBlock {
             boolean bl = neighborState.is(this) || neighborState.is(Blocks.CHORUS_FLOWER) || direction == Direction.DOWN && neighborState.is(Blocks.END_STONE);
             return state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(bl));
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return; // Paper - add option to disable block updates
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
@@ -58,26 +61,29 @@ public class ChorusPlantBlock extends PipeBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return true; // Paper - add option to disable block updates
-        BlockState blockState = world.getBlockState(pos.below());
-        boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates)
+                return true; // Paper - add option to disable block updates
+            BlockState blockState = world.getBlockState(pos.below());
+            boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
 
-        for(Direction direction : Direction.Plane.HORIZONTAL) {
-            BlockPos blockPos = pos.relative(direction);
-            BlockState blockState2 = world.getBlockState(blockPos);
-            if (blockState2.is(this)) {
-                if (bl) {
-                    return false;
-                }
+            for (Direction direction : Direction.Plane.HORIZONTAL) {
+                BlockPos blockPos = pos.relative(direction);
+                BlockState blockState2 = world.getBlockState(blockPos);
+                if (blockState2.is(this)) {
+                    if (bl) {
+                        return false;
+                    }
 
-                BlockState blockState3 = world.getBlockState(blockPos.below());
-                if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
-                    return true;
+                    BlockState blockState3 = world.getBlockState(blockPos.below());
+                    if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
+                        return true;
+                    }
                 }
             }
-        }
 
-        return blockState.is(this) || blockState.is(Blocks.END_STONE);
+            return blockState.is(this) || blockState.is(Blocks.END_STONE);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index f5c42fee3ec68a7a9260f01d19c7a1d7533bad9c..a4eb4d0939a26037e0f5afef84b0bb28c5b6709d 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -51,6 +51,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
@@ -63,9 +64,11 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
 
         return iblockdata1.is(BlockTags.JUNGLE_LOGS);
+        });
     }
 
     @Override
@@ -110,8 +113,10 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(CocoaBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 2e7c03b00bc941b86df6a7f1b2b188c9f0aede22..651b4d0bab4f663308afa4d4fd2284cca99f46b3 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -83,6 +83,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof CommandBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 16174c573b1acd1e1a75dba9305994ed37fe6c72..9d8850ec7b973e8b4052b86799576b27b33a9ac5 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -44,8 +44,10 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     protected int getOutputSignal(BlockGetter world, BlockPos pos, BlockState state) {
@@ -182,6 +184,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.refreshOutputState(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 10d3912ef043eefdf89105332e29b0d2bf4a5539..fac4a6aa77078869c89f29658c1d66d4c788c9d5 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -358,6 +358,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
             world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
             world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
index 065525e8ce46c12cdfa1d5d06fb96ea4654e95a3..6dbef50029fc515e4b8a007cc9a634e65c08d14c 100644
--- a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -92,6 +92,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (ConcretePowderBlock.touchesLiquid(world, pos)) {
             // Suppress during worldgen
@@ -111,6 +112,7 @@ public class ConcretePowderBlock extends FallingBlock {
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
index 1a97e9075ec3fc3cad597d78ef46310c4c87cac3..241205f6fa8cb7118a0649868c55ce25d31af7da 100644
--- a/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConduitBlock.java
@@ -64,11 +64,13 @@ public class ConduitBlock extends BaseEntityBlock implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..430e7a84f39bf6406f2e460463f7f8ffb4931488 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -24,6 +24,7 @@ public class CoralBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
@@ -37,11 +38,13 @@ public class CoralBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!this.scanForWater(world, pos)) {
             world.scheduleTick(pos, (Block) this, 60 + world.getRandom().nextInt(40));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     protected boolean scanForWater(BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 86e58786c8a4caa965ea63aff50a13ae61da8c1c..b44a1a7ad568a31665b00d6c03344037f765c006 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -27,6 +27,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
@@ -40,6 +41,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +52,6 @@ public class CoralFanBlock extends BaseCoralFanBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index f980e31c4b6ba396be6ef317cffe027004a090e0..7bb39d0b9c493f30b5da094f18daebfc09447cc6 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -32,6 +32,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false)).isCancelled()) {
@@ -45,6 +46,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -55,6 +57,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index f759ad7b49244a91aca4d36db2980267d46e1c23..0532ed0b32c58edfeb1fabaf0f869dba1ba834cb 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -27,6 +27,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
@@ -40,6 +41,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -50,5 +52,6 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
             this.tryScheduleDieTick(state, world, pos);
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 6365ddea0c23bc5d4009d98915f2b39aed2a0328..6a5928d736ee098c422801dc068610e4c840ab38 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -70,6 +70,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
 
@@ -162,7 +163,9 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return CropBlock.hasSufficientLight(world, pos) && super.canSurvive(state, world, pos);
+        });
     }
 
     protected static boolean hasSufficientLight(LevelReader world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
index 5737b2cdd662197883e2f3a6358f6a38a5b9db94..39be2fd09c68b0b490a1fd98820df475224b0aeb 100644
--- a/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DecoratedPotBlock.java
@@ -52,11 +52,13 @@ public class DecoratedPotBlock extends BaseEntityBlock implements SimpleWaterlog
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 05dfb1790a292f9f85b641377c2ca3675726c127..470acb9d314750fc4baac304c5ecd3cf4b0d9fee 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -54,6 +54,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
             this.checkPressed(world, pos, state);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 0f513bc36ed62a8eff1be874de61f47888739ec8..cfdb93e6aac1da54eb22e57379265b52105422bd 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -37,9 +37,11 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return this.canSurviveOn(world, blockposition1, world.getBlockState(blockposition1));
+        });
     }
 
     protected boolean canSurviveOn(LevelReader world, BlockPos pos, BlockState state) {
@@ -48,6 +50,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isLocked(world, pos, state)) {
             boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
             boolean flag1 = this.shouldTurnOn(world, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
index 1ec9bad118dee4ad072242c1b47c82ad74760aca..d9d243b3b678cde06139272f13ba6fd0f5966c06 100644
--- a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
@@ -35,15 +35,18 @@ public class DirtPathBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, (Block) this, 1);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // CraftBukkit start - do not fade if the block is valid here
         if (state.canSurvive(world, pos)) {
             return;
@@ -54,9 +57,11 @@ public class DirtPathBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 9b1e51c1d95da885c80c6d05000d83436b7bcfb4..cec180976bdf93fcaf6262153b054acd89361fa5 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -127,6 +127,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.dispenseFrom(world, state, pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index c028a7158e41a0754abb8e24dcd647633fbf3fe8..767c13a357d079b06848535850e9423b3524141f 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -79,10 +79,12 @@ public class DoorBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoorBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) ? (neighborState.is((Block) this) && neighborState.getValue(DoorBlock.HALF) != blockpropertydoubleblockhalf ? (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(DoorBlock.FACING, (Direction) neighborState.getValue(DoorBlock.FACING))).setValue(DoorBlock.OPEN, (Boolean) neighborState.getValue(DoorBlock.OPEN))).setValue(DoorBlock.HINGE, (DoorHingeSide) neighborState.getValue(DoorBlock.HINGE))).setValue(DoorBlock.POWERED, (Boolean) neighborState.getValue(DoorBlock.POWERED)) : Blocks.AIR.defaultBlockState()) : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
@@ -220,11 +222,13 @@ public class DoorBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is((Block) this);
-    }
+        });
+        }
 
     private void playSound(@Nullable Entity entity, Level world, BlockPos pos, boolean open) {
         world.playSound(entity, pos, open ? this.type.doorOpen() : this.type.doorClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index 030b38d5d5d2578d6ef482a239ef58787efa3b08..c9b823f5805ac163e2714336903be2fda99054db 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -32,10 +32,12 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoublePlantBlock.HALF);
 
         return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) && (!neighborState.is((Block) this) || neighborState.getValue(DoublePlantBlock.HALF) == blockpropertydoubleblockhalf) ? Blocks.AIR.defaultBlockState() : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -55,6 +57,7 @@ public class DoublePlantBlock extends BushBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(DoublePlantBlock.HALF) != DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -62,6 +65,7 @@ public class DoublePlantBlock extends BushBlock {
 
             return iblockdata1.is((Block) this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
         }
+        });
     }
 
     public static void placeAt(LevelAccessor world, BlockState state, BlockPos pos, int flags) {
diff --git a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
index 7385e91f32f070e86a4e0fd3d214f55d832c7979..c5a68e294f6fb031e9e897a1f41b930ca936de72 100644
--- a/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EnderChestBlock.java
@@ -145,11 +145,13 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
@@ -159,6 +161,7 @@ public class EnderChestBlock extends AbstractChestBlock<EnderChestBlockEntity> i
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (blockEntity instanceof EnderChestBlockEntity) {
             ((EnderChestBlockEntity)blockEntity).recheckOpen();
diff --git a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
index 9d889080be6d5b4b679fa9a2bd46ad8fd2ad1e77..83947b238bc909c517cf04761d9bd4df95d211a7 100644
--- a/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FaceAttachedHorizontalDirectionalBlock.java
@@ -21,8 +21,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canAttach(world, pos, getConnectedDirection(state).getOpposite());
-    }
+        });
+        }
 
     public static boolean canAttach(LevelReader world, BlockPos pos, Direction direction) {
         BlockPos blockPos = pos.relative(direction);
@@ -50,8 +52,10 @@ public class FaceAttachedHorizontalDirectionalBlock extends HorizontalDirectiona
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     protected static Direction getConnectedDirection(BlockState state) {
         switch ((AttachFace)state.getValue(FACE)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FallingBlock.java b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
index 631ac128aebcd6388482adb3b1f03673281eaf95..d0d79daf5678bef5a7e6dcfc15da11b6aceec3bc 100644
--- a/src/main/java/net/minecraft/world/level/block/FallingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
@@ -27,12 +27,15 @@ public class FallingBlock extends Block implements Fallable {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        world.scheduleTick(pos, this, this.getDelayAfterPlace());
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            world.scheduleTick(pos, this, this.getDelayAfterPlace());
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (isFree(world.getBlockState(pos.below())) && pos.getY() >= world.getMinBuildHeight()) {
             FallingBlockEntity fallingBlockEntity = FallingBlockEntity.fall(world, pos, state);
             this.falling(fallingBlockEntity);
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 5946f06f63b5694034bd027984a4925b0831d439..f50153a58b14d8afe80e2f3dd0b1da28ee0bc79d 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -45,19 +45,23 @@ public class FarmBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.above());
 
         return !iblockdata1.isSolid() || iblockdata1.getBlock() instanceof FenceGateBlock || iblockdata1.getBlock() instanceof MovingPistonBlock;
-    }
+        });
+        }
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
@@ -76,6 +80,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             FarmBlock.turnToDirt((Entity) null, state, world, pos);
         }
@@ -84,6 +89,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceBlock.java b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
index b7b8c9ca03cf4aa8b8e2cf60d15d627769e82ffa..677380a21ea09281c50ed79bd082d9a0f818045f 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceBlock.java
@@ -86,12 +86,15 @@ public class FenceBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis()
+                            .getPlane() == Direction.Plane.HORIZONTAL ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.connectsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite()), direction.getOpposite()))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index baaf648f65042a9c6bf41eaba595dce2aa6bb187..882a34319c966d1c7ea9b162ca13a8fb34551bdd 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -57,6 +57,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
         if (((Direction) state.getValue(FenceGateBlock.FACING)).getClockWise().getAxis() != enumdirection_enumaxis) {
@@ -66,6 +67,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
             return (BlockState) state.setValue(FenceGateBlock.IN_WALL, flag);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 4002e0fffb60556e7af1aeff71b4be244f02b0f5..8c439e4c25481cebad93d3c68974bd5146d2696d 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -101,6 +101,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         // CraftBukkit start
         if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
@@ -120,6 +121,7 @@ public class FireBlock extends BaseFireBlock {
         }
         return this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -158,13 +160,16 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
 
         return world.getBlockState(blockposition1).isFaceSturdy(world, blockposition1, Direction.UP) || this.isValidFireLocation(world, pos);
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world)); // Paper
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
diff --git a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
index db05c1ea847d60ad45d33cd798cb34ad3f5cfd75..24d73df6f8c67a8576145fe93b9babbeca34a6fc 100644
--- a/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -107,8 +107,10 @@ public class FlowerPotBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     public Block getContent() {
         return this.content;
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index bebcdc70c4cb01764428836fff76f03b94f2eae8..cd577af4bbf8b6a1f89522db390c7d6209d1365a 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -43,8 +43,10 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return mayPlaceOn(world, pos.below());
-    }
+        });
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -57,11 +59,14 @@ public class FrogspawnBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.canSurvive(state, world, pos)) {
             this.destroyBlock(world, pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index a3af96b2518b41f370d09cfda26dc589b9ee977b..e9549800b45c94a4fc858ca16f8cc9cc24d4d912 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -27,11 +27,13 @@ public class FrostedIceBlock extends IceBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!world.paperConfig().environment.frostedIce.enabled) return; // Paper - add ability to disable frosted ice
         if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
diff --git a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
index a061fec641c5c5fabf24a41ca4eb0ab0cb233c70..dbd94a1bc6eaca1d07eafcb8c78ffeb42dc9a381 100644
--- a/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GlowLichenBlock.java
@@ -42,11 +42,13 @@ public class GlowLichenBlock extends MultifaceBlock implements BonemealableBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
index c6a5d917616ef57c9ea949acae20db045bb4407b..42b0facd05a44f90b605aa9a1904c69c265b7e1e 100644
--- a/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrindstoneBlock.java
@@ -145,8 +145,10 @@ public class GrindstoneBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return true;
-    }
+        });
+        }
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
index bac57e5234182315a66c9726490a233cb9d99181..24f457a056ede7dbd250d2e0be0ba880c1708f03 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBlock.java
@@ -39,6 +39,7 @@ public abstract class GrowingPlantBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.relative(this.growthDirection.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         if (!this.canAttachTo(blockState)) {
@@ -46,10 +47,12 @@ public abstract class GrowingPlantBlock extends Block {
         } else {
             return blockState.is(this.getHeadBlock()) || blockState.is(this.getBodyBlock()) || blockState.isFaceSturdy(world, blockPos, this.growthDirection);
         }
-    }
+        });
+        }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
index fa22fb66c6484ba644620b0d98f80c5354200e34..dc59f02e7a460e36f5a1265163508db4608c5617 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantBodyBlock.java
@@ -28,20 +28,22 @@ public abstract class GrowingPlantBodyBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, this, 1);
-        }
-
-        GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
-        if (direction == this.growthDirection && !neighborState.is(this) && !neighborState.is(growingPlantHeadBlock)) {
-            return this.updateHeadAfterConvertedFromBody(state, growingPlantHeadBlock.getStateForPlacement(world));
-        } else {
-            if (this.scheduleFluidTicks) {
-                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
+                world.scheduleTick(pos, this, 1);
             }
 
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+            GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
+            if (direction == this.growthDirection && !neighborState.is(this) && !neighborState.is(growingPlantHeadBlock)) {
+                return this.updateHeadAfterConvertedFromBody(state, growingPlantHeadBlock.getStateForPlacement(world));
+            } else {
+                if (this.scheduleFluidTicks) {
+                    world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+                }
+
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index b325fdec8eb99ce57152a5c0fefa5059685276e4..fd68df9466ce54bd51c0e7af5b6abada234edbe3 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -40,6 +40,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         // Spigot start
         int modifier;
         if (this == Blocks.KELP) {
@@ -86,6 +87,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
@@ -99,6 +101,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
index 664ff099fd6f44b4bc2e23d06afe8006931f1aa6..22cdd70421993db7bff45468f459e13d55c9413a 100644
--- a/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HangingRootsBlock.java
@@ -50,10 +50,12 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.above();
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, Direction.DOWN);
-    }
+        });
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -62,6 +64,7 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && !this.canSurvive(state, world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -71,5 +74,6 @@ public class HangingRootsBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
index 1dd44eb0ab977093660e8fe6f49338e7f5ef7b28..13f88c9dbe0d0af0b76595863dff21703998d7c1 100644
--- a/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HugeMushroomBlock.java
@@ -35,9 +35,11 @@ public class HugeMushroomBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableMushroomBlockUpdates) return state; // Paper - add option to disable block updates
         return neighborState.is(this) ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(false)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index 04089e6f7d6e3d532b00585870283922b6be5246..cba69f8fe89406b03536806e179b46cb97fc1308 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -49,6 +49,7 @@ public class IceBlock extends HalfTransparentBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
             this.melt(state, world, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
index 83352a3909e892e35f96adea092a8c399ad98463..064b346fced7357d6f88ddc65e7f80e96b187452 100644
--- a/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IronBarsBlock.java
@@ -39,12 +39,15 @@ public class IronBarsBlock extends CrossCollisionBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return direction.getAxis().isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+            return direction.getAxis()
+                            .isHorizontal() ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.attachsTo(neighborState, neighborState.isFaceSturdy(world, neighborPos, direction.getOpposite())))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
+        }
 
     @Override
     public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/LadderBlock.java b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
index 6bcc83245e8046518921b82d948d45900ae0c8db..77a1e8da5465e19b9c4f650a4303c980618e1584 100644
--- a/src/main/java/net/minecraft/world/level/block/LadderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
@@ -54,12 +54,15 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = state.getValue(FACING);
         return this.canAttachTo(world, pos.relative(direction.getOpposite()), direction);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -69,6 +72,7 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/LanternBlock.java b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
index da143e1d162855e99e7c1bc8db55a8c217f3a3dc..4eed89beaa18f3933e8470a36a724e1a068fa2b9 100644
--- a/src/main/java/net/minecraft/world/level/block/LanternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LanternBlock.java
@@ -59,8 +59,10 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction direction = getConnectedDirection(state).getOpposite();
         return Block.canSupportCenter(world, pos.relative(direction), direction.getOpposite());
+        });
     }
 
     protected static Direction getConnectedDirection(BlockState state) {
@@ -69,12 +71,14 @@ public class LanternBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return getConnectedDirection(state).getOpposite() == direction && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index ebee1dfdb1d75381de847834262a66b45fd9f0ce..d87ea95580bc88cc5bd8c931a73d3ea6d16f5dfe 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -50,6 +50,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.decaying(state)) {
             // CraftBukkit start
             LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
@@ -71,6 +72,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, LeavesBlock.updateDistance(state, world, pos), 3);
     }
 
@@ -81,6 +83,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -92,6 +95,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static BlockState updateDistance(BlockState state, LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 2da67bd990b3f3762dfe089bf543cebac66378db..bb2d89a96a4befbaddb90b3c0b007fae72e1a347 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -191,6 +191,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         LecternBlock.changePowered(world, pos, state, false);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LightBlock.java b/src/main/java/net/minecraft/world/level/block/LightBlock.java
index 6eec44c484763f877aece6d9676ffc166bc10395..d71ef3b211c6d322533f80b0b08c93b73342b64e 100644
--- a/src/main/java/net/minecraft/world/level/block/LightBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightBlock.java
@@ -76,11 +76,13 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index da3b301a42a93c891d083a6e02d1be8ed35adf1d..ee3af0e1b34843adb920b55c00415f220c47a368 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -59,11 +59,13 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
+                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
@@ -106,6 +108,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
         this.updateNeighbours(state, world, pos);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 4a1830f85f47014da63e4584f411d13f0f0cd8b3..16b05ab57d5f42e7aaa23aff43b4989620d6e992 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -65,6 +65,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         state.getFluidState().randomTick(world, pos, random);
     }
 
@@ -135,11 +136,13 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getFluidState().isSource() || neighborState.getFluidState().isSource()) {
             world.scheduleTick(pos, state.getFluidState().getType(), this.fluid.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
index 1b766045687e4dcded5cbcc50b746c55b9a34e22..525f2c8ea60775a9ef841455d7de8ecd590d5e91 100644
--- a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
@@ -22,6 +22,7 @@ public class MagmaBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
             entity.hurt(world.damageSources().hotFloor(), 1.0F);
@@ -33,20 +34,24 @@ public class MagmaBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
             world.scheduleTick(pos, (Block) this, 20);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         world.scheduleTick(pos, (Block) this, 20);
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onPlaceCallback(state, world, pos, oldState, notify); // MCCLab - Add Block behaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index cf240750aecc57d287efc986b471e66a860850ee..6c827bf6d4e47483f89b68857005740850a4814c 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -69,17 +69,21 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return isHanging(state) ? world.getBlockState(pos.above()).is(Blocks.MANGROVE_LEAVES) : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction == Direction.UP && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public FluidState getFluidState(BlockState state) {
@@ -88,6 +92,7 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!isHanging(state)) {
             if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper
                 this.advanceTree(world, pos, state, random);
diff --git a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
index 7fc9ce525c32d32c911c3a027baff37ce93d9bcd..f344c531212f3124af18131e9bd46f47d973b0dc 100644
--- a/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangroveRootsBlock.java
@@ -36,11 +36,13 @@ public class MangroveRootsBlock extends Block implements SimpleWaterloggedBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
index 51103a88432275b2e5d4351430fea022dbca34de..e130e6c4919c8784a3835b5ebec85e67fc6857d0 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceBlock.java
@@ -114,12 +114,14 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!hasAnyFace(state)) {
             return Blocks.AIR.defaultBlockState();
         } else {
             return hasFace(state, direction) && !canAttachTo(world, direction, neighborPos, neighborState) ? removeFace(state, getFaceProperty(direction)) : state;
         }
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
@@ -128,6 +130,7 @@ public abstract class MultifaceBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         boolean bl = false;
 
         for(Direction direction : DIRECTIONS) {
@@ -142,6 +145,7 @@ public abstract class MultifaceBlock extends Block {
         }
 
         return bl;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 302c5a6401facf192677b89cc0e9190bb35b1229..747a2ec9a816b93783303f34cf23440fda898892 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -39,6 +39,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = 5;
             boolean flag = true;
@@ -80,11 +81,13 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return iblockdata1.is(BlockTags.MUSHROOM_GROW_BLOCK) ? true : world.getRawBrightness(pos, 0) < 13 && this.mayPlaceOn(iblockdata1, world, blockposition1);
-    }
+        });
+        }
 
     public boolean growMushroom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
         Optional<? extends Holder<ConfiguredFeature<?, ?>>> optional = world.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(this.feature);
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index a6ab0d0defc05e56a91084c49897059670a1324b..8cb1ef471fd262413cd036daa40db6261b373475 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -52,6 +52,7 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.dimensionType().natural() && world.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
             while (world.getBlockState(pos).is((Block) this)) {
                 pos = pos.below();
@@ -73,12 +74,14 @@ public class NetherPortalBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
         Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) state.getValue(NetherPortalBlock.AXIS);
         boolean flag = enumdirection_enumaxis1 != enumdirection_enumaxis && enumdirection_enumaxis.isHorizontal();
 
         return !flag && !neighborState.is((Block) this) && !(new PortalShape(world, pos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index e55720c4d2fbdf6aae526910e87a67c29cf906fd..3d0c1031ced4175df50acf336294296dc5b56d30 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -42,6 +42,7 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index e46d84750bdd7c940f400efda226e12a3fdc3848..4c3391b86f27f938db8941473301d306187f3e88 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -64,11 +64,13 @@ public class NoteBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return state; // Paper - prevent noteblock instrument from updating
         boolean flag = direction.getAxis() == Direction.Axis.Y;
 
         return flag ? this.setInstrument(world, pos, state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index 47a3a9e0f0ba4f8a00828874e73d501d18f0ae1c..0e659a4c08b4722d6c186b031ae3c2611153e030 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -32,6 +32,7 @@ public class NyliumBlock extends Block implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!NyliumBlock.canBeNylium(state, world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.NETHERRACK.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 7b45d6b9a005036ca5051d089a7be792eb87012f..8dbd435b08bbdb6bf159b9703a8ebdc6dbfa8ff5 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -41,6 +41,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(ObserverBlock.POWERED)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
@@ -63,11 +64,13 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(ObserverBlock.FACING) == direction && !(Boolean) state.getValue(ObserverBlock.POWERED)) {
             this.startSignal(world, pos);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private void startSignal(LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 1641453fd17938bc8fcdba7f89a0515ebeef20c5..1b0aafa82431c50ace3051c08a202e13347776bc 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -62,17 +62,21 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (isDouble(state.getValue(AGE))) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
             return state.canSurvive(world, pos) ? state : Blocks.AIR.defaultBlockState();
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return isLower(state) && !sufficientLight(world, pos) ? false : super.canSurvive(state, world, pos);
-    }
+        });
+        }
 
     @Override
     protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
@@ -111,6 +115,7 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper
         if (bl) {
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index cd943997f11f5ea5c600fdc6db96043fb0fa713c..aef0a5db072b6ffa2f7616621302048319929d86 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -90,11 +90,14 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -121,6 +124,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                 return (BlockState) state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
             }
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
@@ -167,6 +171,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (PointedDripstoneBlock.isStalagmite(state) && !this.canSurvive(state, world, pos)) {
             world.destroyBlock(pos, true);
         } else {
@@ -177,6 +182,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         PointedDripstoneBlock.maybeTransferFluid(state, world, pos, random.nextFloat());
         if (random.nextFloat() < 0.011377778F && PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
             PointedDripstoneBlock.growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 06760ff3d20bcfdc30f3f3ee65bc2a0d12d28aff..297ef7a8106c57d8854954ce652a33dd6a518397 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -42,6 +42,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             // CraftBukkit start
             if (entity instanceof Player) {
@@ -95,6 +96,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, false)).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 2b054439b7a763d5a3fbb5dbfe197cb9a9a3525c..6c55620585e19c738ba0cf3d63b9bafaebcb721d 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -166,6 +166,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return !this.canSurviveOn(world, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : state;
         } else if (direction == Direction.UP) {
@@ -175,6 +176,7 @@ public class RedStoneWireBlock extends Block {
 
             return blockpropertyredstoneside.isConnected() == ((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction))).isConnected() && !RedStoneWireBlock.isCross(state) ? (BlockState) state.setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside) : this.getConnectionState(world, (BlockState) ((BlockState) this.crossState.setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER))).setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside), pos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static boolean isCross(BlockState state) {
@@ -242,10 +244,12 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return this.canSurviveOn(world, blockposition1, iblockdata1);
+        });
     }
 
     private boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 64136745aad7ddbfdfbb8040832a58422d24e8ae..95c7f47fe50865fdb082ec87cb1773464e71c012 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -50,6 +50,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index c91535f6c0bbc870fad7e04b9d341783cfcbbd63..ad05ae1e850130c2ca5567b9091735ee1b7813c6 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -72,6 +72,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         boolean flag = this.hasNeighborSignal(world, pos, state);
         // Paper start
         java.util.ArrayDeque<RedstoneTorchBlock.Toggle> redstoneUpdateInfos = world.redstoneUpdateInfos;
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
index e5a4525ae64454ec1400de1e4e7945b2caa675f8..d57938d5836210e0d490185ba14a437fee8c5190 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneWallTorchBlock.java
@@ -38,13 +38,17 @@ public class RedstoneWallTorchBlock extends RedstoneTorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Blocks.WALL_TORCH.canSurvive(state, world, pos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return Blocks.WALL_TORCH.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
index 5121603ab0fe02dafd3893e3ef7c7298d41e4f81..bc256f3c792336ced2ae0d236222202d4773ef01 100644
--- a/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RepeaterBlock.java
@@ -51,11 +51,14 @@ public class RepeaterBlock extends DiodeBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
-            return Blocks.AIR.defaultBlockState();
-        } else {
-            return !world.isClientSide() && direction.getAxis() != state.getValue(FACING).getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.DOWN && !this.canSurviveOn(world, neighborPos, neighborState)) {
+                return Blocks.AIR.defaultBlockState();
+            } else {
+                return !world.isClientSide() && direction.getAxis() != state.getValue(FACING)
+                                                                            .getAxis() ? state.setValue(LOCKED, Boolean.valueOf(this.isLocked(world, pos, state))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 53ac4e618fec3fe384d8a106c521f3eace0b5b35..395791ee65b091d9f3dadf860fc4fa7220bee9be 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -42,10 +42,10 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.advanceTree(world, pos, state, random);
         }
-
     }
 
     public void advanceTree(ServerLevel world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index e9358522e526505d5c200e19b193bbcf5ee10826..7b4d78235f81614f7293f0916a8f54c98bd52bc3 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -80,6 +80,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
@@ -89,10 +90,12 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         }
 
         return state;
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = ScaffoldingBlock.getDistance(world, pos);
         BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, pos, i));
 
@@ -110,7 +113,9 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return ScaffoldingBlock.getDistance(world, pos) < 7;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 031398e6afeec4c9db64a25fc0f55e5a5baa0990..561fb39a43beb6c29ae6f472c27f8511f89d13b8 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -35,6 +35,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, false), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 2ccbf171089ed4d166428445fdfdf1262c1dd65d..dc042c134dcd92873c4d190f6aad2837c0020c2c 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -83,6 +83,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
             if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
                 world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
@@ -98,6 +99,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!world.isClientSide() && SculkSensorBlock.canActivate(state) && entity.getType() != EntityType.WARDEN) {
             // CraftBukkit start
             org.bukkit.event.Cancellable cancellable;
@@ -152,11 +154,13 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     private static void updateNeighbours(Level world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index 02d01eabb9606ae8c3b76ad9fa4bb9a525e247b1..97a62a66165fadbc2a3b64748dac3d84c3d7948b 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -51,6 +51,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
             ServerPlayer entityplayer = SculkShriekerBlockEntity.tryGetPlayer(entity);
@@ -83,6 +84,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
             world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, false), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
@@ -120,11 +122,13 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index 6142ea7b5d46a30b1a923a54410ca9de7cceb2bb..5971701f3780fc30c9f4848e5a079ccad77ea898 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -174,11 +174,13 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
index 51c464065e506df3ad16d4118b619fed8cf1b303..188c066fe82e8453a431fa217a06c5ead04e9049 100644
--- a/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeaPickleBlock.java
@@ -61,12 +61,15 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockPos blockPos = pos.below();
         return this.mayPlaceOn(world.getBlockState(blockPos), world, blockPos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
@@ -76,6 +79,7 @@ public class SeaPickleBlock extends BushBlock implements BonemealableBlock, Simp
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
index c403ac42e54b92128cc4bd8ce8dd42875271897f..cd34e1e2fdf99b23df6124f542aef75e50ea4899 100644
--- a/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SeagrassBlock.java
@@ -48,12 +48,14 @@ public class SeagrassBlock extends BushBlock implements BonemealableBlock, Liqui
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        if (!blockState.isAir()) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            BlockState blockState = super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            if (!blockState.isAir()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        return blockState;
+            return blockState;
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SignBlock.java b/src/main/java/net/minecraft/world/level/block/SignBlock.java
index 614777d15bcf4141a89d0a0f7bd880526c668ffd..a05bbf320ee9ad57d5d20f54eb9cc9328a19c824 100644
--- a/src/main/java/net/minecraft/world/level/block/SignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SignBlock.java
@@ -52,11 +52,13 @@ public abstract class SignBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(SignBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index 12013498de68f9176e172c568d527819026da14e..f0b62ac56ceabf6b688c641ec57ed5a344527940 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -45,6 +45,7 @@ public class SlimeBlock extends HalfTransparentBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         double d = Math.abs(entity.getDeltaMovement().y);
         if (d < 0.1D && !entity.isSteppingCarefully()) {
             double e = 0.4D + d * 0.2D;
diff --git a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
index ff1121e12e4d74a0c23dca4ee9d741e6d4d7d305..9e4a9565c6999e29963df1a1f642ad1795006733 100644
--- a/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SmallDripleafBlock.java
@@ -70,6 +70,7 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             return super.canSurvive(state, world, pos);
         } else {
@@ -77,15 +78,18 @@ public class SmallDripleafBlock extends DoublePlantBlock implements Bonemealable
             BlockState blockState = world.getBlockState(blockPos);
             return this.mayPlaceOn(blockState, world, blockPos);
         }
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
index 16c5be04658a66ff94f2aad8782e34f450e9a729..cb063f9ba707a3c28068bf8f734a940ba5174047 100644
--- a/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnifferEggBlock.java
@@ -64,6 +64,7 @@ public class SnifferEggBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!this.isReadyToHatch(state)) {
             // Paper start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(HATCH, Integer.valueOf(this.getHatchLevel(state) + 1)), 2)) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 14e00c7feb1c051d56a3d27cd00dcef072dd771a..f4fd6d44306bc9dd126fe4554a472f67df135014 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -79,18 +79,23 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
         return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 8);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
index f95284fcf5b9c922227670b9357523eba9b7ffcc..1fd0206d77c8f58dc1651bba9e60539036d51e26 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowyDirtBlock.java
@@ -21,7 +21,9 @@ public class SnowyDirtBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction == Direction.UP ? state.setValue(SNOWY, Boolean.valueOf(isSnowySetting(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
index 853890258cbe12221b588ff37a3a28fdf3f55520..235218bc7110c953ad769dbab09a944186e3a92b 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulFireBlock.java
@@ -15,12 +15,16 @@ public class SoulFireBlock extends BaseFireBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return this.canSurvive(state, world, pos) ? this.defaultBlockState() : Blocks.AIR.defaultBlockState();
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSurviveOnBlock(world.getBlockState(pos.below()));
+        });
     }
 
     public static boolean canSurviveOnBlock(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
index 1f228adaa95e03bede7865cefe1bbb5127fe4cc9..c228d64bf7c0906b0542ff5998241d2a09c09713 100644
--- a/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SoulSandBlock.java
@@ -39,16 +39,19 @@ public class SoulSandBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         BubbleColumnBlock.updateColumn(world, pos.above(), state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
-            world.scheduleTick(pos, this, 20);
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
+                world.scheduleTick(pos, this, 20);
+            }
 
-        return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
index 46fffca9563f7d665df54a3d9cabed1dda67ee6e..7c764d53a66e113c6b0e0fb3836f0164bace6ea3 100644
--- a/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SporeBlossomBlock.java
@@ -26,13 +26,17 @@ public class SporeBlossomBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return Block.canSupportCenter(world, pos.above(), Direction.DOWN) && !world.isWaterAt(pos);
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.UP && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index 9bbb9f8e917288bb0d11661a1399a05631ebcce0..2a6a34f6078f6556db62a2dc1f3b2d872fa72ae1 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -51,6 +51,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this instanceof GrassBlock && world.paperConfig().tickRates.grassSpread != 1 && (world.paperConfig().tickRates.grassSpread < 1 || (MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.grassSpread != 0)) { return; } // Paper
         // Paper start
         net.minecraft.world.level.chunk.ChunkAccess cachedBlockChunk = world.getChunkIfLoaded(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/StairBlock.java b/src/main/java/net/minecraft/world/level/block/StairBlock.java
index 827713a332baa6d280cd61d40faf8f6243b3b08c..d8d46ec89b1ea8c4fc75ab3e10ea4ec8ef3aca11 100644
--- a/src/main/java/net/minecraft/world/level/block/StairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StairBlock.java
@@ -139,6 +139,7 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         this.base.stepOn(world, pos, state, entity);
     }
 
@@ -149,11 +150,13 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.randomTick(state, world, pos, random);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.base.tick(state, world, pos, random);
     }
 
@@ -178,12 +181,14 @@ public class StairBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (state.getValue(WATERLOGGED)) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return direction.getAxis().isHorizontal() ? state.setValue(SHAPE, getStairsShape(state, world, pos)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     private static StairsShape getStairsShape(BlockState state, BlockGetter world, BlockPos pos) {
         Direction direction = state.getValue(FACING);
diff --git a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
index 51dc1a0e572c7a1bdef99d7cf69ebe699702cc49..34cf84adc58559f0f559ec1ed468c459a31bdd36 100644
--- a/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StandingSignBlock.java
@@ -25,7 +25,9 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.below()).isSolid();
+        });
     }
 
     @Override
@@ -36,8 +38,10 @@ public class StandingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 0d9be3b28ba4957c3f4da5455283fca903836c91..3b8eaf9ebcb0aef1ea5dc1ffe092a0bbca37212c 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -50,6 +50,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c3f500580d257e1397f2eb7c47b063a6fe6bb405..4e442b77a2c69283f7332b554b84b55f9c47693d 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -37,6 +37,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (!state.canSurvive(world, pos)) {
             world.destroyBlock(pos, true);
         }
@@ -45,6 +46,7 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.isEmptyBlock(pos.above())) {
             int i;
 
@@ -69,37 +71,41 @@ public class SugarCaneBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (!state.canSurvive(world, pos)) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState iblockdata1 = world.getBlockState(pos.below());
-
-        if (iblockdata1.is((Block) this)) {
-            return true;
-        } else {
-            if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
-                BlockPos blockposition1 = pos.below();
-                Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    Direction enumdirection = (Direction) iterator.next();
-                    BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
-                    FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
-
-                    if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
-                        return true;
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState iblockdata1 = world.getBlockState(pos.below());
+
+            if (iblockdata1.is((Block) this)) {
+                return true;
+            } else {
+                if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
+                    BlockPos blockposition1 = pos.below();
+                    Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
+
+                    while (iterator.hasNext()) {
+                        Direction enumdirection = (Direction) iterator.next();
+                        BlockState iblockdata2 = world.getBlockState(blockposition1.relative(enumdirection));
+                        FluidState fluid = world.getFluidState(blockposition1.relative(enumdirection));
+
+                        if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
+                            return true;
+                        }
                     }
                 }
-            }
 
-            return false;
-        }
+                return false;
+            }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 34eb7ba1adb51e394bf46a6f643db3529626d9ec..e7836fd3e1a725f9d2084131c18833f4e144d6f2 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -64,6 +64,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
index ecc58329ca169a8f3ae813ddcbc58a2e28fd837c..bb6c356777b337cfadb23c644e9d5d95d8c295ef 100644
--- a/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TallSeagrassBlock.java
@@ -60,6 +60,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
             BlockState blockState = world.getBlockState(pos.below());
             return blockState.is(this) && blockState.getValue(HALF) == DoubleBlockHalf.LOWER;
@@ -67,6 +68,7 @@ public class TallSeagrassBlock extends DoublePlantBlock implements LiquidBlockCo
             FluidState fluidState = world.getFluidState(pos);
             return super.canSurvive(state, world, pos) && fluidState.is(FluidTags.WATER) && fluidState.getAmount() == 8;
         }
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 69eaf1341d282c4783dab84533ea2c053deed529..590160bb7b1b7263a264ac226d63515313218457 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -96,6 +96,7 @@ public class TargetBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (state.getValue(OUTPUT_POWER) != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TorchBlock.java b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
index 6f85a193e7661cfa61ad169aae1477bc07c9a9ff..e90036f3ddc65aa2acdd4d9fc0e3c9cfd47ec6c0 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchBlock.java
@@ -31,12 +31,16 @@ public class TorchBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == Direction.DOWN && !this.canSurvive(state, world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return canSupportCenter(world, pos.below(), Direction.UP);
+        });
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 092759184adbf27ce942a148169e60d3a28c2cc7..a073c21273353e68090485e1dffe04385f5e3f7a 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -58,6 +58,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (random.nextInt(3) != 0) {
             super.randomTick(state, world, pos, random);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index b9e3c9cd709d42bced85436720ccc7b9c7e49552..a6a97dc4a6bfd1f2324151fb72b50d5127bb8cad 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -188,10 +188,12 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index cb2ff8d94308c637a498d2737f86f6af4c9c1b83..2e867bd28e7c66ade2358810aceb12798e051ef2 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -62,9 +62,11 @@ public class TripWireBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
         return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
@@ -144,6 +146,7 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
         if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
             this.checkPressed(world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 004dce26ff073f1de52a84cd425c4f60fdab5e50..e0bdb724c6e4ebbaf12e7ae5dfec0f2fbd4cbfc3 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -64,17 +64,21 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         return enumdirection.getAxis().isHorizontal() && iblockdata1.isFaceSturdy(world, blockposition1, enumdirection);
-    }
+        });
+        }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(TripWireHookBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Nullable
     @Override
@@ -207,6 +211,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 07157822659288e76b2fba34db8d5d566506f33b..20cd165dde3e1e472cb5c8e9aeb2b6bc688da6fa 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -51,6 +51,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isStepOnLogicReplaced(world, pos, state, entity)) return; // MCCLab start - Adding BlockBehaviour
         if (!entity.isSteppingCarefully()) {
             this.destroyEgg(world, state, pos, entity, 100);
         }
@@ -105,6 +106,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
             int i = (Integer) state.getValue(TurtleEggBlock.HATCH);
 
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 698ef6ee1c8d08bb38e2775804c1333222b0d73d..2198366aa0c28987d2160c4ebdaa81d5bbcc71f7 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -87,7 +87,9 @@ public class VineBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return this.hasFaces(this.getUpdatedState(state, world, pos));
+        });
     }
 
     private boolean hasFaces(BlockState state) {
@@ -166,6 +168,7 @@ public class VineBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         if (direction == Direction.DOWN) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
@@ -173,10 +176,12 @@ public class VineBlock extends Block {
 
             return !this.hasFaces(iblockdata2) ? Blocks.AIR.defaultBlockState() : iblockdata2;
         }
+        }); // MCCLab - Add BlockBehaviour
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
             if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
                 Direction enumdirection = Direction.getRandom(random);
diff --git a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
index e6719fc04011b9d9378eef128701a289b4507a1f..926df1923a6308f1155960f04e506ef061ccfbaa 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBannerBlock.java
@@ -33,13 +33,17 @@ public class WallBannerBlock extends AbstractBannerBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction == state.getValue(FACING).getOpposite() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallBlock.java b/src/main/java/net/minecraft/world/level/block/WallBlock.java
index d1d0fa66aa0c3e481b6d68fe36147040a730293f..cc867a4b879012679a86ab14946f429445309692 100644
--- a/src/main/java/net/minecraft/world/level/block/WallBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallBlock.java
@@ -149,15 +149,17 @@ public class WallBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
-        }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            if (state.getValue(WATERLOGGED)) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            }
 
-        if (direction == Direction.DOWN) {
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        } else {
-            return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
-        }
+            if (direction == Direction.DOWN) {
+                return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            } else {
+                return direction == Direction.UP ? this.topUpdate(world, state, neighborPos, neighborState) : this.sideUpdate(world, pos, state, neighborPos, neighborState, direction);
+            }
+        });
     }
 
     private static boolean isConnected(BlockState state, Property<WallSide> property) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
index ae232311f12c72ff62d3d18f25e3ebf46ce1ace2..9f08cf5f5ce076dd7ec68e40c89eb8aacca19d0d 100644
--- a/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallHangingSignBlock.java
@@ -131,8 +131,10 @@ public class WallHangingSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getAxis() == state.getValue(FACING).getClockWise().getAxis() && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
index 0065941d41830309a27eed7643b213b0215d395e..e663265fdb79817b565a9293825f3faff6a357d8 100644
--- a/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallSignBlock.java
@@ -45,7 +45,9 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
         return world.getBlockState(pos.relative(state.getValue(FACING).getOpposite())).isSolid();
+        });
     }
 
     @Nullable
@@ -72,8 +74,10 @@ public class WallSignBlock extends SignBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public float getYRotationDegrees(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
index 5f8d2d9e0763c50ec1ca3e06a71f7ecf35d4c46a..db5995ab0a4687cf55fbc3cd00399a0244c0d93f 100644
--- a/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WallTorchBlock.java
@@ -47,10 +47,12 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> { // MCClab start - Add Block behaviour
         Direction direction = state.getValue(FACING);
         BlockPos blockPos = pos.relative(direction.getOpposite());
         BlockState blockState = world.getBlockState(blockPos);
         return blockState.isFaceSturdy(world, blockPos, direction);
+        });
     }
 
     @Nullable
@@ -76,8 +78,10 @@ public class WallTorchBlock extends TorchBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
         return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : state;
-    }
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
index 05cccc33e7745eb3a905a804b318aaa6bd440d04..bd72a1d2b200e57603a5fd31dc05db969e43028c 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperFullBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperFullBlock extends Block implements WeatheringCopper
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
index 37d7fb85a05521e4acb6a79997b661c1895bb7ed..c80496748a5c484d254aef22e9cd32f5f78d523e 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperSlabBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperSlabBlock extends SlabBlock implements WeatheringCo
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
index 728a607bb28f10955397744970554efe297ea5ca..b08995c375631737b669d14b5198fed1bdda12e1 100644
--- a/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeatheringCopperStairBlock.java
@@ -16,6 +16,7 @@ public class WeatheringCopperStairBlock extends StairBlock implements Weathering
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.onRandomTick(state, world, pos, random);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index 6091e3c3adbcc92c9ca438c301a99f646e3cb549..e98a75a6b9028fa18dc1db341b8a4d43cb4f1a95 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -126,14 +126,18 @@ public class PistonHeadBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-    }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, () -> { // MCCLab - Add BlockBehaviour
+            return direction.getOpposite() == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        }); // MCCLab - Add BlockBehaviour
+        }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
-        return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
-    }
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, () -> {
+            BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
+            return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
+        });
+        }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e6a4a5898ffdcb2aa2bc01371a6d7dbc06d610ce..98f904b77fbe6558454e66e23ff8786b12723dfc 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -13,6 +13,7 @@ import java.util.function.Predicate;
 import java.util.function.ToIntFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -129,7 +130,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return state;
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.updateShape(state, direction, neighborState, world, pos, neighborPos, state); // MCCLab start - Add BlockBehaviour
     }
 
     /** @deprecated */
@@ -163,12 +164,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
-
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onRemoveCallback(state, world, pos, state, moved); // MCCLab - Add Block behaviour
     }
 
     /** @deprecated */
     @Deprecated
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+        de.verdox.mccreativelab.behaviour.BehaviourUtil.onUseCallback(state, world, pos, player, hand, hit); // MCClab - Add Block behaviour
         return InteractionResult.PASS;
     }
 
@@ -301,7 +303,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return true;
+        return de.verdox.mccreativelab.behaviour.BehaviourUtil.canSurvive(state, world, pos, true); // MCClab - Add Block behaviour
     }
 
     /** @deprecated */
@@ -349,12 +351,15 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Deprecated
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaRandomTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
         this.tick(state, world, pos, random);
     }
 
     /** @deprecated */
     @Deprecated
-    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
+    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if(de.verdox.mccreativelab.behaviour.BehaviourUtil.isVanillaTickReplaced(state, world, pos, random)) return; // MCCLab - Add custom Block behaviour
+    }
 
     /** @deprecated */
     @Deprecated
@@ -916,7 +921,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void initCache() {
             this.fluidState = ((Block) this.owner).getFluidState(this.asState());
-            this.isRandomlyTicking = ((Block) this.owner).isRandomlyTicking(this.asState());
+            this.isRandomlyTicking = de.verdox.mccreativelab.behaviour.BehaviourUtil.isRandomlyTicking(this.asState(), ((Block) this.owner).isRandomlyTicking(this.asState()));
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
@@ -1195,6 +1200,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void onPlace(Level world, BlockPos pos, BlockState state, boolean notify) {
             this.getBlock().onPlace(this.asState(), world, pos, state, notify);
+            de.verdox.mccreativelab.behaviour.BehaviourUtil.onPlaceCallback(this.asState(), world, pos, state, notify); // MCCLab - Add Block behaviour
         }
 
         public void onRemove(Level world, BlockPos pos, BlockState state, boolean moved) {
@@ -1296,6 +1302,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         @Nullable
         public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockEntityType<T> blockEntityType) {
+            //TODO: Enable / disable block entity ticking in BlockBehaviour
             return this.getBlock() instanceof EntityBlock ? ((EntityBlock) this.getBlock()).getTicker(world, this.asState(), blockEntityType) : null;
         }
 
@@ -1311,6 +1318,14 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // MCCLab start - Add BlockBehaviour
+        public final boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState){
+            if(world == null || x == -1 || z == -1 || blockState == null)
+                return this.isRandomlyTicking();
+            return de.verdox.mccreativelab.behaviour.BehaviourUtil.isRandomlyTicking(world, x, y,z,blockState, this.isRandomlyTicking());
+        }
+        // MCCLab end - Add BlockBehaviour
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index f0de72afad4bb571153436399386a6a8a70582a6..276a20d4a8603b0f0407720a324b4c6c87f788f5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -4,6 +4,8 @@ import java.util.function.Predicate;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeResolver;
 import net.minecraft.world.level.biome.Biomes;
@@ -28,6 +30,11 @@ public class LevelChunkSection {
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
     // Paper start - optimise collisions
     private int specialCollidingBlocks;
+    // MCCLab start - Add BlockBehaviour
+    private Level level;
+    private ChunkPos chunkPos;
+    private int chunkSectionY;
+    // MCCLab end - Add BlockBehaviour
 
     private void updateBlockCallback(final int x, final int y, final int z, final BlockState oldState, final BlockState newState) {
         if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(newState)) {
@@ -53,6 +60,11 @@ public class LevelChunkSection {
     // Paper start - Anti-Xray - Add parameters
     @Deprecated @io.papermc.paper.annotation.DoNotUse public LevelChunkSection(Registry<Biome> biomeRegistry) { this(biomeRegistry, null, null, 0); }
     public LevelChunkSection(Registry<Biome> biomeRegistry, net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, int chunkSectionY) {
+        // MCCLab start - Add BlockBehaviour
+        this.level = level;
+        this.chunkPos = chunkPos;
+        this.chunkSectionY = chunkSectionY;
+        // MCCLab end - Add BlockBehaviour
         // Paper end
         this.states = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, level == null || level.chunkPacketBlockController == null ? null : level.chunkPacketBlockController.getPresetBlockStates(level, chunkPos, chunkSectionY)); // Paper - Anti-Xray - Add preset block states
         this.biomes = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null); // Paper - Anti-Xray - Add preset biomes
@@ -87,12 +99,18 @@ public class LevelChunkSection {
             iblockdata1 = (BlockState) this.states.getAndSetUnchecked(x, y, z, state);
         }
 
+        // MCCLab start - Add BlockBehaviour
+        int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+        int globalY = chunkSectionY << 4 + y;
+        int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+        // MCCLab end - Add BlockBehaviour
+
         FluidState fluid = iblockdata1.getFluidState();
         FluidState fluid1 = state.getFluidState();
 
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
-            if (iblockdata1.isRandomlyTicking()) {
+            if (iblockdata1.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
@@ -106,7 +124,7 @@ public class LevelChunkSection {
 
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
-            if (state.isRandomlyTicking()) {
+            if (state.isRandomlyTicking(level, globalX, globalY, globalZ, state)) { // MCCLab start - Add BlockBehaviour
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
@@ -148,9 +166,20 @@ public class LevelChunkSection {
         this.states.forEachLocation((BlockState iblockdata, int i) -> {
             FluidState fluid = iblockdata.getFluidState();
 
+            // MCCLab start - Add BlockBehaviour
+            int sizedBitsOfBlockStatePalette = 4;
+            int x = i & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int z = (i >> sizedBitsOfBlockStatePalette) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+            int y = (i >> (sizedBitsOfBlockStatePalette * 2)) & ((1 << sizedBitsOfBlockStatePalette) - 1);
+
+            int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
+            int globalY = chunkSectionY << 4 + y;
+            int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
+            // MCCLab end - Add BlockBehaviour
+
             if (!iblockdata.isAir()) {
                 this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
-                if (iblockdata.isRandomlyTicking()) {
+                if (iblockdata.isRandomlyTicking(level, globalX, globalY, globalZ, iblockdata)) { // MCCLab start - Add BlockBehaviour
                     this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                     this.tickingList.add(i, iblockdata);
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fbbced3e47263c2cb24cb26681ea3098ec0bb4cc..ee5e901d71e0f4e266106e49f54078709271d8b5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1099,6 +1099,7 @@ public final class CraftServer implements Server {
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache();
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 29d24757b1f914eeb42b341f76f371d84472e33e..8825703faffdbcdc6d9db5acabfde1cb1f0e6097 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -5,6 +5,8 @@ import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
+import de.verdox.mccreativelab.light.LightEngineTracker;
+import de.verdox.mccreativelab.light.PaperLightEngineTracker;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -514,7 +516,9 @@ public class CraftWorld extends CraftRegionAccessor implements World {
                 chunksToRelight.add(new ChunkPos(chunkX, chunkZ));
             }
         }
-        serverChunkCache.getLightEngine().relight(chunksToRelight, pos -> {}, relit -> {});
+        LightEngineTracker lightEngineTracker = new PaperLightEngineTracker();
+        serverChunkCache.getLightEngine().relight(chunksToRelight, pos -> {}, relit -> {}, lightEngineTracker);
+        lightEngineTracker.stopTracking();
         return true;
         // Paper end
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e188bb3ba5d2ec28421947c0b66b25eecb569bfe..13becc37cbac396f164d66cbb2e22525988e1c9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -45,35 +45,7 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
 import net.minecraft.network.protocol.common.ClientboundResourcePackPacket;
 import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
-import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
-import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundClearTitlesPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
-import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
-import net.minecraft.network.protocol.game.ClientboundMapItemDataPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket;
-import net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundTabListPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.level.ChunkMap;
@@ -896,6 +868,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.getHandle().connection.send(packet);
     }
 
+    @Override
+    public void sendInventoryChange(@org.jetbrains.annotations.Nullable ItemStack stack, int slot) {
+        getHandle().connection.send(new ClientboundContainerSetSlotPacket(getHandle().inventoryMenu.containerId, getHandle().inventoryMenu.getStateId(), slot, CraftItemStack.asNMSCopy(stack)));
+    }
+
     @Override
     public void sendBlockChange(Location loc, BlockData block) {
         if (this.getHandle().connection == null) return;
