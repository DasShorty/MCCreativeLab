package de.verdox.mccreativelab;

import com.destroystokyo.paper.event.server.ServerTickEndEvent;
import de.verdox.mccreativelab.debug.*;
import de.verdox.mccreativelab.debug.vanilla.VillagerAI;
import de.verdox.mccreativelab.generator.resourcepack.ResourcePackMapper;
import de.verdox.mccreativelab.generator.resourcepack.types.rendered.ShaderRendered;
import de.verdox.mccreativelab.registry.CustomRegistry;
import de.verdox.mccreativelab.util.nbt.PersistentDataSaver;
import de.verdox.mccreativelab.util.player.fakeinv.FakeInventory;
import de.verdox.mccreativelab.world.block.customhardness.BlockBreakSpeedModifier;
import de.verdox.mccreativelab.world.block.customhardness.BlockBreakSpeedSettings;
import de.verdox.mccreativelab.event.MCCreativeLabReloadEvent;
import de.verdox.mccreativelab.features.Feature;
import de.verdox.mccreativelab.features.Features;
import de.verdox.mccreativelab.generator.AssetPath;
import de.verdox.mccreativelab.generator.ResourcePackFileHoster;
import de.verdox.mccreativelab.generator.resourcepack.CustomResourcePack;
import de.verdox.mccreativelab.generator.resourcepack.ResourcePackScanner;
import de.verdox.mccreativelab.generator.resourcepack.types.hud.renderer.HudRendererImpl;
import de.verdox.mccreativelab.generator.resourcepack.types.hud.renderer.HudRenderer;
import de.verdox.mccreativelab.world.block.replaced.ReplacedBlocks;
import de.verdox.mccreativelab.world.item.FakeItemRegistry;
import de.verdox.mccreativelab.world.item.fuel.FuelSettings;
import de.verdox.mccreativelab.features.legacy.LegacyFeatures;
import de.verdox.mccreativelab.world.sound.ReplacedSoundGroups;
import de.verdox.mccreativelab.world.block.*;
import org.bukkit.Bukkit;
import org.bukkit.PoiType;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.entity.Villager;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.function.BiConsumer;
import java.util.stream.Stream;

public class MCCreativeLabExtension extends JavaPlugin implements Listener {
    public static MCCreativeLabExtension getInstance() {
        return INSTANCE;
    }

    private static MCCreativeLabExtension INSTANCE;
    private static final FakeBlockRegistry FAKE_BLOCK_REGISTRY = new FakeBlockRegistry();
    private static final FakeItemRegistry FAKE_ITEM_REGISTRY = new FakeItemRegistry();
    private static final ResourcePackFileHoster resourcePackFileHoster = new ResourcePackFileHoster("127.0.0.1", 8080);
    private static final CustomResourcePack customResourcePack = new CustomResourcePack("MCCreativeLab", 18, "Generated by MCCreativeLab", AssetPath.buildPath("resourcePacks"));
    private static final HudRendererImpl hudRenderer = new HudRendererImpl();
    private static final FakeBlockStorage fakeBlockStorage = new FakeBlockStorage();
    private static final BlockBreakSpeedSettings blockBreakSpeedSettings = new BlockBreakSpeedSettings();
    private static final ReplacedSoundGroups replacedSoundGroups = new ReplacedSoundGroups();
    private static final LegacyFeatures legacyFeatures = new LegacyFeatures();
    private static final Features features = new Features();
    private FuelSettings fuelSettings;

    public static void needsServerSoftware() {
        if (!isServerSoftware())
            throw new IllegalStateException("This feature is not available without the MCCreativeLab Paper Fork");
    }

    public static boolean isServerSoftware() {
        return Bukkit.getServer().getName().equals("MCCreativeLab");
    }

    @Override
    public void onLoad() {
        if (isServerSoftware())
            Bukkit.getLogger().info("§eFound MCCreativeLab Server Software");
        else
            Bukkit.getLogger().info("§cConsider running MCCreativeLab Server Software");
        INSTANCE = this;
        fuelSettings = new FuelSettings();
        if (isServerSoftware()) {
            Debug.init();
            ReplacedBlocks.init();
        }
        ;
    }

    @Override
    public void onEnable() {
        VillagerAI.corePackageBuilder(PoiType.ARMORER, PoiType.ARMORER, 0.5f);
        VillagerAI.workPackageBuilder(Villager.Profession.FARMER, 0.5f);
        VillagerAI.playPackageBuilder(0.5f);
        VillagerAI.restPackageBuilder(0.5f);
        VillagerAI.meetPackageBuilder(0.5f);
        VillagerAI.idlePackageBuilder(0.5f);
        VillagerAI.panicPackageBuilder(0.5f);
        VillagerAI.prePreRaidPackageBuilder(0.5f);
        VillagerAI.raidPackageBuilder(0.5f);
        VillagerAI.hidePackageBuilder(0.5f);

        Bukkit.getPluginManager().registerEvents(this, this);
        if (isServerSoftware()) {
            Bukkit.getPluginManager().registerEvents(new FakeBlockCacheHandler(), this);
            Bukkit.getPluginManager().registerEvents(new FakeBlockListener(), this);
            Bukkit.getCommandMap().register("fakeblock", "mccreativelab", new FakeBlockCommand());
            Bukkit.getCommandMap().register("fakeitem", "mccreativelab", new FakeItemCommand());
        }

        Bukkit.getPluginManager().registerEvents(resourcePackFileHoster, this);
        Bukkit.getPluginManager().registerEvents(new Debug(), this);
        Bukkit.getPluginManager().registerEvents(new BlockBreakSpeedModifier(), this);
        Bukkit.getPluginManager().registerEvents(new FakeBlockSoundManager(), this);
        Bukkit.getPluginManager().registerEvents(new CustomBlockSounds(), this);
        Bukkit.getPluginManager().registerEvents(new PersistentDataSaver(), this);
        Bukkit.getPluginManager().registerEvents(new FakeInventory(), this);
        Bukkit.getPluginManager().registerEvents(fuelSettings, this);
        Bukkit.getPluginManager().registerEvents(FakeBlockRegistry.fakeBlockDamage, this);
        Bukkit.getCommandMap().register("debug", "mccreativelab", new DebugCommand());
        hudRenderer.start();
        registerResourcePackLookupCommands();
    }

    private void registerResourcePackLookupCommands() {
        ResourcePackMapper resourcePackMapper = MCCreativeLabExtension.getCustomResourcePack().getResourcePackMapper();
        registerRegistryLookupCommand("hud", resourcePackMapper.getHudsRegistry(), hudRenderer::getOrStartActiveHud);
        registerRegistryLookupCommand("gui", resourcePackMapper.getGuiRegistry(), (player, customGUIBuilder) -> customGUIBuilder.createMenuForPlayer(player));
        registerRegistryLookupCommand("menu", resourcePackMapper.getMenuRegistry(), (player, customMenu) -> customMenu.createMenuForPlayer(player));
    }

    private <T> void registerRegistryLookupCommand(String name, CustomRegistry<T> customRegistry, BiConsumer<Player, T> consumer) {
        Bukkit.getCommandMap()
              .register(name, new RegistryLookUpCommand<>(name, customRegistry, consumer));
    }


    @EventHandler
    public void onServerTick(ServerTickEndEvent e) {
        hudRenderer.addTickToRenderQueue(Bukkit.getOnlinePlayers());
    }

    @EventHandler
    public void buildPackOnServerLoad(ServerLoadEvent e) {
        onServerLoad(e.getType());
    }

    @EventHandler
    public void onPluginReload(MCCreativeLabReloadEvent ignored) {
        onServerLoad(ServerLoadEvent.LoadType.RELOAD);
    }

    public void onServerLoad(ServerLoadEvent.LoadType loadType) {
        if(loadType.equals(ServerLoadEvent.LoadType.STARTUP)){
            FakeBlockRegistry.setupFakeBlocks();
            ReplacedBlocks.setup();
            if (createResourcePack())
                MCCreativeLabExtension.getInstance().getResourcePackFileHoster()
                                      .sendDefaultResourcePackToPlayers(Bukkit.getOnlinePlayers());
            Bukkit.getLogger().info("MCCreativeLabExtension started");
        }
        else {
            buildPackAndZipFiles(true);
            MCCreativeLabExtension.getInstance().getResourcePackFileHoster().sendDefaultResourcePackToPlayers(Bukkit.getOnlinePlayers());
            Bukkit.getLogger().info("MCCreativeLabExtension reloaded");
        }
    }

    private boolean createResourcePack() {
        if (isServerSoftware()) {
            getFakeBlockRegistry().values().forEachRemaining(fakeBlock -> {
                for (FakeBlock.FakeBlockState fakeBlockState : fakeBlock.getFakeBlockStates())
                    customResourcePack.register(fakeBlockState.getFakeBlockDisplay());
            });
        }

        return buildPackAndZipFiles(false);
    }

    private boolean buildPackAndZipFiles(boolean doReload) {
        try {
            mergeOtherPacksIntoMainPack(getCustomResourcePack().getPathToSavePackDataTo().toPath().toFile(), getCustomResourcePack());
            if (!getFakeBlockRegistry().isEmpty()) {
                try {
                    if (isServerSoftware())
                        FakeBlock.FakeBlockHitbox.makeHitBoxesInvisible(getCustomResourcePack());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            getCustomResourcePack().installPack(doReload);
            getResourcePackFileHoster().createResourcePackZipFiles();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    private void mergeOtherPacksIntoMainPack(File mainPackFolder, CustomResourcePack customResourcePack) throws IOException {
        try (Stream<Path> stream = Files.walk(CustomResourcePack.resourcePacksFolder.toPath(), 1)) {
            stream.skip(1).forEach(path -> {
                if (path.equals(mainPackFolder.toPath()))
                    return;
                if (!path.toFile().isDirectory())
                    return;
                Bukkit.getLogger().info("Merging " + path + " into main pack");
                try {
                    ResourcePackScanner resourcePackScanner = new ResourcePackScanner(path);
                    resourcePackScanner.scan();
                    resourcePackScanner.getResources().forEach(customResourcePack::register);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            });
        }
    }

    @Override
    public void onDisable() {
        Feature.disable();
        getFakeBlockStorage().saveAll();

        for (World world : Bukkit.getWorlds())
            world.save();
        try {
            resourcePackFileHoster.closeAndWait();
            this.hudRenderer.interrupt();
            this.hudRenderer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void reloadPlugin() {
        Bukkit.getPluginManager().callEvent(new MCCreativeLabReloadEvent());

    }

    @OnlyServerSoftware
    public static FakeBlockRegistry getFakeBlockRegistry() {
        needsServerSoftware();
        return FAKE_BLOCK_REGISTRY;
    }

    @OnlyServerSoftware
    public static FakeItemRegistry getFakeItemRegistry() {
        needsServerSoftware();
        return FAKE_ITEM_REGISTRY;
    }

    @OnlyServerSoftware
    public static FakeBlockStorage getFakeBlockStorage() {
        needsServerSoftware();
        return fakeBlockStorage;
    }

    public static ResourcePackFileHoster getResourcePackFileHoster() {
        return resourcePackFileHoster;
    }

    public static CustomResourcePack getCustomResourcePack() {
        return customResourcePack;
    }

    public FuelSettings getFuelSettings() {
        return fuelSettings;
    }

    public static BlockBreakSpeedSettings getBlockBreakSpeedSettings() {
        return blockBreakSpeedSettings;
    }

    public static ReplacedSoundGroups getReplacedSoundGroups() {
        return replacedSoundGroups;
    }

    public static HudRenderer getHudRenderer() {
        return hudRenderer;
    }

    public static LegacyFeatures getLegacyFeatures() {
        return legacyFeatures;
    }

    public static Features getFeatures() {
        return features;
    }
}
