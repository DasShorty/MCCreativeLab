package de.verdox.mccreativelab;

import com.destroystokyo.paper.event.server.ServerTickEndEvent;
import de.verdox.mccreativelab.block.*;
import de.verdox.mccreativelab.blockbreak.BlockBreakSpeedModifier;
import de.verdox.mccreativelab.blockbreak.BlockBreakSpeedSettings;
import de.verdox.mccreativelab.debug.Debug;
import de.verdox.mccreativelab.debug.DebugCommand;
import de.verdox.mccreativelab.debug.FakeBlockCommand;
import de.verdox.mccreativelab.event.MCCreativeLabReloadEvent;
import de.verdox.mccreativelab.generator.AssetPath;
import de.verdox.mccreativelab.generator.ResourcePackFileHoster;
import de.verdox.mccreativelab.generator.listener.ResourcePackListener;
import de.verdox.mccreativelab.generator.resourcepack.CustomResourcePack;
import de.verdox.mccreativelab.generator.resourcepack.renderer.HudRendererImpl;
import de.verdox.mccreativelab.generator.resourcepack.renderer.element.HudRenderer;
import de.verdox.mccreativelab.debug.FakeItemCommand;
import de.verdox.mccreativelab.item.FakeItemRegistry;
import de.verdox.mccreativelab.item.fuel.FuelSettings;
import de.verdox.mccreativelab.legacy.LegacyFeatures;
import de.verdox.mccreativelab.sound.ReplacedSoundGroups;
import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;

public class MCCreativeLabExtension extends JavaPlugin implements Listener {
    public static MCCreativeLabExtension getInstance() {
        return INSTANCE;
    }

    private static MCCreativeLabExtension INSTANCE;
    public static final boolean usesMCCreativeLabFork = Bukkit.getServer().getName().equals("MCCreativeLab");
    private static final FakeBlockRegistry FAKE_BLOCK_REGISTRY = new FakeBlockRegistry();
    private static final FakeItemRegistry FAKE_ITEM_REGISTRY = new FakeItemRegistry();
    private static final ResourcePackFileHoster resourcePackFileHoster = new ResourcePackFileHoster("127.0.0.1", 8080);
    private static final CustomResourcePack customResourcePack = new CustomResourcePack("MCCreativeLab", 18, "Generated by MCCreativeLab", AssetPath.buildPath("resourcePacks"));
    private static final HudRendererImpl hudRenderer = new HudRendererImpl();
    private static final FakeBlockStorage fakeBlockStorage = new FakeBlockStorage();
    private static final BlockBreakSpeedSettings blockBreakSpeedSettings = new BlockBreakSpeedSettings();
    private static final ReplacedSoundGroups replacedSoundGroups = new ReplacedSoundGroups();
    private static final LegacyFeatures legacyFeatures = new LegacyFeatures();
    private FuelSettings fuelSettings;

    public static void needsServerSoftware() {
        if (!usesMCCreativeLabFork)
            throw new IllegalStateException("This feature is not available without the MCCreativeLab Paper Fork");
    }

    public static boolean isServerSoftware() {
        return usesMCCreativeLabFork;
    }

    @Override
    public void onLoad() {
        if(isServerSoftware())
            Bukkit.getLogger().info("§eFound MCCreativeLab Server Software");
        else
            Bukkit.getLogger().info("§cConsider running MCCreativeLab Server Software");
        INSTANCE = this;
        fuelSettings = new FuelSettings();
        if(isServerSoftware()) Debug.init();
    }

    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
        if (isServerSoftware()) {
            Bukkit.getPluginManager().registerEvents(new FakeBlockCacheHandler(), this);
            Bukkit.getPluginManager().registerEvents(new FakeBlockListener(), this);
            Bukkit.getCommandMap().register("fakeblock", "mccreativelab", new FakeBlockCommand());
            Bukkit.getCommandMap().register("fakeitem", "mccreativelab", new FakeItemCommand());
        }
        Bukkit.getPluginManager().registerEvents(new ResourcePackListener(), this);
        Bukkit.getPluginManager().registerEvents(new BlockBreakSpeedModifier(), this);
        Bukkit.getPluginManager().registerEvents(new FakeBlockSoundManager(), this);
        Bukkit.getPluginManager().registerEvents(fuelSettings, this);
        Bukkit.getPluginManager().registerEvents(FakeBlockRegistry.fakeBlockDamage, this);
        Bukkit.getCommandMap().register("debug", "mccreativelab", new DebugCommand());
        hudRenderer.start();
        getLegacyFeatures().enableOldFoodSystem();
        getLegacyFeatures().enableOldCombatSystem();
    }


    @EventHandler
    public void onServerTick(ServerTickEndEvent e) {
        hudRenderer.addTickToRenderQueue(Bukkit.getOnlinePlayers());
    }

    public void onServerLoad(ServerLoadEvent.LoadType loadType) {
        FakeBlockRegistry.setupFakeBlocks();
        if (createResourcePack())
            MCCreativeLabExtension.getInstance().getResourcePackFileHoster()
                                  .sendDefaultResourcePackToPlayers(Bukkit.getOnlinePlayers());
    }

    private boolean createResourcePack() {
        if(isServerSoftware()) {
            getFakeBlockRegistry().values().forEachRemaining(fakeBlock -> {
                for (FakeBlock.FakeBlockState fakeBlockState : fakeBlock.getFakeBlockStates())
                    customResourcePack.register(fakeBlockState.getFakeBlockDisplay());
            });
        }

        return buildPackAndZipFiles();
    }

    private boolean buildPackAndZipFiles() {
        try {
            File installed = getCustomResourcePack().installPack();
            if (!getFakeBlockRegistry().isEmpty()) {
                try {
                    if(usesMCCreativeLabFork && FakeBlockRegistry.USE_ALTERNATE_FAKE_BLOCK_ENGINE)
                        FakeBlock.FakeBlockHitbox.makeHitBoxesInvisible(getCustomResourcePack());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            if (installed == null)
                return false;
            MCCreativeLabExtension.getInstance().getResourcePackFileHoster().createResourcePackZipFiles();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    @Override
    public void onDisable() {
        for (World world : Bukkit.getWorlds())
            world.save();
        try {
            resourcePackFileHoster.closeAndWait();
            this.hudRenderer.interrupt();
            this.hudRenderer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void reloadPlugin() {
        Bukkit.getPluginManager().callEvent(new MCCreativeLabReloadEvent());
    }

    @OnlyServerSoftware
    public static FakeBlockRegistry getFakeBlockRegistry() {
        needsServerSoftware();
        return FAKE_BLOCK_REGISTRY;
    }

    @OnlyServerSoftware
    public static FakeItemRegistry getFakeItemRegistry() {
        needsServerSoftware();
        return FAKE_ITEM_REGISTRY;
    }

    @OnlyServerSoftware
    public static FakeBlockStorage getFakeBlockStorage() {
        needsServerSoftware();
        return fakeBlockStorage;
    }

    public static ResourcePackFileHoster getResourcePackFileHoster() {
        return resourcePackFileHoster;
    }

    public static CustomResourcePack getCustomResourcePack() {
        return customResourcePack;
    }

    public FuelSettings getFuelSettings() {
        return fuelSettings;
    }

    public static BlockBreakSpeedSettings getBlockBreakSpeedSettings() {
        return blockBreakSpeedSettings;
    }

    public static ReplacedSoundGroups getReplacedSoundGroups() {
        return replacedSoundGroups;
    }

    public static HudRenderer getHudRenderer() {
        return hudRenderer;
    }

    public static LegacyFeatures getLegacyFeatures() {
        return legacyFeatures;
    }
}
