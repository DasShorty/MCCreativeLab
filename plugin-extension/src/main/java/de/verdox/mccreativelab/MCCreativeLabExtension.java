package de.verdox.mccreativelab;

import com.destroystokyo.paper.event.server.ServerTickEndEvent;
import de.verdox.mccreativelab.block.*;
import de.verdox.mccreativelab.blockbreak.BlockBreakSpeedModifier;
import de.verdox.mccreativelab.event.MCCreativeLabReloadEvent;
import de.verdox.mccreativelab.generator.Asset;
import de.verdox.mccreativelab.generator.AssetPath;
import de.verdox.mccreativelab.generator.ResourcePackFileHoster;
import de.verdox.mccreativelab.generator.listener.ResourcePackListener;
import de.verdox.mccreativelab.generator.resourcepack.CustomResourcePack;
import de.verdox.mccreativelab.generator.resourcepack.renderer.HudRendererImpl;
import de.verdox.mccreativelab.generator.resourcepack.renderer.element.HudRenderer;
import de.verdox.mccreativelab.generator.resourcepack.types.sound.SoundData;
import de.verdox.mccreativelab.item.FakeItemCommand;
import de.verdox.mccreativelab.item.FakeItemRegistry;
import de.verdox.mccreativelab.item.FakeItems;
import de.verdox.mccreativelab.legacy.LegacyFeatures;
import de.verdox.mccreativelab.sound.ReplacedSoundGroups;
import org.bukkit.Bukkit;
import org.bukkit.NamespacedKey;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;

public class MCCreativeLabExtension extends JavaPlugin implements Listener {
    public static MCCreativeLabExtension getInstance() {
        return INSTANCE;
    }

    private static MCCreativeLabExtension INSTANCE;
    private static final FakeBlockRegistry FAKE_BLOCK_REGISTRY = new FakeBlockRegistry();
    private static final FakeItemRegistry FAKE_ITEM_REGISTRY = new FakeItemRegistry();
    private final ResourcePackFileHoster resourcePackFileHoster = new ResourcePackFileHoster("127.0.0.1", 8080);
    private final CustomResourcePack customResourcePack = new CustomResourcePack("MCCreativeLab", 18, "Generated by MCCreativeLab", AssetPath.buildPath("resourcePacks"));
    private final HudRendererImpl hudRenderer = new HudRendererImpl();
    private final FakeBlockStorage fakeBlockStorage = new FakeBlockStorage();

    @Override
    public void onLoad() {
        INSTANCE = this;
        FakeBlocks.init();
        FakeItems.init();
    }

    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
        Bukkit.getPluginManager().registerEvents(new FakeBlockCacheHandler(), this);
        Bukkit.getPluginManager().registerEvents(new ResourcePackListener(), this);
        Bukkit.getPluginManager().registerEvents(new BlockBreakSpeedModifier(), this);
        Bukkit.getPluginManager().registerEvents(new FakeBlockListener(), this);
        Bukkit.getPluginManager().registerEvents(new FakeBlockSoundManager(), this);
        Bukkit.getPluginManager().registerEvents(FakeBlockRegistry.fakeBlockDamage, this);
        Bukkit.getCommandMap().register("fakeblock", "mccreativelab", new FakeBlockCommand());
        Bukkit.getCommandMap().register("fakeitem", "mccreativelab", new FakeItemCommand());
        Bukkit.getCommandMap().register("debug", "mccreativelab", new DebugCommand());
        this.hudRenderer.start();
        LegacyFeatures.enableOldFoodSystem();
        LegacyFeatures.enableOldCombatSystem();
    }



    @EventHandler
    public void onServerTick(ServerTickEndEvent e){
        hudRenderer.addTickToRenderQueue(Bukkit.getOnlinePlayers());
    }

    private void modifyGlassSoundsForCustomBlocks() {
        // Register empty sounds for glass break because we remove those sounds for our custom blocks
        customResourcePack.register(new SoundData(NamespacedKey.minecraft("block.glass.break"), true, "subtitles.block.generic.break"));
        customResourcePack.register(new SoundData(NamespacedKey.minecraft("block.glass.hit"), true, "subtitles.block.generic.hit"));
        customResourcePack.register(new SoundData(NamespacedKey.minecraft("block.glass.place"), true, "subtitles.block.generic.place"));
        customResourcePack.register(new SoundData(NamespacedKey.minecraft("block.glass.step"), true, "subtitles.block.generic.footsteps"));
        customResourcePack.register(new SoundData(new NamespacedKey("minecraft", "block.glass.custom.break"), false, "subtitles.block.generic.break")
            .withSoundVariant(new NamespacedKey("minecraft", "block/custom/glass/break/glass1"), new Asset<>(() -> MCCreativeLabExtension.class.getResourceAsStream("/sounds/glass/break/glass1.ogg")), 1, 1)
            .withSoundVariant(new NamespacedKey("minecraft", "block/custom/glass/break/glass2"), new Asset<>(() -> MCCreativeLabExtension.class.getResourceAsStream("/sounds/glass/break/glass2.ogg")), 1, 1)
            .withSoundVariant(new NamespacedKey("minecraft", "block/custom/glass/break/glass3"), new Asset<>(() -> MCCreativeLabExtension.class.getResourceAsStream("/sounds/glass/break/glass3.ogg")), 1, 1)
        );
    }

    public void onServerLoad(ServerLoadEvent.LoadType loadType) {
        ReplacedSoundGroups.init();
        FakeBlockRegistry.setupFakeBlocks();
        if (createResourcePack())
            MCCreativeLabExtension.getInstance().getResourcePackFileHoster()
                                  .sendDefaultResourcePackToPlayers(Bukkit.getOnlinePlayers());
    }

    private boolean createResourcePack() {
        getFakeBlockRegistry().values().forEachRemaining(fakeBlock -> {
            for (FakeBlock.FakeBlockState fakeBlockState : fakeBlock.getFakeBlockStates())
                customResourcePack.register(fakeBlockState.getFakeBlockDisplay());
        });

        return buildPackAndZipFiles();
    }

    private boolean buildPackAndZipFiles() {
        try {
            File installed = getCustomResourcePack().installPack();
            if (!getFakeBlockRegistry().isEmpty()) {
                try {
                    FakeBlock.FakeBlockHitbox.makeHitBoxesInvisible(getCustomResourcePack());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            if (installed == null)
                return false;
            MCCreativeLabExtension.getInstance().getResourcePackFileHoster().createResourcePackZipFiles();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    public static FakeBlockRegistry getFakeBlockRegistry() {
        return FAKE_BLOCK_REGISTRY;
    }

    public static FakeItemRegistry getFakeItemRegistry() {
        return FAKE_ITEM_REGISTRY;
    }

    @Override
    public void onDisable() {
        for (World world : Bukkit.getWorlds())
            world.save();
        try {
            resourcePackFileHoster.closeAndWait();
            this.hudRenderer.interrupt();
            this.hudRenderer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public FakeBlockStorage getFakeBlockStorage() {
        return fakeBlockStorage;
    }

    public void reloadPlugin() {
        Bukkit.getPluginManager().callEvent(new MCCreativeLabReloadEvent());
    }

    public ResourcePackFileHoster getResourcePackFileHoster() {
        return resourcePackFileHoster;
    }

    public CustomResourcePack getCustomResourcePack() {
        return customResourcePack;
    }

    public HudRenderer getHudRenderer() {
        return hudRenderer;
    }
}
